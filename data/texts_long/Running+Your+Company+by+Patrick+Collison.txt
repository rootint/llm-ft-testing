 So Patrick, welcome. So Patrick is the co-founder and CEO of Stripe. He launched the startup, we're now a pretty big company, in 2010, correct? With his brother John. Well actually we started working on it full-time in 2010, but it actually, to your comment just there about companies launching, it took us quite a while to launch because we had to get all these kind of banking partnerships in place and so on. And so we didn't launch until September 2011. We'd been working on it for almost two years at that point. And every time we saw a PG or really anyone else from YC, all they would ask us is why we had not launched yet. Some things don't change. That's interesting. So two years until you had to access. JOHN LUTHER KING JR.: Yeah, it was, I think, one year and 11 months from first line of code to public launch. Which, to be clear, I don't recommend. That is not a good idea. It's just we had to, because we had to get all these other things in place. And because it took us so long to be able to publicly launch, we tried to be very disciplined about gradually expanding the number of users every month. And so even though we weren't publicly available, we got our first user, first production user, just three months in. And then every month we tried to add at least a handful of users. And so by the time we publicly launched, we did have about 100 users, which back then to us seemed then to us, that seemed like a big deal. It seemed very large. Speaking of, actually, when I was preparing for this interview, I was trying to jog my memories, and I remember specifically because your office was near here in Palo Alto, and I remember back then people would always talk about the Collison brothers running around, going to people's offices and, like, installing their API into the web apps always talk about the Collison brothers running around, going to people's offices and installing their API into the web apps and, in true do things don't scale fashion. And I assume you are not only trying to make sure they installed it, but also get user feedback. And it happens so much that actually, I don't know if you know, Paul Graham, PG, now calls it the Collison installation. And this is actually something we give, we tell founders to go do this, do the Collison installation, because obviously, you know, in hindsight, it seems so obvious to do. Well, it sort of served two purposes. One is to your point. I mean, it served as a really good way to kind of get sort of, to do user research and to get kind of UX feedback and so on. And I mean, if you've done this, I'm sure you've had the experience where you design what you're absolutely certain is the most streamlined, user-friendly, straightforward, frictionless way to do whatever it is the product does. And then you present it and put it in front of a user. And you just ask them to do whatever it is. And they find it completely impenetrable. And they're clicking all the wrong links, and they can't find the next button, even though the next button is there blinking in green and stuff. And so it's invariably incredibly painful, the sort of nothing so sobering as watching somebody use the first version of some new product. But the other reason for us was we had suggested to somebody they use Stripe, or they switch to Stripe or whatever. And invariably, the response is, oh, yeah, sure. That sounds awesome. But it can be that they'll postpone it and they'll postpone it again. And it's like there's never a moment where it's like, OK, this is the evening when I'm going to switch to Stripe. And so us going and sort of accosting them in person sort You know, people talk about in sales, it's always like a why you and a why this and a why now and these kinds of questions. And going in person kind of created a why now moment. It's like, well, we're here at your house. Did you just show up or how did you? I don't think we ever actually just showed up. Although perhaps we should have, but no, we tried to be kind of at least semi-invited. Got it. So Stripe now today, I mean, you've come a long way since back then. I mean, it's not even been, it's really been a decade, not even. But I mean, today you're, well, you have 1,300 employees across nine offices across the world. You're doing, I have a list here. You manage 200 million API requests a day. You process billions a year for millions of companies across 130 companies. New latest round of funding, Stripe is now worth $20 million. Billion. Anyway, the list could go on. I'll stop there, otherwise people are gonna think I'm your PR agent. But anyway, you've clearly done something right. And so I wanna spend a lot of, I guess, the time today talking about running your startup from the perspective of the startup CEO, you yourself. And it's kind of like Zoom, like what do you think about from Zooming in on the day-to-day operations to Zooming out to the long-term strategic decisions? So maybe to help us ease into the discussion, one thing is when you start off, from the very beginning, a lot of friends get together. And they come up with an idea, and they're super excited, and they start working on it. And then at some point, they need to decide, ah, we need a CEO for this company. And some people aren't meant to be CEOs. But for you and John, you know, I've met both of you. You're very smart, ambitious people with great, you know, qualities and attributes that correlate to becoming a great leader. How did you and John decide you would be the CEO? Well, I think Stripe is unusual where John and I are obviously brothers. We've known each other for a long time. And because of the relationship, we're able to place a lot of trust in each other. And we really do run the company together. There's no major decision that Stripe has made that we've not both been a part of. And it's not always the case that, despite being the CEO, I'm the person who... In the case of disagreement, it's not always the case that I prevail. Our dispute resolution framework is much more around which of us cares more than which of us holds this title or that. John's title is president, and so there's some, both are significant roles. In that regard, I think we're kind of an anomaly. The fact that I became CEO was honestly semi-random. And I would say, yeah, I think because we're brothers, we're able to kind of get to this unusual situation where we really do run it together. Is there a certain? SETH LADDESCHERRAN- Sorry, it may not be a helpful answer, because perhaps you're trying to encourage all these companies. It's like, you know, shit, one of you guys has got to be the CEO. Well, do you think there's like a rubric for this of, you know, here are five questions you should answer and maybe then you decide? That's a good question. Maybe not. Yeah, I'm guessing it's quite, okay, well, here, I will say one thing, which is I think it is important to just have an efficient mechanism for reaching a decision, and it can't be sort of, you know, simply orange around consensus, right? If there are sort of three co-founders, and sort of none of you sort of quite want to, or, you know, nobody's a clear CEO, and you don't have some kind of efficient mechanism for sort of having decisions get made. I think that is a recipe for failure. And even, I don't know, doing some kind of, you know, sort of quasi-democratic voting is probably not a great idea either. And so for myself and John, we kind of both have areas we kind of respectively specialize in. And so that doesn't mean we have absolute autonomy and authority there, but we bias in that direction. So he spends more time, for example, working externally with users. I spend more of my time working internally on a lot of product and engineering things. That doesn't say that he doesn't make decisions there or I don't here, but again, there's a bias in that direction. And then secondly, we have this additional aspect where, you know, in the case of it being a major decision and we sort of respectively disagree, then we really do sort of try to make it based on sort of which of us is just more passionate about it. And because that will correlate with the outcome. If one of us really wants to do something or thinks that, you know, X or Y is the right thing to do, simply sort of wanting us to be so passionately is more, I mean, that can be kind of a sort of self-fulfilling prophecy, and so I think it's kind of not irrational to have that be a consideration. Yeah, and I also see like the best teams that work well together are the ones in which everyone, they all want the best idea to win, not their idea to win. And so there's a stepping back and an unselfish kind of way to get to that conclusion. Definitely. And I think that, you know, something that we're kind of lucky about that I think is very, well, exactly to your point, I think is definitely present in sort of the most successful co-founding relationships that I've seen is some degree of sort of dispassion in disagreement. And, you know, for us, I think that was, you know, kind of easier to get to because, you know, we've been disagreeing with each other for 20 years. And so it had lost some of the emotional charge. But I think that sort of finding other mechanisms whereby you can get there such that it's not sort of this, I don't know, this't know, the notion of disagreeing strongly is not sort of a scary phenomenon. And both parties, or multiple parties, if there are more than two, are kind of suppressing their feelings for fear of there being this divergence. You have, how many more siblings do you have? Do you have one more brother? One more sibling, yes. Three of us in total. Would you guys, would he join the, or is it just you and John, or is it a special match there? Well, Tommy, my youngest sibling, he's sort of quite a bit younger than myself and John, and so John is almost, or is approximately two years younger than I am. And when we started Stripe, I guess I was about 21, and I guess therefore John was 19. And Tommy was still kind of definitively midway through high school, and so it just wasn't quite practical at the time. Yes, finished high school. And now I think if you asked him, he'd probably say he'd never throw his lot in with miscreants like us. Yeah. Cool. So in terms of the role of CEO, often people say there's a threshold in time in which, and it's related to product market fit, where you have a role as a pre-product market fit CEO, and then which is completely different from your role as a post-product market fit CEO. So I want to spend most of our time talking about pre-product market fit, but just to calibrate those questions, what, in terms for Stripe, what was product market fit for you? Like, how did you define it? Were there metrics to it? What number of employees you were at when you reached it? So on and so forth. Yeah, that's a really good question. And I think you're exactly right to kind of divide things into sort of like this kind of the story of a startup is two stories and it's a story of getting to product market fit and then the story of kind of what happens subsequently and obviously there isn't like a totally definitive binary line between them but I think it's kind of helpful to frame the narrative in that regard and I would say for stripe and actually around the time we launched publicly I think is is basically when we had it. When we launched publicly in September 2011, we'd rebuilt significant components of Stripe multiple times in response to user feedback. Like we're on the third version of our dashboard and the second or third, depending on how you count, major version of our API. And so we'd gone through a lot of iteration response to kind of the, you know, evident challenges that users had or the deficiencies the product seemed to possess. And when we launched, we were basically immediately bottlenecked on sort of being able to serve user demand rather than generating user demand. And I think sort of directionally, that's the inversion that happens, where in the early days, you're really trying to figure out, well, OK, conditioned on or given some user, how do I make sure that it does what they need, and they end up a happy, retained user in a sufficient fraction of cases or whatever. And then at some point, it flows for, OK, this sort of, well, I think it's very different. Do you take 100 users and some fraction of them on board and some smaller fraction remain engaged or whatever? And so 100 users, the curve asymptotes downwards. And then you take 100 users and kind of, again, a meaningful fraction end up engaged. And they actually tell more people about it or they sort of invite people. I don't mean kind of strictly just in a viral sense, but just kind of generally speaking, does that kind of lead to and generate more demand such that things seem to be sort of in some super linear fashion kind of growing? in some super linear fashion kind of growing. And I think when you sort of, like being kind of less than one is just very different to being more than one. And it sort of seems, again, when we launched, I mean, that didn't generate that many users. I mean, I don't exactly remember, but let's just pretend that sort of 500 businesses signed up on the day we launched. But sort of immediately those 500 businesses told other businesses and people heard about it, and all the rest. The next day, we had a lot of businesses as well, and so forth, such that from the day we launched, the challenge became keeping up with demand, rather than tweaking the product to somehow serve the market. When you launched, how many people were you at at that point, employees? We were about 10. So I guess before you launched then, your day-to-day sounds like it was just like we were talking about earlier, just running around talking with users and fixing issues. Was that literally every single day was like that? Or what were you doing every day? OK, so not literally every single day, but I would say we really tried very hard to understand in sort of very granular detail what exactly it was that people were doing, where they were tripping up, and so on. So just to give you some examples. We had a chat room for sort of providing support when people were integrating Stripe. And it was actually a public chat room, which had some downsides, because if we'd broken something or if somebody had some embarrassing issues, everyone would see it. We thought that was good, because it would actually put more pressure on us to have the product be good. And we had, literally, every time, for the first, I don't know, call it 10 users of Stripe, every time somebody sent an API request to Stripe, like it sent an email to us. So we were like looking at every single API request. And if we saw users do something weird, we're like, well, why did they do that? Or kind of where were our docs confusing or whatever? And so I'd get out of dinner in the evening or something, and I'd have, well, again, it seemed like a lot of the time out of maybe 10 emails because Stripe was not handling a lot of API requests back then. But you're literally looking at sort of each individual action. And actually, Stripe, we just kind of celebrated or at least passed, we're not very good at celebrating, but we passed our seventh anniversary just a few days ago on September 29th. And so I was looking at our sort of, we had an hourly stats email that we used to send. And so on the day we launched, we handled sort of 22 payments in the previous hour, which again sort of seemed huge to us back then. But I was noticing in that email, I'd actually forgotten this, that we had things like, in the email, we literally had a list of businesses that had submitted three or five or something API requests but it sort of not gone live they'd not launched their businesses we literally had the emails of all these businesses the idea was that we would then kind of we literally individually reach out to them it's like hey you kind of seem to use stripe a little bit but you know you didn't you didn't go live like did we did we screw up, or was the product somehow inadequate or whatever? We did things like every time anyone ever hit an error of any sort, that generated a high priority email to us. And so we would try to immediately go solve it. And that also generated this pleasant user experience where it's frustrating when you hit an error in some service, but we could then often 15 minutes later reach out to them and say, hey, we saw that you have encountered this problem. It's all fixed now. And sometimes we did that even in the case where the user made a silly mistake and they mistyped an API parameter or something. And we just reach out to them and we're like, hey, noticed you had a typo in your code, which perhaps some of them was a little bit unsettling, but at least kind of helped us increase the throughput of product feedback. But these are all examples, I would say, of the general pattern of really trying to be hyper attentive to all the micro details of what people were doing the product and iterating rapidly in response to it. And generally speaking, I think the sort of pre-product market fit metrics are actually relatively unhelpful. I think you sort of, you really want to bias very strongly towards kind of as much sort of inspection and kind of high throughput qualitative feedback as possible. Because probably, you know, not that many people are using your product, right? And so, you know, if it's 20 users, you can kind of in some sense afford to just look at everything they're doing and try to understand what's working and what isn't. Yeah, in some sense, it's how much do they... You can tell subjectively how much they love your product, or how much are they gonna probably be really upset if it just disappears. Totally. And actually, on this point, we had a thing at the bottom of every web page. We had a little sort of text box kind of anchored to the bottom of the browser frame. And sort of one line high sort of text input. But we had placeholder text in it to sort of try to prime people to tell us things. And so it had, you know, But we had placeholder text in it to try to prime people to tell us things. And so it had my favorite part of Stripe is ellipsis. And people would just fill it out and hit Enter. But we also, of course, had most of the prompts were negative. It was like, the worst thing about Stripe is, or the worst thing about this page is, or I really hate the way Stripe does, or whatever. And again, we would sort of, sort of at that stage you have to be kind of masochistic. And so again, we'd be sort of always waking up to, you know, all these emails, you know, telling us all the terrible things about Stripe. But that was, you know, sort of a helpful to-do list for the day ahead. How did you stay happy if, Like in the early days, before I restarted, it was like, I've always complained. What makes you think we did? So I would say it was, well, happy is such a squishy concept, right? And because there are lots of things that we, I guess, when I look back, and look, maybe this is the rationalization I taught myself. But when I look back through life at the things that I'm most glad I did, I wasn't exactly happy while doing them. Like often I was very stressed out or, you know, I had to work really hard or whatever, but sort of the things that kind of post hoc brought the most fulfillment. And, you know, I think that, well, you know, there's a rich literature here, and so I won't dive too deeply into it, but I do think happiness is a tricky concept to pin down, because is it happiness in the moment? Is it the sense that you have a year later looking back, and so on? And language is squishy, and it's not completely specifically defined, but I think generally speaking a better utility function and kind of gradient to try to climb is that of fulfillment. And so I would say kind of the experience of doing Stripe was, it was not especially happy because we were sort of, you know, constantly sort of incredibly aware of all the ways in which the product was severely deficient and, you know, all the challenges we faced. And I mean, it seems like there was no fintech category back then. It was just like two teenagers or just over teenagers trying to compete with PayPal, which many people told us was not an especially kind of promising avenue to pursue. And so not especially happy per se, but it did feel kind of fulfilling. I enjoyed working with John and the kind of people we subsequently hired. It was really fun working with the kinds of customers we were serving. They were just sort of businesses doing all these kind of wonderful things, and they were kind of really smart people. And it felt that if it worked, it could be kind of consequential in the world. And so I would say it sort of felt like, I don't know what it feels like to be a scientist or something, but I'm guessing when you're pursuing, you have this big question and you're pursuing all these avenues to try to better understand it, and I'm guessing day to day it's not especially happy because most of your experiments don't work or whatever, but perhaps there's some analog there in terms of it still feels, in some sense, meaningful. Yeah, in some sense. I mean, day to day, like you said, you're just running around with your head cut off. But maybe on a weekly or at least monthly basis is just taking a step back and seeing, like, what progress have I actually made? Because week to week, it's like 1% here, 1% here. It doesn't seem much. But from a monthly basis or maybe longer than that, it seems like there's movement. Yeah, and I think that's true. And I think it's almost certainly a bad idea to sort of work on a company or to work on anything if you're like truly unhappy working on it, right? And so there's kind of clearly some balancing act there. And I think a lot of, well, there's so many different difficult judgment calls to try to make in a startup, but of course part of it is if something is making you unhappy or if it just doesn't seem like an especially promising avenue or it's not really working or whatever, like your time has relatively high opportunity costs. Like you don't get to start that many startups in your life, right? And so kind of knowing when to sort of call it quits, I think it is actually, I mean, sort of, you know, in startup we really extol and sort of uphold the virtues of sort of, you know, determination at all costs, you know, never, and so on. And that's clearly not the right answer, in that sometimes you should quit. And so I think what you're getting at is true and right, where I think there does need to be some happiness, satisfaction, fulfillment. There's a good book of that name, Satisfaction, which I recommend, kind of week to week, month to month, if you're on the right trajectory. Oh, man, I wish I had known that I could have, you know, I remember when I was trying to, when I was about to implement Stripe myself, I had these bad memories of trying to implement PayPal and like stacks of documentation and taking like five days to figure it all out. And so I sat down, I was like, it. Because you guys are saying, oh, it'd take you 10 minutes. I was like, no way. And it probably took me actually five minutes at that point. And I was super happy. But maybe I should have sent you a review. Yeah, that would have been great, especially if the review had criticism for us. But no, it's definitely helpful to have competitors with not very good products. Yes. Okay, so you were, in the early days, you were doing a lot of stuff yourself. At some point, I guess two-part question. One is, what are the things that you weren't good at? And then two, at what point did you hire someone to what I assume is to do those things? Well, I mean, I'm not that good at most things, right? And I see this in a non-false modesty or I don't mean to be artificially self-deprecating, but for almost anything that Stripe has to do, there are people who are better at that than I am. And so I think to some degree, the story of, say, product market fit and to say our current stage is implementing the recognition of that in more and more areas. of that in kind of more and more areas. That said, I think maybe sort of embedded in that question is, you know, okay, well, acknowledging that you're probably not the world's expert in any single thing, it's kind of in what order do you sort of replace yourself? do you sort of replace yourself? And for Stripe, the important thing that we were sort of most obviously not that great at was kind of partnerships and, you know, sort of working with the various banks that we had to sort of get on board and so on. And so kind of we made, in fact, In fact, Jeff Ralston, who is here in the room today, I think was some combination of very supportive and perhaps in the back of his mind, slightly pitying, where he saw us trying to get these partnerships with these big banks in place. And we really weren't getting anywhere very fast. And so he told us that we had to hire this guy, Billy Alvarado. And he told us, just don't ask me questions. Just hire this guy. And at the time, everyone at Stripe was an engineer. And so we just couldn't quite understand what a non-engineer would do. It's like, if you're not writing code, what else is there? And so we were kind of suspicious of this idea, and we went back to Jeff. We met Billy, and he seemed like a wonderful guy. We really liked him, but we couldn't quite get past this. Okay, but what does it actually... How does this work out in practice? And so Jeff told us that we should hire Billy, and if it didn't work, over the first few months or whatever, that if it didn't work out, Jeff would sort of go back and pay his salary. So it was kind of a zero risk move for us. And so, and we did not have a whole lot of money at the time, so that was not insignificant. So we hired Billy and that was sort of an immediately trajectory changing event where, you know, previously when we'd gone and talked to a bank, I mean, I don't know if they're literally doing this, but it certainly felt they were kind of pushing the security button under their desk. It's like, why are these guys in my office? And then suddenly things started to go kind of much more smoothly. And Billy is still with Stripe today and has been an enormously kind of pivotal presence. And so that turned out to be very helpful advice. That is interesting. Jeff as an inflection point for Stripe. Never knew. Cool. So it sounds like you had hired actually people before Billy. I guess your very first hire, the third person with you and John was an engineer, I'm assuming? Well, he actually wasn't an engineer, but he joined Stripe and he started to become an engineer. So he'd written a little bit of code previously, but he joined them. There was a lot of code that had to be written. It was a guy I'd known from college. He's actually also Irish. And we had a lot of code to be written, and so he was the kind of person who would survey the landscape and just do whatever was most important and required. At that time, he was writing code. And so off he went. So kind of the transition from pre-product market fit to post-product market fit, a lot of CEOs, when they think back, this is like the one point in which they think, oh, I could have done that better. So how did you grade your success of that transition? Because a lot of it is just taking stuff, delegating stuff better and doing other functions of the business. So what exactly was your transition like? And how could I, if I was in your shoes, tell that I was doing it well? Yeah, so I don't think I did it especially well. And I think it kind of, you know, fortunately sort of, you know, it worked out. But I think if I was doing it all over again, I think we could have sort of accelerated ourselves by a year or two if we'd sort of gone about it in a somewhat more disciplined and kind of self-aware fashion. have gone about it in a somewhat more disciplined and kind of self-aware fashion. I think one of the most kind of pernicious sort of mental models you can have here is that kind of you are on some growth curve and it is sort of your job to sustain or, you know, marginally inflect upwards or kind of you know that, what's it then, curling the sport where you're kind of wiping the ice while the, whatever it is, the weight proceeds down along, I'm sorry, I'm not Canadian, but somehow you're making these very small interventions and perturbations on some underlying growth curve. I think that's an easy mental model to have and I think it's kind of actively kind of fallacious and mistaken. I think a much better mental model to have is you're serving some market, and that market is relatively finite in size. I mean, you can always change the project and increase the market size, but you can think of it as being finite. And then there's sort of the percentage of the market that you're serving. And then whatever percentage you are not serving is kind of, well, you just haven't built the sort of go-to-market functions and organization that's kind of capable or at least has yet sort of brought the product to those market segments. And the kind of the growth curve or adoption curve is just kind of a function of that go-to-market apparatus. But basically, it's not some kind of cosmic trajectory. It's something kind of very much of your creation and under your control. And so what we did not do, but what I wish we did, is kind of maybe, well, whatever. Just after we launched, there's a whole bunch of kind of immediate scaling work we had to do. But say, six months after launch, we should have mapped out the concentric circles of our market. Maybe those very early stage startups that were our initial constituency. Then there's all technical startups, but not necessarily very early stage. And then there's, I don't know, you keep going in these successive increments until eventually you get to say all companies handling online payments or something, right? And Gannon figured out, okay, what's the size of this market? What fraction of it are we currently serving? What would it take to serve more and so on? And I think it's quite striking. You see that when repeat founders go and start companies, they almost invariably are willing to kind of build the organization, you know, post-product market fit, they're most invariably willing to kind of build the organization ahead of where things are today, which I think is exactly the right thing to do, because they're thinking, okay, I have the right product, now let's kind of work backwards from, okay, what would the organization look like that was serving the entire market, and let's just start building that organization. Because again, the growth curve is under my control. And of course, it's not like 100% under your control, but I think it's much more under your control than people tend to think. There's also, of course, a difference here, a major difference when you use, or I think about sort of consumer versus kind of B2B use cases. Consumer, it's a bit more, I mean, people don't necessarily know exactly what they want. You know, what's the market size for like a news reading app or a dating app or something? I mean, it's kind of, it depends a lot on the product. Like, you know, maybe way more people should be reading news or something. But for sort of a, for some service or a product that sort of serves a discrete, logical, concrete function, that sort of a set of businesses or entities definitively have or don't have I think it's kind of much more sort of much more rational and much more mappable and I partly had this epiphany when I'm Aaron Levy who's the CEO of box John I eventually we started Dan Palo Alto we moved up to San Francisco I don't well, Aaron Levy had Facebook messaged John. And we'd never heard of him. We hadn't heard of most people in Silicon Valley. But he'd Facebook messaged us, like, very early on, asking to invest in Stripe. And I think John didn't know, who's this random guy? And so we never replied. But then, you know, we heard of Box and we heard of Aaron and we read his funny tweets and all the rest. And so we moved to San Francisco and we invited him to our housewarming. I think it was the first time we'd ever met him. And we're not very good at partying. And so by 11 p.m. or midnight or something, everyone was going home. But Aaron was still there. And Aaron stayed until like 2 home. But Aaron was still there. And Aaron stayed until like 2 AM, I still remember, sitting in our front room telling us how much better it was to be building B2B software than consumer software for this reason. Whereas consumer software, it's so hard to predict what people want. They don't even know themselves what they want. It's such an amorphous space. Whereas when you're selling software to businesses, businesses are mostly rational, are mostly, I don't know what the opposite of inscrutable is. Scrutable, I guess. And you can sort of work backwards in a way that is just much more comprehensible. And so I still have this kind of, it's like the angel and demon on your shoulder. I still have sort of, you know, 2 a.m. Aaron Levy sitting on my shoulder sort of extolling the virtues of building software for entities that know what they want. You've made the right choice. Yeah, in some sense, there's a lot less variables. Or in consumer, there's a lot more variables to consider, and they're quite unknown. I want to take a step back. You talked a little bit about thinking ahead about what your team is or what your company structure is going to look like. How do you, maybe this is too big of a question, so maybe we can whittle it down a little bit, but how do you think about that? Like I'm sitting, if I'm starting a startup today, I'm close to maybe product market fit, but before that stage, am I thinking about this sort of thing? What should my team look like? What should my culture be? And stuff like that. I think that, well, OK, so pre-product market fit, the goal really is just to get to product market fit. And so I actually wouldn't bother thinking too much about all these distribution mechanics questions. Now, you can get to product market fit. And so I actually wouldn't bother thinking too much about all these distribution mechanics questions. Now, you can get to product market fit relatively quickly. And so that pre-product market fit stage might only last six months. You're not necessarily like Stripe, where you're in it for various reasons for multiple years. And so it may not last very long. However, until that point, I really think you should just be thinking about, OK, how do I get there? The main thing that I think companies screw up at the pre-product market stage is sort of speed of iteration. I think, okay, well, what determines the speed of fruitful iteration in that sort of, I mean, if you're kind of completely or if you're repeatedly rebuilding your product, but sort of not in response to user feedback, I mean, that's kind of far less likely to be kind of bringing you in sort of a in a productive direction But if you have some kind of meaningful albeit perhaps smalls of initial set of users and you're rapidly iterating in response to sort of their feedback and sort of observed behavior and so on then I think that's like a really good spot To be in and I think again at that juncture pre-product market fish It is kind of this you should be sort of doing everything you can to tighten that sort of feedback cycle. There's a fighter pilot who kind of revolutionized airborne combat in the U.S. in the second half of the 20th century, sort of Korean War onwards, called Boyd. And he had this concept of the OODA loop, which was sort of a similar notion of the most, you know, previously people thought you wanted just like the fastest aircraft or sort of the, you know, most sophisticated weaponry and so on, where he was all about sort of, no, you actually want aircraft and sort of pilots and training that are really oriented around sort of the fastest sort of responsiveness and iteration to the kind of particulars of the situation in a way that kind of subsequently went on to really inform sort of modern aircraft design. And so I think you want to be like one of these sort of these modern fighters where you're sort of really optimized to respond as quickly as possible to sort of rapidly evolving situations, again, in this kind of pre-profit market fit stage. And so then from a hiring standpoint, I think it should really be about, okay, well, what's going to get you there faster? And I mean, I think at an early stage, it's most likely, well, sort of just people who will help you kind of build a product. But of course, not too many, because I mean, at some point, like you might be able to do more, but you might actually be less responsive because you have a bigger team to manage or something, right? And so as an empirical matter, it seems that somewhere between 2 and 10, depending on exactly what you're building, is kind of the optimally responsive size. But I think it really is about that time from observed necessity or deficiency or characteristic of your user's behavior to executed fix or improvement. And whatever it is that kind of minimizes that. Is there, I mean, you say two to 10, which is helpful, but is there, are there observations or evidence in which you have hit the peak? Like you should not add an extra, like this extra person is going to be negative value add to the whole operation. Yeah, I mean, every person, well, startups in general involve all these kind of impossibly difficult judgment calls in this kind of high dimensional possibility space. And so it would be great if you could sort of collapse it down to kind of a fairly simple set of trade offs. I don't think you can. However, I think in principle, the calculation you're sort of trying to run is, okay, each successive person takes time to hire and so slows us down in that regard. Takes time to onboard, slows us down in that regard. Kind of takes time to just kind of meld with the sort of culture and learn the stack and all that stuff, that also takes cost and time. Then involves subsequent ongoing cost of just like coordination and alignment and sort of, you know, you sort of now have, you know, the organization is now distributed across more neurons. And so there's that kind of persistent tax. And that's not just necessarily a linear cost, but, you know, it can be sort of, you know, quadratic or something kind of given, kind of given the multi-way communication problem. So you have all these costs to an additional person. And so the question is, OK, but this person can also help us get more shit done, right? They can write more code or talk to more users or whatever. And so it's kind of, is that fixed benefit to that additional person worth all these other costs? Again, with, I think, the ultimate arbiter being, will we be more responsive to what we're learning about our users given the presence of this additional person? And I think whether or not you will be depends on the complexity of the product and the complexity of the market and all that stuff. But I think that's in principle the calculation you want to be running. I've heard you said, speaking of hiring people, I've heard you said the key qualities that you look for in a future Stripe employee is intellectually honest, cares a great deal, and just loves getting things done, which are great attributes because some people just don't fit in those categories. So it's good to have the separation there. How do you, when you meet someone, how do you figure out this is the right person? It's very hard. And I wish I had a more sort of definitive rubric and kind of particular set of questions. Although if I had a particular set of questions, maybe they'd stop working because people would learn how to game them or something. And so I mean, well, it's hard to fake just being smart, right? And so that one's kind of not as hard to discern. And it's oddly hard to fake being intellectually honest. And sort of the characteristics of being able to see multiple sides of a debate or an argument. Like there are so many kind of complicated questions where sort of the only thing that I'm really skeptical of is kind of certainty in either direction just because the questions are intrinsically sort of involve very contingent trade-offs. It's also, it's not impossible, but it's hard-ish to fake just being nice. Like, something we hear a lot about at Stripe is just sort of people who are pleasant and warm and sort of just make others happier as a result of their presence. And, you know, if, well, perhaps if you can fake that perfectly forever, that's fine, right? Maybe then. But yeah, they're all sort of actually, there's no clear rubric for them. And I'm not sure that a clear rubric could even work. Yeah. So you talk about get people who help move the organization faster if at all possible. And I think there are two issues usually that start slowing down the organization as you start scaling. Just because each person adds just more complexity to the organization. But also I think one is asymmetric information. Just people that are never on the same page. And I think you've talked a lot about this, I think, and so everyone can Google around for lectures you've given on this on, you've done email transparency, obviously having metrics transparent to the whole organization. But the second problem to that is if you fix that, there's also this asymmetric interpretation problem, which is everyone's, there's this like black box function that how people interpretate, even if all the inputs are the same, the outputs are all different. And it's, especially at your scale now, it's nearly impossible to figure out everybody's function. So when you're thinking about creating your organization and building it out, like how do you reduce do you reduce that noise and try to get everyone on the same page? Well, the first thing is I wish we had actually between, say, five and 50 people. I think we were much too consensus-oriented. We, of course, weren't completely consensus oriented. I mean, we couldn't have gotten anything done if we were, but I think we kind of biased too much in that direction. And again, it's just not that efficient, right? And it's sort of, it's necessarily not the case. And so kind of like you can sort of perhaps maintain some kind of fiction for, you know, of like you can sort of perhaps maintain some kind of fiction for more or less time, but sort of ultimately speaking, there is no way of sort of sustaining that. And I think that's a relatively common mistake, right? Because you almost invariably come from some kind of end musketeers for some small n sort of kind of orientation where sort of there's no particular need for formal decision-making mechanisms or subsequent communication of said decisions or whatever. But then you hit 15 people and now there is. And I think companies don't adjust quickly enough to that new necessity, again, very much as included. And so I actually think we did well on the kind of ambient availability of context and information and so on, but actually kind of in some sense poorly at deliberate explicit communication of decisions, decisions being actual kind of tactical decisions or even bigger decisions like what are our priorities for the next six months or things of that nature. know bigger decisions like you know what are our priorities the next six months or things of that nature um and so um the higher order piece of advice and you know perhaps I'm over extrapolating from our personal experience but the higher order advice just kind of reflecting back would be to kind of it's kind of like the pre and post Bob product market fit thing it's actually about the size of the organization where kind of when you hit a certain size again maybe I'm just gonna say ten people for the sake of simplicity, maybe it's a bit before, maybe it's a bit after, I think you need to adjust more deliberately to this explicit communication model of being quite firmly non-consensus-based. Nobody likes the idea of being hierarchical. That sounds pejorative, but in some sense hierarchical. Sort of the top-down, it does move things faster. Maybe some people don't like that, but it does move faster. That's right. That's right. And there is this kind of delicate balancing act you want to sort of orchestrate, where on the one hand, you want to really prioritize speed and agility which involves being kind of somewhat hierarchical because those are sort of efficient sort of symmetry breaking mechanisms and ways to sort of to have shots get called but on the other hand you really do want people to have this kind of strong ownership mentality and real sense that sort of they can cause things to change or identify problems or sort of inject new ideas even in unrelated areas. And so it's this sort of delicate act where, I mean, you definitely can be excessively hierarchical. enough autonomy and agency, but also not have things devolve into this kind of, I don't know, sort of uniform morass of sort of, I don't know, all these kind of Brownian motion. And I think that's hard and requires all these kind of, you know, ongoing sort of tweaks and nudges. And I mean, it's dependent on the personalities involved and all the rest. And again, you know, I really wish there was kind of the the sort of road simple well just do x y and z and you'll be good but sort of if such x y's and z's exist you know no one's told me yet if only there was a formula for everything so riding on the same theme you know as Stripe grows you strike me as a company that does the opposite of most companies, which as they get bigger, they just slow down and they get less innovative. But for you guys, and it's hard to even keep up, like you're just pumping out new products and which seem to be successful to me, like Stripe Atlas, Stripe Press, Stripe Terminal, so and so forth. So in the early days, you know, when there's just nine or 10 of you if someone had a new idea it's probably really easy to get to you and you know then you guys would decide um how has that changed over time to make sure that someone who's like six level six degrees away from you that a good idea actually gets to you um and then how is that decision made to actually execute upon it um well i'm it's very nice to you say that it feels like we're getting faster as we get bigger because we're constantly sort of self-flagellating over how fricking slow we are and paranoid about sort of degenerating into some kind of immobile stupor. And so to whatever extent we do get things done or appear fast, I think it's largely because we're very paranoid in this dimension. And I think the default outcome of companies, of course, as they scale, is to become sort of more ossified and rigid and sort of closed to new ideas and directions and things that contradict their prevailing orthodoxies and all of that. As to how we kind of avoid that, I mean, well, there's lots of kind of obvious things, like partly it's sort of, I mean, having leaders who care about the rate of progress and just love seeing things happen quickly and lots of things of that nature. I think maybe sort of deeper rooted this, we try to be a kind of yes and culture in that, I mean, I personally love love ideas and potential things we could do. And most of them are, no matter how good the idea is, we should not pursue most ideas. Even if independently, it could be a super successful company or something, but there is a fairly finite number of things we can do. And so you kind of, on the one hand, need to recognize that intellectually and just not pursue most things, while on the other hand, enjoying the exercise of contemplating, well, what would it look like if we did it, right? And so one thing we do every year, for example, is we have this kind of crazy ideas process, we call it, where we literally send a document to the whole company, a hackpad document that's open to everyone. And people can sort of add ideas to it that they think are probably a bad idea but if they worked might be a great idea and it's very important that they have to be probably a bad idea because if they're like probably a good idea then I mean it's not that risky and I mean kind of by definition we should probably do it and so you know whatever maybe we should just do it and so people like really self-censor a lot in most organizations because they don't want to look stupid and they don't want to be associated with just having all these wacky, bad ideas and so on. And so we try to be fairly firm that if you add ideas to this, it has to be probably a bad idea. And actually a lot of cool things we've subsequently gone on and done first came from that process. Stripe Atlas, you know, being one of them. And also we sort of helped Stellar get off the ground this sort of cryptocurrency back a few years ago. And sort of that also sort of came from this process. And so that's one of the mechanisms by which we try to have a kind of yes and culture. And I really think there aren't that many, just as an empirical matter, there aren't that many large organizations that I think sort of really do this successfully. that the most successful larger organizations somehow do succeed in this iterative, repeated process of augmentation, Amazon and Google being the most prominent examples, where obviously even Google launched, there was no Gmail or YouTube or Android or Google Maps or whatever, and Amazon is an even more conspicuous example in some sense of this kind of repeated attach of successful ancillary businesses. And so I think kind of, yeah, there's a very natural temptation as you grow to I think become increasingly close to this. I think it's very important to avoid. Cool. So I have a couple more questions and then maybe we'll have time to take questions from the audience. One is, looking back, is there something, did you have a strong opinion of how startups should be run as a CEO that have just completely reversed because you're now the CEO? That's a good question. Another way to potentially put it is, like, what are things that you did where you're like, I know for sure this should have been done and it just turned out to be a mistake? Well, I already mentioned the consensus orientation. One that we're going through right now, which is a quite significant divergence, is we were sort of fairly centralized up until relatively recently. I mean, we had some remote employees from a pretty early stage, but by and large, Stripe was kind of concentrated in San Francisco. Last week, we announced our fourth global hub. And basically, what we decided to do is we're going to have major product and engineering efforts and teams and functions and all the rest in San Francisco, also in Seattle, also in Dublin, and also in Singapore. And these non-San Francisco locations are not going to be operations offices or satellite offices or places where we do some localization and local market adaptation. We want to have completely de novo new products that become super successful started out of these offices. And that's not the standard, obviously, Silicon Valley pattern, where Apple and Amazon and Facebook and Google and all these companies tend to be highly concentrated in these very monolithic corporate headquarters. And our thesis is that it's kind of several folds, you know, partly that kind of the availability of talent is becoming sort of far more geographically dispersed. Partly that sort of, you know, the Bay Area is becoming an increasingly untenably expensive location to locate. And partly that sort of, we really want Stripe to be global infrastructure that works kind of just as well in sort of Asian markets or in Latin American markets or whatever, as it does for businesses in the US. And the era of the internet being a predominantly North American or North American, Western European or whatever, the days of being such a phenomenon are over. And so I think that's a fairly substantial break with descriptive best practice of the past. I mean, we obviously think it'll work, and we wouldn't do it if we didn't. But it is also kind of, on some level, risky, like we don't have good, you know, prior examples to point to. And, you know, I mean, there's some great companies in Singapore, like Grab and Carousel, but there aren't really any examples yet of sort of American companies establishing kind of major private engineering hubs there. We're pretty optimistic it can be done. But if it works, we'll be the first or one of the first. Cool. Last question. So in 100 years from now, what is Stripe going to be? What do you imagine it to be? Well, we're only seven years old, so that's a difficult question to answer. Well, we're only seven years old, so that's a difficult question to answer. We're trying to build this economic infrastructure for the internet and this sort of platform for globalization and technological progress in the sense that it ought to be just as easy to start a company in sort of Nigeria as it is in New York. And it should be just as easy for somebody in Brazil to buy something from any of these companies as it is for, again, somebody in the Western world. And it just seems so crazy to me that that hasn't happened yet. It feels that Stripe should have happened 10 or 20 years before it did. I don't so much think that we're pursuing this unprecedented path-breaking, inconceivable idea so much as kind of correcting a deficiency in sort of a rip in the fabric of internet infrastructure. And so anyway, I think we still have at least five years to go in sort of correcting this inadequacy. So what happens after that, I'm not sure. In some sense, in the future, all transactions should be digital, and they could very well just be all going through Stripe. I mean, right now, in the US, someone's telling me like 80% of all Americans have done some transaction through Stripe, right? Yeah, that's right. So in the last 12 months, more than 80% of American adults have bought something from a Stripe business, at least one thing from a Stripe business, which is cool. And it's not just the case in the US. Like in Singapore, where I was last week, that figure is about 70%. But I guess we don't think about it. Well, I think about it more in terms of the things that are possible or get started. As in it's kind of, we think a lot about the rate of sort of new firm creation, what companies are getting started, how successful are those companies, which markets can they serve and so on. And, you know, every now and again we look back and we look at sort of those kinds of market coverage stats. But I guess that's not really what sort of motivates us. It's more that sort of there are these businesses that should exist and or should be able to kind of offer their products and services, you know, in these places where they currently can't. And that's, I think, I mean, that's the kind of thinking that we use to kind of inform the product and that sort of is kind of the core locomotion day-to-day. And then maybe the outcome of that is that all these people get to benefit from it. All right. Thank you so much, Patrick. This is great. Thank you. you