 Welcome. We have Eric here today. So Eric is a YC partner. He was previously the CEO and founder of Pebble, which went through the YC batch in all the way winter of 2011. A long, long time ago. You're an old man, Eric. So now we have the other building on the other side, but my YC batch was one of the last ones in this small building. Yeah. It was called alerta when you applied yep and our product was called impulse impulse yes we had a whole bunch of complicated names how did you i mean pebble is a great name how did you how did we get to a much better name yeah you go through a lot of ways i think the original names were found using a thesaurus or some sort of like, we just like scanned through a book for words that were related to like alerting, alerta, that was how we got to it. Yeah. Originally. Pebble was a much better name. I actually thought of it while lying on a beach and it was like two years before we actually made Pebble. And I just like wrote it down in Evernote on a list of good names. Nice. You have no idea when you're going to use another name, so if you think of any good ones, just write them down. So today I want to spend a little time talking about hardware startups, given you ran one, especially one that was one of the larger hardware startups in the past few years, but then spend a bulk of the time talking about hard tech because you spend a lot of time working with hard tech or deep tech, whatever you want to call it. Here at YC. Here at YC. And there are a lot of unknowns still out there, and we obviously want to fund more of those kind of startups. So starting with Pebble, so can you take us through the quick story of when you came to YC, how big were you? What did you do in YC? That's actually a common question of what startups actually do with YC in three months. So we applied to YC. We started the company in 2008. Started working on it while I was still a student at Waterloo. Kept working on it through 2010. We hadn't actually shipped or we were just starting to ship the product to first customers. This is before Pebble. Back in mid-2010, and I'd been on Hacker News forever, but I never really understood what Y Combinator was. I just thought it was like the domain name for Hacker News. And one day someone said, hey, you should check out YC. And so just on a whim, we applied. The video we recorded, if I look back at it, was during Oktoberfest in Kitchener-Waterloo, where I was living, and we were wearing Oktoberfest hats in the video. We applied for some crazy reason. Paul Graham, Jessica, and the gang decided to accept us, even though I think we were the third hardware company that had gone through. We started YC in 2011, in the winter. And the stage of the company was we had shipped maybe, I think, 200 or 300 of our very first watch, the watch that was called Impulse, that worked with BlackBerry smartphones. And we had some early customers. We were getting money, but we were earning some money. We hadn't raised much. I think I borrowed $15,000 from my parents, got some government grants in Canada, which was quite easy, but we hadn't raised any money from investors. YC was the first investor. So $15,000 let you manufacture these at the first 100 units? We ended up making them one by one, actually. So the first watches for this first watch, they were manufactured. We bought the circuit boards from China. We had the metal, the kind of metal casing of the watch made at a small metal shop. A guy had a CNC, a five axis CNC printer or a mill. And he actually just like, he read about us in the school newspaper or something like that and offered to like be our first shop for making the actual metal cases. So metal case would get made just a couple blocks away. We'd get the circuit boards shipped in from China. We also made the plastic watch straps in China. And then we would do the final assembly one by one in the garage. And I think that early process of making everything one by one was perfect for us because we screwed up everything you could possibly screw up. In the first 10 watches, we had a lot of problems. But we had a problem with RF. We couldn't get the signal out of the watch because it's like a Faraday cage sitting on your wrist. And so we said, well, maybe let's change the metal back for a plastic back. And so we had a whole bunch of laser-cut acrylic, you know, sheet plastic cut to the same size as the back of the watch. And we kind of jammed it in. And then we shipped the first 10 of them out by FedEx. And on something like 7 out of the 10, the electronics just exploded out the back of the plastic. And, like, people would show us pictures of, like, this watch that they just bought with, like, the guts just everywhere. And so we adjusted the thing. watch that they just bought with like the guts just everywhere and so we adjusted the thing we started putting like a like a piece of foam rubber inside the watch when we shipped it the backs wouldn't explode um but it was a really good thing that we were making them one by one or else we could have potentially made like hundreds with that same problem right at the beginning and had lost you know basically everything so we I think we iterated really quickly, and when we screwed up, it was only a maximum of, like, a pretty small screw-up. Got it. And how many units were you that you sold before you actually went through the entire manufacturing process? We continued to manufacture one by one by hand up until around 700 800 units um so even when so one of the things that people ask about yc is like well what happens if i have to like have to move my business to to mountain view you know it's going to interrupt my production process or whatever so what we did was i hired um a couple high school students and I asked one of my friends who I went to school with who was doing his master's back at Waterloo to just kind of manage and run the production thing, and they would ship them down here, and we would finish it in our house that we were all living at. And so I think the trick there was we didn't let the fact that we had to be here in Mountain View interrupt our actual sales process. And so after YC, Pebble obviously took off and lots of great things happened. What were the, I mean, you went through lots of ups and downs. So year after YC, it wasn't like immediately after. It took a long time. Yeah. So what was the hardest part maybe out of your whole journey with Pebble? Looking back, I think it's different because seeing it forward, it actually took us a long time to get from the initial idea to any sort of real product market fit. It was five years. So we started the company in 2008, built the initial prototype late 2008, 2009. Didn't start shipping until 2010, and that was for our first watch. And then we had a lot of lessons learned from that first production run, and then we redesigned and created what would become Pebble in 2012. So that's five years. And the hardest thing, like I would obviously we work with a lot of founders and the hardest question that i think i ever get as someone who helps startups is like how do i know that what i'm working on is the right thing to work on how do i know that this little pivot that i could do is not the right one like maybe i should try that and there's no answer to this it's it is the hardest problem and so i you know thinking back i think i was probably very misguided in that i just had faith and i just never gave up even though now thinking back it's insane doing something for five years like what's the definition of insanity doing the same thing and hoping for different results like i was basically doing that for five years like We were just, I guess we didn't know what we didn't know. We were very naive and we had a very small amount of money and we didn't know that you're not supposed to make consumer hardware products on a budget of $40,000. Most electronics that you use are made with budgets of millions of dollars. But now that you've done it, or you did do it, do you think it's possible now? No, it's totally possible. No, no, what I'm saying is I think the hardest part that we had to go through was not letting other people get us down and kind of maintaining that naivete. One of the things that I really love about that phase of the startup was people couldn't really convince us that what we were doing was wrong because no one had really done it before and if people said like oh you know you should you know you should look at raising more money or something like that we didn't really have the resources to do that like we were very we were a very constrained naive team and so we had to figure it out and i think some of the ways that I could have screwed it up was â€“ actually, the ways that I did screw it up was right after YC, we raised a bit of money, about $250,000, including this kind of large check that we got from one investor. large check that we got from one investor. And I took all that money and invested in inventory because I thought at the time, the biggest constraint on us growing was we didn't have a reliable, like we didn't have a large amount of inventory. We were making them by hand. So we only had like 10 or 50 a week. And I was under the mistaken impression that if we could start selling it in real time, than saying we'll do a preorder and sell it to you in a couple of weeks, that our sales would have taken off more because then we tried this. We manufacture, instead of making them by hand in our garage, we went to a small contract manufacturer in San Jose and manufactured 3,000 at once and spent all of our money on that. And you can all see that the story is going. It takes longer than you expect to bring up a new manufacturer. So it took six months or eight months instead of three months. It cost more than we expected, so the bomb cost rose. And then by the time we actually manufactured them, that eight months rolled around, our email list of potential customers had kind of dried up everyone had switched from blackberry to using iphones and then we were stuck with a whole bunch of inventory so that yeah that was a really that was a really rough yeah difficult part yeah it's often not always but in many cases um people get really creative when they don't have much money and they have to get really scrappy. And then when they raise a ton of money, they forget how to do that. And it happened to me again, like three years later. Like we raised a bunch of money and then started hiring. And this is a big problem that even mostly the successful companies run into. companies run into. And so I think the moral of the story for me, at least how I think about projects that I work on, is that frugality is vital to me. Not everyone has the same â€“ and not every industry is exactly the same. There's a few crazy industries right now which are kind of, by definition, the opposite of frugal. I'm thinking of the scooter share companies where it's a matter of like raising as much money as physically possible. But for the vast majority of people, like staying frugal is what actually like. Yeah. If you don't have network, like obvious network effects or first mover advantage, then usually you should go down the other path. So Pebble is known as one of the most, you did one of the most successful crowdfunding campaigns on Kickstarter. And so a lot of people view crowdfunding as a way in lieu of fundraising to do that route. So I think there are a lot of questions on when is the right time to do it, especially like at what point do I need a product that is real and it works? Do I need to align that with the crowdfunding campaign and so forth? So what's your advice on that? I have a, after having gone through a couple of these cycles, here's my advice. I think crowdfunding can be useful for two specific points, mainly useful for two specific points in a startup's life. You could use crowdfunding at the very early stage when you have an idea on the back of a napkin, maybe a render or two, to raise $25,000, $50,000 that can help you get to a working prototype. This is for people who are software engineers and are experimenting or want to work working prototype. This is for people who are software engineers and are experimenting or want to work with hardware. This is for hardware engineers who have zero money and they just want to prove that some people want their product. So I want to be very specific. This is an intention play. It's not trying to build a multi-million dollar campaign with super fancy uh cgi graphics and overproduced videos like i'm talking about people honestly saying i just need a little bit of money to get this idea off the ground and i think there's an opportunity to use crowdfunding right there um it can be as simple as just emailing a bunch of your friends and saying hey do you want to just do you want one of these? This is like the best test that you can have for early product market fit is do your friends and family actually want to pay you money for what you're making? Or do early customers actually want to prepay for what you're making? It's not perfect because they may want to try it first or something like that. But if you are making something that people really want, they're basically throwing their money at you. So that's an opportunity for kind of this early crowdfunding. I really encourage people to not try to do the marketing blowout campaign at the start for two reasons. One is just looking back. Most of those campaigns, even if they do succeed at raising money, usually fail to produce and actually ship their product. And I think the reason why is going through the cycle of having to make something and ship it to customers is really educational. And you also learn what people like about your product or what they don't like as quickly as like you reduce the amount of time between you having the idea and you getting validation of do people actually want this idea. So that the first i think opportunity for crowdfunding i think there's actually another opportunity using it more as like a marketing and sales channel which i think more of what we did where we had already made most people don't know this but when we launched our kickstarter campaign we had already made and sold around 1500 of our first watch and so we had gone through like all the pain and the cycle of building that and we had already made and sold around 1,500 of our first watch. And so we had gone through all the pain and the cycle of building that, and we had a really good idea of what Pebble should look like because we had feedback from about 1,500 individuals who were super eager early adopters, very open with their feedback, and we tuned and tweaked the product. So I think there's kind of like two separate crowdfunding opportunities in like a consumer products lifecycle. I think too often people blend them together or they don't know which path they're on, and so they kind of screw it up. There's actually a couple other platforms for this early crowdfunding. There's Kickstarter and Indiegogo and that kind of thing, but there's also Tindy, there's CrowdSupply, there's like Hackaday forums. There's a lot of really niche areas where you could go to a Discord server and say, who wants to buy? You don't have to use the big Kickstarter platforms for that early phase. Do you suggest having a date in which I can promise you i can actually deliver this because if i'm uh using kickstarter with the first with you know the first route um maybe i don't know that i can deliver within six months is there's like a certain time period in which i know i can deliver then i do that and if you're not like i would encourage like if you're not like, I would encourage, like, if you're not confident in your ability to ship it, um, then don't use one of these like crowdfunding campaign platforms where it's very centric, like shipping centric. Um, there's other options. And again, like I really do encourage going through that first cycle to find out things like how long does it take me to make things? Um, do I have all the skills on my team or do i actually have to find you know people potentially in the community to help contribute software or other um other skills to the team um again like too many people i see like they skip that step and they try to go directly to like the high power of marketing campaign and it's just it's just such a sad time most of the time. Yeah. And sometimes there's like a group. We try to go after the group before the early adopters. Because on Kickstarter, those are kind of early adopters, but there's a group before that. Exactly. And I think for your given industry and for your given product category, you should be able to find it. Like sometimes it's as simple as going on like a subreddit. Like we've had some great companies come through YC and they do their initial sales just by earning credibility in a Facebook group or they earn credibility in a Reddit group or Discord. There's a ton of customers there. So when you talked about Pebble earlier, you talked about hiring people and outsourcing things. What's the right call in terms of outsourcing the various components? So this is a really hard question for hard tech companies because more often than not, the skill sets that you'll need to build your products are actually quite varied. You may need a mechanical engineer, an electrical engineer, a computer engineer, some production people, ops people. And you don't necessarily need 100% of that person all the time. You need like 15% or 20% for three weeks. And then you're back to not needing an electrical engineer. So the best way to solve this is to have really flexible technical people on your team where you guys can just kind of incorporate everything and just do it yourself because those teams move so much faster than teams that require an external kind of process. Some of the most painful moments of my early career were not having full-time co-founders and having to work with contractors or consultants who honestly, like you can't pay someone enough to care. I mean, firstly, because you probably don't have that much money, but also because people who are working on contract, they're just set up to not have the same motivations and the same alignments that someone who's working 24-7 trying to get their fledgling startup off the ground has. You run into time commitments. I just got an email the other day from a founder who's like, yeah, our intern went back to school. And he was developing a large portion of our company. And so, yeah. So, like, I actually opt for in the early days and pretty much all days, trust and dependability and kind of smartness over very specific, deep domain-specific knowledge in who I'm looking to hire. So last question on hardware specifically. There's this common saying or adage or whatever you want to call it. It's like hardware, you can't just build hardware. You have to have a software component so that it scales. You can have like a subscription service on top of it instead of just the one-off type purchase. How much do you believe in that or what do you think about people who say that all the time? So I've been, I've been working on, I've been doing a bit of research into this category. This really got me interested right after Pebble because that was some feedback that we often got. Could you launch a subscription service? Could you have some sort of payment subscription? And payment subscription. And you've heard of product market fit, right? You know, the idea that customers really, you know, in a particular market are going after your product. I actually think there's something called like business model company fit, where you could have the best product in the world. You could actually have product market fit. But if you have the wrong business model, you're not going to be able to fund and grow your company over the long term. So it's kind of like an advanced thing. You don't need to worry about this if you don't have product market fit because if you don't have product market fit, you don't have a company. But we ran into a problem pretty soon after we hit product market fit, of misunderstanding what was the business model that was going to drive this company. And I think there's actually like seven or eight or nine different business models that are useful, that are kind of like lanes that hardware companies or hard tech companies can use. I've been working on kind of just kind of researching and putting companies into different categories. And you have the subscription companies like the Nests or the, or the drop cams of the world that are selling, you know, ring healthy three to $10 subscriptions per month. But then you see other companies that try to do something similar and it just does not work. And I think that's because, so in our case, we, we, we didn't struggle. I think with subscriptions, We experimented with it. It wasn't really going to work for us. But the way that we screwed it up was we didn't understand that we were in a hits-driven market. Hits-driven being you come up with a consumer product. Hopefully it's a hit. It hits that product market fit. And people start pulling it out of your hands. Um, similar to a game company, we didn't realize that we had to be super frugal, super, uh, um, kind of low budget as we developed the new products and kind of tried to engineer another hit. Our first product was certainly a hit. I don't think we ever reached escape velocity to a hit with any of our later products. And I think if we had built a more frugal organization, if we were able to build products cheaper and then launch them and test to see if they were successful, and if they were successful, scale it up, et cetera, I think we might have had a slightly different outcome. I mean, it kind of goes back to like, there are these different models for hardware companies and you need to make sure that you're on the right one. You have to question yourself. You're like, should we really be on a subscription model? Is this really what customers are going to want? Will they want to spend $5, $10 a month? And you can't force it. And if you force it, like I think we tried to do, you might add extra problems like on top of just building great products for your customers. So pivoting a little bit to hard tech. So we've funded lots of cool hard tech companies lately, quantum computing, self-driving cars, 3D printing entire homes, so on and so forth. Agriculture, technology. Yeah. Nuclear fission, nuclear fusion. Aerospace, space. Space, yes. Rockets. Lots of satellites and rockets. So maybe we can calibrate the conversation a little bit. How do you define hard tech, deep tech? What does that really involve? For me, I think what I'm excited about in harder technology spaces is the â€“ in the software world, the iteration cycles are quite short. You can push code to your repo and have it go live within seconds. And so you can rapidly iterate on your product and get feedback from your customers. I think hard tech companies can't. They don't have the same rapid iteration cycle. They either have hardware in the mix, which kind of is not at that same speed yet, though it is dramatically decreasing in the amount of time that each iteration cycle takes. Or you might have some sort of fundamental technology that you're working on that needs to be developed in order to unlock a new business model or new use case. Or you might be regulatory, new use case. Or you might be regulatory, regulatorily constrained, either in the medical device space, drone space, transportation space, self-driving car space. These are all like, there's external processes that you can't control that affect your iteration cycle time. So say I have this crazy idea, something to do with rockets or something insane, to most people, something to do with rockets or something insane to most people. Normal to me, of course. Except for rocket scientists. Yeah. And I have no money. What do I even start? What do I do? It doesn't cost that much money to get started these days. You can do something like startup school where they give you free money to invest in. Like if you're working on AR and machine learning, you can use that to get compute credits. Maybe a better question is what is an MVP? For most of these, yeah, harder tech. So for medical devices, I think the MVP is successfully peer-reviewed science that supports what you're working on, that there's some sort of opportunity here. And a kind of understanding of what your path to clearance is. Those are, in my opinion, I think the best companies because they're the ones who have shown that they understand which business model they're in and they know what's going to be taken of them to get to sales. But they don't necessarily have to be too far along that path. I think at that stage, investors start to get excited when they see the mating of science and a use case. We've had a bunch of companies that are working on rockets and satellites and propulsion and that kind of thing. For those cases, it's usually some sort of subset scale representation of what you're working on and customers. So in all cases, even if you're working on regulatory constrained products, having customers either contributing money to you through early contracts or further along on the kind of pilot track, the better. I think oftentimes engineers, we love to build things. We don't as much love to sell them. And so what I look for in early stage companies is, are the founders technically competent? And do they understand that they're going to have to kind of perverse themselves to become salespeople or not what do you find by demo day when they're in front of lots of investors what is it that you encourage them to accomplish by then is it sounds like there's two paths there's business if you can do sales there's no regulatory issues to doing sales you should have have some paid contracts, LOIs maybe. And then also technical validation, like proof that you can actually build this. Yeah, and I think too often people convolve these and they say, I don't want to do sales until I have something that I can show to them. That's just not true. Most customers, if you explain that they have a problem and you have a way to solve it, they'll get excited. And if they're not excited, it's probably a sign that they don't really have a problem that they want to solve. two months working on improving the prototype and getting it to the point where we're proud of it. And then we'll do sales in the last month. And we kind of flip that around. Do the sales. Hit the pavement. Talk to customers. And you'll actually build a better first product for them than if you just built it first and showed it. It also gives you confidence that you're going down the right track. And it's hard. We had a company in the last batch that had been working for two years on building a prototype. They were commercializing some technology that they worked on in a university. And it had a hardware component. And I remember seeing, I think it was their second or third application to YC. And they had kind of similar videos of them doing the demo with their technology. And we liked their commitment. They had been coming back, and their technology was getting better. And they were just starting to talk to customers, and we said, let's give them a shot. And so we brought them in for an interview, accepted them in. And then basically the first week, we took them aside and just said you need to start selling you need to get people like excited and interested and it was almost like a 180 for them because they thought that we were going to say you should work on technology and get to the point where you have like working units widgets that you can sell and we said no like start going and talking to customers and they it took a little while for them to get up to speed. It's like exercising a new muscle, especially for engineers. And within the span of two months, they went through several roller coasters of having zero leads to having a whole bunch of leads to having them all collapse and no one signing. And then probably like six or seven weeks into YC, they sent us a note and they were like, we got our first contract. And then they got their second contract. And then by demo day, they had already like lying on four or five million dollars in sales. And that all happened in the span of three months because they kind of stopped working necessarily on just building their technology. They were still working. Like they had a three- or four-person team, so they were able to split it up. But the focus, the number one goal became how do we get sales? So say, I mean, you do a lot of trips where you go to schools specifically. You talk to scientists and engineers, many in PhD programs. I guess what is your advice to them to make the jump? What should they consider? A lot of them are thinking about commercializing it, but maybe they think, I don't know what they think actually, but what is your, I guess, one-two punch on that? having started my company in a kind of university town versus somewhere here like Silicon Valley, I felt very kind of protected. There were a lot of government grants. I was able to raise non-dilutive funding. And plus side is we were able to use that funding to work on the project. But the downside was there was no pressure to have some sort of product that customers would pay money for. It wasn't really in the DNA of the startup kind of ecosystem that I was in. Most people were just entranced with working on their startup and not necessarily getting to that next stage of building kind of a profitable longer-term corp. And I think that that sometimes affects people who are in universities even more because the default is raising money through grants and working on longer-term projects, whereas the special case is like spinning out a company and actually like trying to get customers to buy it. And I think what I would encourage is like, try getting out of your comfort zone. Just as an experience, like or experiment, don't don't say that you have to like dive in headfirst with no parachute. But if you're working on some sort of technology that you think could have some sort of positive business impact, like get out of the lab, go to some conferences, talk to people, not not educational conferences, like corporate sales conferences. Start talking to customers and see what people think. And that's the start. And hopefully, if you're lucky and things are in the right spot, again, customers will be like, where has this been all my life? This is amazing. This is exactly what we've been dreaming of. I can't believe it finally came out of the lab and that should be the momentum that just like pulls you pulls you along but you have to get out to at least try it so say you get to the point where you feel confident you have um like some amount of interest in your product. But to actually build it, you need lots and lots and lots of money. What do you need to show to investors? So the best companies, in my opinion, are the ones that don't require a ton of money to work on, or at least to get to some sort of MVP stage. Kind of like with all advice that YC gives, it's usually applicable to 90% of the companies, and there's always 5% on either side that are in a special case. But even some of the best hard tech companies I've seen, they don't have like a binary outcome where they need someone to insert $100 million and that's the only thing that can develop a product. I don't know anything about these companies other than press reports, but take Magic Leap versus Oculus. Magic Leap raised lots of money and spent 11 years working on a product versus Oculus, which raised $2 million on Kickstarter, shipped an early development kit that was not amazing, but they iterated and they got through. And now the Oculus, the new one that's like 400 bucks, doesn't a computer like it's it's exactly yeah the quest like that's exactly what people are dreaming of now and they're gonna have it within six months and they had to go through like six seven years of like painful iteration um but they did it and yeah um so last question then we'll take audience questions uh what's an idea just so curious what's an idea that sounded so crazy to you um when you heard about it but then when you met the founder and they stepped through everything you're like oh that's not so crazy this is totally possible uh relativity space uh so that was a company that went through YC for three years ago, not very long. They wanted to build 3D printed rockets. Their thesis was, it's not actually rocket assembly that costs a lot of money, it's the testing phase of integration, where if you have hundreds of different systems that have to work perfectly with each other, when you assemble and build the final rocket, you have to test everything. Slightly different path than like SpaceX, which is going for the reusability thing. So their thesis was, if we can 3D print the entire rocket from the tip of the exhaust to the motor to everything in like one piece, the integration time is zero because you just print it. So they're working on this. And it was just an idea. I think they did a hot fire during YC. I think they were working on it. I don't know exactly how long they'd been working on it for. But yeah, that's a pretty crazy idea. And to come through YC, especially to pitch to investors that probably were not all space investors, must have taken some guts. But they did it. They showed off their first 3D-printed rocket. They raised early funding off of that. They started work on their larger products and raised a whole bunch more money. I think they just raised their PRC last year. They also worked previously at SpaceX or Blue Origin, but they didn't have many years of experience. So it was kind of actually crazy in the sense also they were extremely young and for this kind of thing to think of this. Yeah, and people believed in their vision. They demonstrated enough, I think, of what they were working on um and i think it was actually interesting so i think they i don't want to say too much in case i'm wrong but i think they were working on the printer first and they were looking for an application for this massive metal 3d printer that they built and they they found space as the i mean it was their background and their passion so i think that's the one that they took it in, that direction that they took it in. I see this a lot with people who are working on really cool kind of fundamental technology. I think PG actually had a pretty good tweet about this a couple of weeks ago. He said, like, if you're in a situation where you're building something that's like mind-blowingly cool and revolutionary, but you're finding that customers don't want to buy it, pivot your company so you're actually doing what your customers would have done and just use your pioneering technology to do what they do faster, better, or cheaper and sell to their customers. And that's kind of, I think, what Relativity did is they were building this new 3D printer and they realized that we could just build rockets with this technology and we will be better than everyone else who's building rockets in that space cool so questions you first speaking of that uh we've actually sold cups of coffee for 40 bucks a piece now but uh we're making equipment for coffee shops to eliminate bitterness based on a pathfinding technology and how do you find those first customers? You did 1,500 puzzles before you went public. How did you get one through 50? The question was, how do you get your first customers? How do you get one through 50? I talked about this a little bit earlier. Some of the best ways is to infiltrate the community of people who you think will want your product. There are an unlimited set of places on the internet where people talk about products and they talk about services. They can range from, you know where the WhatsApp guy posted his posted his app first in back in 2009 no he posted it on flyer talk forums which is like a whole bunch of like geeky business people who fly a lot and that's where he posted it and like think about that as your first as the first um kind of user group for whatsapp it's perfect right it's travelers who want to talk to people all around the world who are tired of paying for overpriced SMS bills. And it's 2009, so people are just starting to get smartphones and that kind of thing. Perfect. You couldn't have planned it better if you tried. And so the best companies are the ones that just kind of get out there. For us, we got a lot of press in the early days by talking to bloggers. So, I like formed personal relationships with all of the BlackBerry bloggers at the time. If anyone remembers CrackBerry. Yes. CrackBerry Kevin. Yeah. And so, I would like fly out to conferences on like Dirt Cheap, Red Eyes. And just like instead of buying tickets to the conference, I think we would just kind of like sneak around and get into the press. Like once at CES back in 2009, we just walked into Engadget's trailer. Like Engadget had this big trailer where all their reporters were working and we didn't know anyone. So we just walked in and then just started like pitching to people and ended up getting a picture of my wrist with a broken watch. It didn't even work at the time. But it's like so-and-so is working on a broken watch. It didn't even work at the time. But it's like, so-and-so is working on a smartwatch. And that drove a ton of traffic in the early days. It was just kind of people self-identifying as this was something that I wanted. It takes a lot of hustle, for sure. Okay, Raju? So, Eric, we are in the business of refuges, or run in the station lines.. So we are software engineers. We are both in software, but not in hardware. So that's the struggle. Should we outsource that? Or things have changed since 2008, right? Yeah, things are much easier. So the question is, we're a bunch of software engineers. We have an idea that includes software and hardware. How do we get started on the hardware? Well, the good news is that it's easier than ever. I wrote a blog post that was on TechCrunch a couple months ago about how software engineers can kind of get started on this. And the recipe is pretty simple. Find an off-the-shelf product that kind of does what you want to do. That's kind of like halfway there that you can actually just buy off Amazon or Alibaba or something. Because the amount of time and money and tears that you'll save just by buying a product that's halfway to what you want to build will do a couple things. One is it will get you within two to three days or however long shipping takes, an actual physical representation of what you think you want to build. And you will begin to use it, hopefully, to solve the problem that you want to solve. And you will learn, like, maybe I'm completely wrong. And this often happens. Like, the best intention product, when you actually build it, might not actually solve the problem that you want to solve. So getting halfway there for like 200 bucks or 300 bucks plus shipping is just so much better than weeks and months of prototyping just to get to the same kind of level. The next step after this is to take the 50% their product or 75% their product and hack it to do what you think is better. Either adding a little bit of technology onto it, adding your software stack, modifying it can be as simple as like repurpurposing the same technology and changing the setup. A good example of this would be the scooter companies. They took Xiaomi scooters, 9-bot scooters, and they just glued on cell modems. That's it. That's how scooter sharing started. It's like cell modems and GPS plus scooter. They didn't build the scooter themselves. They just bought it off Alibaba and they bought the modems from some company that was making modems. So that's kind of the prototype I think for the next generation of consumer hardware as well as enterprise hardware. We had a company two batches ago that builds cameras for neighborhood security, and they used a Raspberry Pi and a Pi Cam and a 3D printed case, and they sold those for like hundreds of thousands of dollars. The hardware cost, you know, a very small amount of money, and they're just solving a real problem for end customers, and people are paying them in exchange for that. So, yeah, it's even easier than ever. You can find people on Alibaba. You can meet factories over WeChat. Just don't try to build it all yourself. Don't hire like an industrial design firm to build you some new design. Don't hire like an engineering firm that promises to do a custom design for you because that'll cost hundreds of thousands of dollars and it probably will be the wrong product versus spending 300 bucks buying something, meeting the factory that makes that current product and asking them to kind of make the changes that you want to make. Before product market fit, do you recommend founders to move closer to suppliers, so places like Shenzhen or Beijing? Depends. So the question is should you move closer to Shenzhen or factories when you are pre-product market fit? If you're pre-product market fit and you have a product that you're iterating on, figure out a way to reduce the iteration cycles so that you get more chances to dazzle customers and to find, you know, that product market fit. So you could solve that two ways. If you think that moving to the factories would be, will enable you to do faster iteration and you already have kind of sales channels set up, that's cool. If not, and you don't really have that many customers, then move closer to your customers so that the iteration can be done in software maybe, not hardware, and you're just spending every minute in front of your customers. We have a couple companies that did that in the last batch, and they were using drones to solve very specific business process problems, and they basically just moved to where those businesses are, took up a motel, a crappy motel room, and turned that motel room into a drone factory where they were making and modifying their drone. And in that case, it was probably the right call for them. Do we have to protect our products? Or how can we protect them? Protection, IP protection, trademark protection. Is that kind of what you're interested in? Yeah, patents, that kind of thing. So this question I think kind of touches on how do you build a moat for your company? How do you make sure that once you figure out a beautiful product, figure out who to sell it to, that some other dude doesn't come along and just steal your idea? So there's a couple ways that you can solve this. The best ways, in my opinion, are companies that have some sort of innate moat where it's either network effect, where the more people that use your product, the better it is for everyone, or some sort of data lock-in where you use the product, you generate data, the data happens to be within one ecosystem. Someone who builds a competing piece of hardware can't get that data easily. Those are the two best. What do you think about that? I think those are good. I also think patents previously used to be very hard to get. We have a company called Cognition IP. I would just use them and just pay them some little amount of money. They use software to help you file. So the problem with patents is that they're not, like if you're thinking about this problem specifically, how do we block other people from copying our idea? They're actually really difficult tools to use versus those other two things that I described that are actually, like, you control all the levers. If you can build a product that has built-in network effect or built-in data, you know, things, you control that. You don't have to rely on lawyers. You don't have to rely on the government. You don't have to rely on the courts to enforce your domain dominance. patents, that kind of thing, you're basically saying I'm putting this money down as an investment, but I'm going to have to invest a lot more money later in order to use, unlock that first investment. So it's very rare that startups build a successful moat using patents. This happens much more in biotech space. Yes, I agree with that. I think building really great products is really just the only way to really build the moat. Again, for like 5% of companies, there might be some sort of patent strategy, but for 95%, it's great products. I think if it's also easy to build, people just copy it, even if you get the patent, so it doesn't really matter. You need money to enforce the thing, you need money to enforce the patents you need time to enforce it and if your company's dead, it's hard to enforce patents. Cool, back there. If you're building a product just trying to solve a hard big tech problem like solving social media distraction with AI how do you convince people to get a lot of users when you're going after a very marginal market? Marginal markets are great. So the question was, what happens if I'm building a hard tech problem, trying to solve a longer term problem? That first problem that I'm solving, what if it looks too small? Honestly, the best investors will want to see a small market because a small market at the beginning means you can identify who's in that market very cheaply versus having to boil the ocean saying, well, there's like 2% of all people in the world who are interested versus like 80% of this one group. So it's cheaper and easier for you to find those customers. The second thing is that small group of people will tell you quicker whether you have a good product or not because they know that they have a problem and you're telling them, hey, buy this thing, solve your problem. They can use it and be like, oh yeah, that solves it. It's good. Problem solved. They'll give you feedback. Whereas if you're trying to, again, target a really large group with a vague product idea, it's going to be harder to know whether that person just wasn't interested that week, maybe didn't have enough money. There's more reasons than you had a bad product if it's a really vague and large market. Yeah. Just to add on to that, I think starting small is good, but also having a roadmap to how it builds into something big is good as well, for investors specifically. And for yourself as well, to keep motivated. What do you think about the term of hardware as a service? Because now I think there's a shift between direct sales to subscription model a lot, because our companies can rely only on sales. They only need to have recurring revenue. So in my company, by chance, we just like doing some electronic treatment for reducing sweating, and we are so happy that some people are lining up to come to our office and do the streaming for them. But is this really reliable, or do you think that the right sources still aren't picking up? So this question is related to, like, do I pick a recurring business model, subscription business model, hardware as a service, or do I just sell the product? So this kind of goes back to what I was talking about before, which is making sure that you have the right â€“ you're pretty sure that you're on the right business model track for your company. So there are a lot of these different tracks. They're not just hardware as a service, not just consumer. There's hybrid models. There's insurance models. There's advertising-driven models. There's a ton of different ways that you could look at it, so it's not just one or the other. Here's what I would say. On the enterprise side, you need to figure out how much money you will save your customer or how much more money they will make and price your product accordingly. Your product price to them will be less than either how much they're saving or how much more they're making. And you should try to price it as high as possible to still let them have some savings, but you should, rightfully so, earn some of the profit from that innovation that you have. Sometimes that may be a hardware as a service model. It might be upfront, and it really depends on kind of your customer at that point. So it's really hard for anyone to try to give advice on that front, and it's much more around anyone to try to give advice on that front, and it's much more around like talking to customers, experimenting. You could do price experiments. Most companies are so small that every time like a new person hears it, or sorry, every time they do PR, new people who've never heard about it will hear about it for the first time, and they won't know what the last price was. So you can afford to do that kind of experimentation, especially at the beginning of your company. So one of the hardest problems about this place is hiring and scaling a company. Did it help coming from Waterloo and having access to a whole program versus scaling the company? Yeah. How do you do hiring, especially when you're scaling? Hiring is a mode that the company's in, and it's a very distracting mode. So I think the mission of an early-stage startup is to get to product-market fit, and it's definitely not to like hire a team no one gets points for hiring a team or you get a very small number of points for hiring an amazing team you get a lot more points finding a product um that has product market fit so hiring in general is really like a touchy subject because there's no one size one size fits all there um some general advice that that i have is what i mentioned before which is hire for trust and hire for uh reliability over hiring for specific domain knowledge um this has really benefited me uh because right after we kind of hit on kickstarter we were only two people at the company, two full-time people and two interns. And so we had, like, nobody. And all of a sudden, we needed to hire people. And we could have spent, you know, three to six months hiring a 30-person team and, you know, all these different, you know, people that we would need, hire experts that had done it before. We could have spent time doing that. We would have delayed our initial production by probably three to six months, however long it would have taken to hire that team. So what I did instead was I just phoned up some of my best friends from university who had been tangentially involved in the project and said, you need to quit your job and just fly here. And I think all of them, we just hired seven people within three or four days like that. And that worked because we had that momentum and we had found product market fit. And so they were like, that's cool. I want to be part of this rocket ship. I want to take off. But we didn't have to do like three to six months worth of hiring. We did three to six days worth of hiring. And I knew them. I trusted them. They were instantly part of the team because it was just like we were working on another school project again. It seems like the best source pool is either people you met in college or from work. Past jobs you've had. Yeah. Like, too often people overlook, like, someone that they worked at a job with two, three years ago. One of the coolest like hacks that you can do is just look through manually, slowly look through your Facebook or LinkedIn and just look at every person's name and think, is this person cool and technical? And just go through that list and you'll probably find a co-founder. You'll probably find a first employee, like some long lost friend from high school that's actually like a super cool developer. You could hire her and just bring her onto the team. Like there's. The second step people miss then is actually asking that person and giving a real offer. There's always this, people do this ambiguous dance of like, oh, I don't want you to say no to me. And that's why I'm not going to really ask you. So there's a good book called The Hard Thing About Hard Things by Ben Horowitz, and he talks a lot about working with friends and the difficulties and benefits of working with friends. So I'd read that book if you do end up hiring or working with a bunch of your friends. Right back there. When you look at a problem and you're, on one hand, you're like, well, this might be solved with a little bit of power, but it also would be a problem if you could solve it with software. Is there any advice for the business that you can take? Like, oh, you definitely need hardware. Is there a, question was, for some projects, problems, they can be solved exclusively by software. How do you know when to involve hardware in it? When in doubt, take all the hardware out. It doesn't solve the problem. That's the best place to start. That's why I was kind of saying, like, how could you just buy something off the shelf and use it? Because you may need some hardware. You may need a camera. You may need a microphone. You may need a compute platform. Just buy a Raspberry Pi and plug USB devices into it. Like, don't, you don't need to build anything these days. Some people think, but it's not going to be the right form factor, or it's not going to do the exact right thing as what I think our customers need. Just try. Just build something, hack something together, and see if it at least almost solves the problem. Because like I was saying, more often than not, that initial test will prove that either you have a really good problem that really needs to be solved, or nobody really has that problem, and you don't need to now spend three months working on custom hardware. I think for consumer hardware startup, it is very difficult to explain to investors because the whole user experience makes a difference. So actually we are creating a holographic AI therapist for ADHD people but the process is very bad, it's made of wood, so it's very bad. So what is the best way to pass away to a investor making video? So the question was we have a really complex product an AI psychotherapist or therapist that can help people. How do we demo that or how do we convey that product to people? I would hazard a guess that it's kind of a similar question to the last one. It's like, are there ways that we can do this in software rather than hardware? So if I were working on a project like that, I might start by actually creating the assistant as an app first, or maybe like a 3D Unity character that approximates it, that gets similar close to what you want to do, or use an off-the-shelf device like a HoloLens or Magic Leap or something like that. Even though it costs way more than you think it's going to cost in the future, this is kind of the trick. Overspend in the early days. Spend more money than you have in order to get that first test done, if it's possible. If you don't have any money, then obviously you can't. But if you have a little bit of money, spend that $400 to get an Oculus so that you can simulate the experience in VR before you actually go and make the hardware. Thinking about building the company, you have a product market fit from your own revenues and profits and potentially giving loans from banks and things like that to scale? So, yeah. So, I think, I mean, I would actually go one step above that and understand why hardware companies need financing. Usually, it's for inventory. It's rare that a company will need to get funding for, I guess it's not rare. There's like funding for inventory and there's funding for R&D. Funding for R&D is like, you need that. You can either get it through prepayments from potential customers. That's harder. But most people try to raise R&D funding from people like YC or other investors. Banks will not lend you money for R&D funding. Your family might. So I would try to reduce that as much as possible. Try to spend as little money as possible hacking together, prototyping, getting to the point where you know what product you're going to build. Then on the inventory financing side, here's the thing that I've learned. build. Then on the inventory financing side, here's the thing that I've learned. Inventory sucks. Inventory is like one of the hardest things that hardware companies have to deal with because they can't make money generally until they have a product that they need to sell. It costs money to build that product and it costs time to build that product. So you have what's called a cash conversion cycle where you may need to put inputs, dollars, into your product in order to get outputs down the road. Again, it is impossible. It is very difficult to manage inventory. So the better thing is actually to rise above it and to get into a situation where you don't need to buy as much inventory. There's two ways that you can do this. One is you can get customers to pre-order. That's the easiest way, because then you have a very perfect idea of how many units you need to build, and you can use that money from preorders to actually fund the development. You don't need to raise money from VCs. You don't need to raise money from banks. That doesn't work always, but it does work in some crazy situations like xiaomi up until two or three years ago sold their phones on tuesday mornings like they had a once that you couldn't go on the website and buy xiaomi phones you could only buy them like tuesday mornings and so it was like a thing everyone would be at their computers on tuesday mornings waiting for like the latest drop of xiaomi phones and they had a really short production cycle like not a week but like they knew basically based on these Tuesday sales, how many units they'd need to make over the next couple of weeks. OnePlus also did the same thing. So that's one way of doing it, the pre-order route. The other way is to change your product so that it takes a shorter amount of time to build. This is called reducing the lead times. So the benefit, the secret benefit of reducing your lead times is that you have to put less of your hard-earned cash into inventory that will then take months to turn into actual revenue. So interestingly enough, sometimes it's in your best interest to pay more for the product, pay more for the BOM, the bill of materials, pay more for the components if the lead times are shorter. Because you may not actually have a margin problem. Maybe you actually have quite a bit of margin, free margin, but you have this cash flow problem where you can't fund new batches of products because it takes six months to turn that product into revenue. So you could take some of the margin, you could do a trade-off where you earn less profit per unit, but you're taking less of a risk up front. That's kind of the general learnings that I've had around how to do hardware financing. Great. Thank you very much, Eric. Thank you very much, Eric. Thank you.