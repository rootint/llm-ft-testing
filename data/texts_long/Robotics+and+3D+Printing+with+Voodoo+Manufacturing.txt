 So I guess the easiest way to put it is manufacturing using 3D printers. Will it create a net positive of jobs and will it be moved back to the US? Great question. It will in the US. I think it is, it's a net positive for places that have seen manufacturing jobs leave their country, right? I would say China is probably going to be in trouble. I read a blog post recently about how Foxconn is looking to automate 30% of their workforce in the next three years, I think. They have a million employees, right? So that's 300,000 people that might lose their jobs due to automation. The hope, obviously, is that things are growing, right? It's not a zero-sum game. And so why are they losing jobs? They're going to be replaced by robotics. They've been the low-cost option, essentially. And now robots are the low-cost option. You can deploy them anywhere. So they're getting beaten at their own game, essentially. And help us understand why, in particular, this is happening today. How are the robots of today any better in terms of their technology or capabilities than the robots we've seen for a long time? Yeah, I think there's a few trends that are converging. Robots are becoming a lot cheaper. So just focusing on the hardware side first, we actually use a collaborative robot, UR10 it's called. And this is a collaborative robot, UR10 it's called. And this is a $35,000 robot. So depending on your perspective, that's either really expensive or really cheap. It's cheap if you're used to spending money on $150,000 robots. The other advantage of the collaborative bots is that you can just plop them into a work environment and you don't have to spend a ton of money on safety equipment. Robots are really dangerous because if you're like working around them, it will, it'll just kill you honestly, if you're in the wrong place at the wrong time. So these are designed to accommodate that by, you know, they have force sensing and stuff like that. So they don't hurt people uh this started as a research trend in boston um with this company called rethink robotics and they released their first arm in like 2011 so not only did the price come down but they also kind of got easier to integrate into the workplace you can actually train them now just by like taking an arm and dragging it to a place and saying like move here and then like move here well Well, go into that a little bit deeper. Cause we talked about it when you were giving me the tour. Like, I'm very curious about how you actually program an arm. There are so many different ways. Uh, the software side of it, I think is the other interesting part of the industry, which is pretty, pretty young. Um, there's, Ollie can probably talk to this even more, but there's kind of like software of old with robotics, which is very rigid and structured and focused around safety. And then there's like software of new, uh, which is all five years old or less. Uh, and most of that has been developed around this one system called Ross robot operating system. Um, and Ross is really exciting for the industry because it's very accessible you can program it it's open source but it obviously has a lot of a lot of things to be improved before it's like quite ready for highly structured environments where reliability is key I don't know you could probably talk a little bit more about what we've been planning on doing here. Yeah, I mean, the cooperative arms are really nice because even before you get to the level of we need to integrate ROS to add vision or something else like that, the UR10 is actually at the point where you just pop open a socket and send it some ASCII commands and you have it moving around immediately. So the interface there is really easy. around immediately. So the interface there is really easy. And actually, we've been able to treat most of our robotics projects to this point, just as software projects. We're definitely interested in bringing people in with robotics automation experience who can sort of handle or think about the corner cases more and things like recovering from failure. But as far as getting a prototype together, it's basically just a software project. Okay. And so to make this more clear, like how are you guys actually integrating robots? Because, you know, on the surface you're doing 3D printing and those are confined boxes. So why do you need arms? 3D printers are robots, I'm just going to say by definition, but we're definitely adding more to the mix. So I think the cool thing for us, it's actually a pretty straightforward application of the arm. And it's something that people have been using robotics for for a while, which is just your classic machine tending. So basically, you have some high value piece of equipment that's churning out these jobs for you. You want to be able to run it 24-7. So you just have an arm sit there and your machine is so high value that every second you can keep it producing is worth money to your company. We actually have a slightly more exaggerated case of that where we have, you know, 160 3D printers. So it's not one arm tending one machine. Like I think you tend to see in the traditional deployment of this technology, we have one arm tending 50 or a hundred machines. So it's very valuable to us essentially to be able to do something like this with the arm. Okay. And so why have you guys opted for the machines, the 3D printers that you've gone with? Okay. And so why have you guys opted for the machines, the 3D printers that you've gone with? We use MakerBot Replicator 2s. We use them because we know they work. And we actually used to work at MakerBot, the manufacturer of the printer. And so when we were there, we obviously got a lot of experience with these. They're kind of older technology at this at this point um so we're definitely looking to integrate the next thing pretty soon and because they're like so people understand the landscape there's a whole range of 3d printers right like in the past i mean when did it start like 20 years ago people started doing 3d printing 83 i think was like the first like patent around 3d printing um so in the past 30 years expensive printers like hundred thousand dollar printers the cheapest printer was maybe like twenty thousand dollar printers have been the name of the game and these are all used for prototypes uh starting in around 2007 those original patents expired and people started developing desktop printers which is what really spurred the 3d printing explosion of like 2012 and fall from maybe you know it was kind of this curve of like oh my god we're really excited about 3d printing everything is going to be 3d printed and then the reality set in uh there's a lot of work that needs to be done before we're there so cheap printers which is the desktop printers that we use are just low-end commoditized hardware the technology was invented you know a few decades ago and people just figured out how to make them really cheaply in scale and that's what we're built on and you guys have opted into those cheaper printers just so you can have more jobs running simultaneously uh it's it Google Amazon method to reliability, essentially. And it sort of flips the current or old style 3D service bureau on its head. Very valuable machines creating very valuable parts in small quantities. For us, it's all about scale and cheap parts. quantities. For us, it's all about scale and cheap parts. So going back to robotics for a second, if I'm listening to this podcast today, and I'm kind of interested in getting into robotics, but I don't really know where to start, what should I do? That's a great question. There are really cheap robotic arms out there that you would start with. So like Craig and I were actually talking about this earlier. You can buy like a five axis arm, which uses servos. Yeah. There's a few different ones. I actually haven't heard of that one. They use servos. They can lift a few hundred grams and you can just like put on your desk and have it like, you know, move your pen from one point to the other, you know, move your pen from one point to the other, you know, and you can actually obviously add more complex tasks on top of that. So pick up one of those and then start using one of the open source libraries out there. Programming a robotic arm is a lot easier than maybe it was a long time ago because they handle all the complicated stuff like how do you get from point a to point b you can kind of just tell it move to these coordinates and xyz and then sometimes you tweak it a little bit for like how it moves there but the details are handled right now by software that's been developed over the last 10 20 years and when you guys are programming your larger cooler arm um are you doing any of it in simulation are there any uh good software packages to be to be had there uh i think uh we we had an intern working on on that project over the summer and i think just at the end he discovered uh some simulation tools and um yes, basically, you can get a simulation that shows your environment, shows, actually, this is one of the built-in features to ROS. It's just a module that you can include. And it'll let you simulate and just sort of show you exactly where the bot is or if you're running simulations, where you think it is. So the tooling around this, I think, has been improving. And actually today is in a, you know, it has a lot of things that we could use, but it's in a pretty good spot today. I think that's also an excellent point to bring up, because that is going to be the future of robotics, simulating so that the robot can teach itself how to do things. Basically, humans can train robots to do more objective-oriented tasks, and then it can figure out the details for you. Our goal is to eventually build a system for, let's say, assembling a product that we're making on an assembly line. We would love an arm that is dexterous enough to replicate actions that human hands can do. And maybe just have like a video camera and have a human assemble one. And then the arm will teach itself how to do that from a video. That would be amazing. That is what we want to build. I think that requires simulation is what we're working towards. Interesting interesting and does anyone manufacture today anything that resembles human dexterity in terms of you know fingers um so there's there's definitely some robot arms that are meant to like grab objects and they have fingers and um they're slow um they're not the best there's probably two two movements when it comes to like grippers in the robotics world there's the hard uh you know rigid like one or two axi actuators and then there's the soft grippers so the hard actuators you design to do one task and like you optimize it for that and it can do that over and over again and it's cheap and simple the soft actuators which are not as mature are kind of designed to like pick up objects that are weird like this without breaking it a lot of them even work with like air sacks that just kind of like close around things and those really aren't dexterous enough or precise enough i haven't seen anything yet that is like as good as a human hand, which is kind of weird. Following the line of training yourself to learn robotics, where are the areas that you see developing right now that are super interesting and high-value to companies where people can start contributing to open-source projects? So if I were in undergrad or getting my master's right now, I would be learning ROS and I would be focusing on research that was towards that training problem. This is also a problem that OpenAI is working on and has published some cool videos and papers about. If you're really just looking to get a job uh there's kind of two flavors of robotics right now there's like the research side which is what we're talking about and then there's the industrial automation side industrial automation is very different industrial automation is about performing one task over and over again, really efficiently and cost effectively. Companies, most manufacturing companies will invest hundreds of thousands of dollars building a machine that just does one thing really efficiently. So it's not flexible is the main difference. To do that, you need to be a mechanical engineer, an electrical engineer, and have a little bit of software knowledge. And then you can become an industrial automation expert and go work for Toyota automating their next assembly line or Tesla, maybe a little bit cooler. So there are two paths. There's the research path, which is probably more interesting for the intellectual folks who like to think about problems that haven't been solved yet. And then there's the industrial automation path, which is a little bit more practical, a little bit more like classical engineer. I'm just going to like build stuff. And so Daniel, what's come across your desk with the AI grants related to robotics? Yeah, so just in back color, AI grant is a kind of decentralized research lab where people can fill out an application in about five minutes and within a couple of weeks we let them know if we're giving them a grant for what that has both cash and twenty thousand dollars in gpu training credits and we've gotten almost a thousand applications for the second round of ai grant many of them focus on of the ones involved in robotics they're almost all entirely in simulation. The advantage to simulation is you could do this from, you know, your pajamas at home. You don't have to buy anything. Um, and they all, they're all kind of very similar to the work opening eyes trying to do where you want to give an agent a video feed like a human would get and try to get it to learn to do something. You know, all of the approaches are kind of, as far as I could tell, somewhat similar to what general research is doing. So if you had to come across something incredibly different and weird, but I'm eager to find it and help that person get their paper published if they have if they're listening to this podcast now and have a really weird idea well what are the approaches people are using because i don't think it's uh i mean ai is obviously of interest to many people but robotics specifically within ai like how training in a simulation even works um Could you just walk through that for people who want to understand? Yeah. And I'm sure there are folks that are significantly more expert in this than me. But the rough idea is, even beyond a simulation, in reality, what you're doing is you set up a camera and you use, you know, about the 2014-15 technology that we've uncovered as a species, which is we've managed to teach computers how to look inside images to get a general understanding of what the agent is looking at. And then you'll traditionally you'll have, you know, ideally a human perform a task. So, you know, you're moving a ball from one hand to another or you're moving a ball from one point to another. And then there's kind of two scenarios here. There's one where totally on a freeform basis, the robot arm will try to do the same exact thing. And it's just trying to emulate what the human hand saw. There's another approach, which is that the robot arm has some type of goal function that it is looking to maximize. And so it kind of flails around and realizes, okay, like randomly moving around in space, bad idea. Because that's not increasing my goal function, you know, touching this ball seemingly slightly better um you know moving this ball across the coordinates of the right place even better and so in particular this is done with things that where you could measure very clearly the ejectic function like unscrewing a cap from a bottle um and uh then you basically try to mash those two things together into an end-to-end system as far as i can tell this truly end-to-end system. As far as I can tell, a truly end-to-end system that works in the physical world, I don't think has been demonstrated by anyone yet, but I may be wrong. There was one gnarly, unnamed research lab that had just a goal maximizer robot arm, I think with a bottle cap. And this thing wasn't even given any image prior. So it was just told, try to unscrew the cap. And so the arm, which is quite strong, is flailing around trying to unscrew the cap. And it's not smart. It's just trying to unscrew the cap. You know, don't blame it. And then apparently, so the story is told, it grabs onto a researcher's arm and it's like oh let me try squeezing screws okay that's not working um so no harm was done but i think it's an interesting example to how ai true ai could be actually like not evil pretty harmless it's just doing this other thing where it just wants to get more paper clips um and then by accident destroys us all yeah hopefully the goal function isn't like take over the world launch nuclear missiles i guess my point is even with a simple goal function like get more energy to run faster you could accidentally uh kind of cause a lot of damage protect humans from themselves kill them all i mean who's putting in the bounds right now obviously open ai is doing a ton of research around this but yeah i mean when you hit a level of intelligence uh maybe slightly past unscrewing someone's arm um what are the constraints people are trying to create in ai right now boy it's an active area of research and tweeting of Elon Musk. So, I mean, I think there's a lot of people working on safe AI. I am personally pretty skeptical on the regulation approach that people keep on proposing because it's not clear to me how you can make it global. And I don't think that, you know, all the smart people are in America. I think they're spread across the world. So I think regulation would just mean that America is last to the game. I think there's folks working on, you know, kind of fail safe or dead man switches, something that would stop an algorithm before it starts hurting other humans. There's people working on algorithms that are cooperative in their style so open ai and deep mind actually published a paper on this where the the training is done with a human in the loop who's actively making suggestions and the hypothesis i believe is that well if that would always happen at least the human could direct the ai to be like oh that's bad let's stop hurting my arm type of thing uh and i'm sure there's plenty other approaches that i'm not um not even aware of i am personally i haven't heard it's it's quite fascinating when there's a area like this there's an open problem which is the agi problem which we're all aware of we're all talking about you know over dinner oh my gosh what's going to happen and no one's really thought of a clean answer and it's kind of made me wonder if there is one at all um because it's one of those things where i feel like if there's an obvious one it would have it would have come up by now there's a lot of smart people thinking about it uh and so i've kind of resigned myself to believe that from agi you know killing us it's not clear to me that there is a smart answer i mean depressingly if you go online you read stories about what we do to other species we consider less intelligent right we're not that moral like there's a great slash very sad reddit thread about how people abuse characters from the sims oh no and you know we all did this you know you like build the house so you put them in the pool and then you take out the yeah the ladder and we all thought it was hilarious but you think about it and you're like well that's kind of the same thing if you superimpose it onto a super smart AI to us. Obviously, we crush ants without giving it another thought. I am skeptical that we will find a way to fix that. I am optimistic that that's not going to be what kills us as a species, though. Okay. Because I think there are far more threatening things that are closer. Because I think there are far more threatening things that are closer. For example, the use of AI by a human to create some type of nefarious damage. So what's happening is there's this AI hype right now. And so more and more industries are moving their infrastructure to kind of non-deterministic machine learning based stuff. Cars are going to be using machine learning to drive. The electricity grid will manage be using machine learning to drive. The electricity grid will manage itself using machine learning. And so as a result, it'll be more susceptible to attacks from that same thing as opposed to being manned by a human. So the power grid is now constantly being regulated by an algorithm instead of a human. Could that algorithm be interrupted by another smarter algorithm in a way that would have been easier than to interrupt the human? I think so. So, I suspect war will actually not be from AGI. War and damage and carnage will be from weaponized dumb AI. Yeah. Well, to kind of concretely connect the dots, your robots currently right now are fixed to the ground, but they're going to start moving at some point, right? Yeah. They're going to be put on mobile bases, not dissimilar from like an Amazon warehouse. Right. And so have you begun that training process? No, we've gotten a few demos, but the hardware is actually really early. When Amazon acquired Kiva, they just took that out of the market. And so right around now is when people are starting to release mobile bases again. They're all in beta. I think there are a few that you can actually buy. So no, we haven't gotten started on the moving problem. Wow, so Amazon's acquisition of Kiva, you think this kind of slowed down innovation for the rest of the world? By five years. Wow. Something like that. It took a long time for everyone else to catch up yeah what about the um the automated i mean have you been to a shipping container port ever i grew up in long beach california there's a massive one there yeah uh but i haven't like gotten a tour they're basically trailers that are autonomous i i wonder i don't know who is producing those but i don't think it was cuba no uh kiva just does warehouse robotics yeah that's what i thought which is all like pick and play pick and pack and stuff like that okay i think that's also the the shipyard example is an interesting um it's an interesting example that shows how robotics scale in a way that humans don't uh you could build a little mini shipping yard and train on that or do it digitally right do it uh totally as a simulation and then roll it out and start moving around like multi-ton objects very quickly yeah um that's just a process that doesn't scale like it scales way more efficiently than a human process does which is a little bit scary what challenges do you guys see if you wanted to scale to like a hundred thousand square foot warehouse you know for us um it's actually so right now what we're building is uh kind of like this footprint unit factory which has 160 printers and we'll have like two arms moving around doing machine tending and then as parts come off of the printers they have to be post-processed, QC'd, packed and shipped out. I think when we automate each of those steps, they each scale very easily. Most of the challenge is getting the first part of it automated. Everything beyond that is kind of like, can you buy the hardware quickly enough? And traditional software scaling issues, many of which are solved. So going from a 1,800 square foot factory to a 100,000 square foot factory is kind of like how many more arms do we need and like how many AWS servers do we need to send up? It's an engineering problem. It actually doesn't seem that hard. Do you agree as CTO? I mean, so I think there are probably economies of scale that we could realize in a hundred thousand square foot space that we obviously can't get here. But yeah, I mean, the easy answer to scaling would just be pound are today uh but you know then we can slowly merge cells reorganize as we need to so this is sort of our worst case scenario right now but we could in theory pop these open across the country if we needed to it's very different from scaling a factory traditionally and this is a contentious topic a topic but scaling a factory traditionally. And this is a contentious topic, but scaling a factory of robots is so much easier than scaling a factory of people. Hiring people is difficult as everyone knows, hiring people who are good, hiring people who, you know, show up to work on time, et cetera, hiring people in a different country. If your company doesn't speak that language is difficult, you know, requires an on the ground expert in the theoretical fully automated factory case none of those problems are real um if you can run a hundred thousand square foot factory or a hundred thousand machine factory with 200 people it's a lot easier than like a thousand people running a factory uh so that's i mean kind of the idea that voodoo is built on is it'll be a lot easier to scale as we build out this footprint right but you're also uh factoring in being really close to many people who are interested in manufacturing right um i heard on one podcast that you offer like pickup for certain folks yeah is that still the case? Yeah. Uh, I mean, we're in Brooklyn. We're right outside of Manhattan. Okay. Um, so do you have a vision of just, you know, many factories or would you rather one giant one? We think of it kind of like server farms. It's semi-local. So, uh, maybe there's right down the street from everyone in the world. But there might be one within one day delivery distance or potentially in pickup distance for larger customers. It's actually really common in manufacturing for a company like Toyota to contract with somebody who's going to make a sub component of one of their cars and then require them to set up a factory right next to the Toyota factory with like a conveyor belt, literally moving the parts from one to the other. It's kind of a crazy thing that they can just say, we're going to work together, but you're going to build this factory right next to us. We're not going to build it, you are. That's also a lot easier with a robotic factory, and you can customize it. So it's just the right size on the topic of Toyota. Um, how do you kind of see the future of the materials that you can use in 3d printing evolving? So today, I think when people think of 3d printing, they think of the, like basically little plastic parts. Um, are you always going to be stuck with that or is there a strategy where that kind of changes and expands? Uh, so our vision for Voodoo is definitely to move past just 3d printing. Uh, but even within 3d printing, uh, you know, it's been around since the eighties. I think Boeing is 3d printing titanium parts for all of their planes now. So, uh, 3d printing as a technology, if you consider the entire range, is a very capable technology. And generally, technology trickles down to the low end. That's what we'll see here. So Voodoo is building an infrastructure for onboarding digital manufacturing technologies. So it doesn't matter if it's 3D printing, if it's capable of doing plastic, metal, whatever. It doesn't matter if it's 3D printing, if it's capable of doing plastic, metal, whatever. We're interested in anything that takes a digital file as input and outputs a physical object at the end. So that's how we're going to handle the quality and material questions that come up. We got a question from Twitter about the future of 3D printing. And this point is probably the biggest barrier to like a 3d printer being in everyone's home um 3d printers just right now don't have the material capabilities or the multi-material capabilities to produce uh most of the objects in your house right most things are a combination of plastic components um multi-step plastic components, electrical, you know, PCBs, wiring, soldering, batteries, like all of this stuff, which is currently assembled. It seems like people don't think about when they say the future is going to be a 3D printer in my house making my stuff. Maybe like 1% of the objects you own could be made by a 3D printer right now because they're just a single material. So I think eventually we're going to hit that future where it's like the Star Trek replicator. It's not going to happen with any of the current technologies out there. Until then, digital manufacturing is still a thing. Digital file and a physical product but it's going to be a multi-step process which i think uh benefits from economies of scale from a centralized facility what about yeah what about even just literal object scale you know like take this you know just a plastic on this chair yeah um what does the time frame look like to where we could just have 3d printers making at least this part for us yeah uh 3d printing right now is not super cost effective for big stuff big meaning big meaning anything larger than like a loaf of bread okay um when you get bigger than that uh it just gets prohibitively expensive and so printing that chair might cost a few hundred dollars um there are big printers out there so people are definitely working on that problem but you kind of have to balance quality might cost a few hundred dollars. There are big printers out there. So people are definitely working on that problem. But you kind of have to balance quality with speed. And so I think the next wave of 3D printed parts in the world and digital manufactured parts are all going to be like consumer packaged goods, like smaller things that fit kind of again in this like loaf of bread sized shape yeah you're not going to start printing tables and houses and stuff without significant improvements in the technology okay and it's just expensive because it's a large amount of plastic it really comes down to the extrusion rate of the machine so let's say that that chair is either injection molded or roto molded different molding technologies you have like a physical mold which costs probably tens of thousands of dollars to make and you have a machine that very rapidly injects hot plastic into it uh and so the the rate of injection uh of those machines is probably like a thousand times faster than your average 3d printer. So based on that fact alone, you know, you can just take the cost of the machine time and the injection rate and approximate how much it costs to build something. And large objects just are too expensive. The ratios don't work out yet. So there's one, a handful of questions from Twitter. One is about IP in China. You remember this one? Yeah. So Wyatt Sanders asks, how do you deal with intellectual property in China? How hard is it finding support for new hardware as opposed to software? I'm trying to understand the question exactly. I read it and I have a few questions about the question, but I'll do my best since this isn't uh an in-person question so um honestly i you know i think with ip unless you're incredibly uh restrictive about like what gets out basically anything that isn't a well-guarded trade secret somebody else will have um the most interesting uh i guess story i heard is when you're manufacturing in china ip is thought about very differently than it is here i think there's kind of this belief that like things are just shared and so that's why like everybody gets the sneak peek of an iphone because in reality culturally uh culturally it's not a big as big of a deal um to just kind of like share stuff i feel like um so it's very different in china than it is in the u.s so if you're getting something made in china i wouldn't really count on ip being a big factor and even if you can keep something totally under wraps like let's say you're building a top-of-the-line drone or something uh once it's out in the market um somebody in china will buy one and then in like two or three months just replicate it it's not very difficult for them to do that with hardware. Hardware is becoming easier and easier to replicate over time. And so it's getting closer to software. So I think hardware IP will actually work a little bit more like software IP, which is difficult to protect. So actually an interesting to talk about to, to talk about voodoo again, a little bit and where we fit into this. Uh, one of the benefits of digital manufacturing is that you're not rebuilding your molds all the time when you're iterating on your product. Uh, so actually the avenue for manufacturing companies protect, protecting their products could be, uh, just iterating more rapidly and using companies like us to really stay ahead of the market. Hmm. How did Apple think about it it you'd have to ask them no comment all right uh next question um enrique asks i don't know if you would even have an answer for this but um 3d printed solar panels have you heard of this no i didn't even see that question came in on facebook man i don't know anything about do they exist yeah what uh do we have any context for this question the context is and i'm adding a word here what has been the progress regarding 3d solar panels which i assume means 3d printed solar panels got it um my guess is minimal a lot of like um processes that you use in making chips or dealing with silicon wafers have the same names as 3d printing processes so there's like stereolithography is a common way of getting parts 3d printed uh basically that just means you have like a laser that's etching some pattern into something um so i could imagine a world where you can make solar panels with three years but i actually don't know anything about it all right next question then uh bit bit asks what will 3d printing uh will it ever be incorporated into our educational system the other way, the way other technologies have? Definitely. It's a pretty simple answer. Yeah. I mean, I actually, the first time I used a 3D printer was in high school. Oh, really? Yeah. Where'd you go to high school? I went to this really nerdy school in California called the California Academy of Math and Science. It was a public school, but they got sponsorships from like engineering companies to help us get things like 3d printers so um yeah i think it's definitely moving in that direction and that when i was in high school that the two thousand dollar printer didn't exist so it was a big deal to have this like thirty thousand dollar machine uh in the room you know that we could use um so machines are cheap enough they're they cost the same amount as a computer it'll just follow the same trend like computers started ending up in classrooms in the 90s right yeah um so if today is the 90s of computers in 20 years right uh i think kids will probably be using them to make all sorts of things okay uh i did have a couple questions about just your experience in yc were you guys in this group were you in daniel's group yes yeah yes we were i can connect the dots uh we can talk about daniel off the record but um what was your uh what was your experience like at yc being a hardware company do you find it was any different uh yes i mean we're we're not quite a hardware company is the other side of it so we um i think before we went to yc we didn't quite know how to position ourselves with investors or other people because we're not a hardware company we're not a software company exclusively uh so i think being nyc and talking to daniel and talking to sam um basically helped us find ourselves um as a robotics company that's that's really what it comes down to uh which is the intersection of hardware and software um and if we succeed in the future we will have contributed significant gains to the world of robotics and automation and manufacturing do you remember what they were like in the beginning yeah i mean pretty pretty formidable i think they were more formidable by the end though um and i think y, the hope is that YC gives founders a lot of things, but one that often people discount because it's, I think, a little bit hard to capture in a couple of bullet points you can read on the internet is it really changes founders' mentality and the way they think of just how big their company could be. And I'm not saying that you guys were meek when you came in you were already great you had already had a great business but i found that with um the voodoo founders and and a lot of other folks it it hopefully takes it to the next level in terms of figuring out how to position their company when talking to investors internally and frankly to themselves um a question we get oftentimes is, what is it like being a solo founder in YC? You guys are kind of on the opposite end of the spectrum with four, correct? Correct. What's that experience been like? We had a, it was actually really helpful for us because we're based in New York and YC is obviously in California. We kind of had this dilemma because we can't just move the whole company there when we get into YC is obviously in California. We kind of had this dilemma because we can't just move the whole company there when we get into YC. We have a factory. We've got people. So it was really helpful to kind of break up going to YC on different weeks so that we could focus on like building things here, but also make sure that somebody was there like talking to partners getting advice building the company um otherwise you know i think our founding story kind of goes back to the fact that we've known each other for a long time we founded a previous company together sold that company and the typical pitfalls that you would find with a four-person team we've been lucky to avoid usually with four people i'd imagine you run into like serious issues of like who owns what or you know two people might not get along or there could be so many different problems because your your graph gets bigger um we are used to working together so uh luckily we haven't had any any issues that i don't know if oliver maybe you can confirm no i i would just agree with what max is saying i think it's important to sort of carve out roles for everybody and making sure that people are getting input to the things that um they're really bringing value to uh but at a certain point um you know not everybody is involved with every decision day to day. And on a large founding team, I think that sometimes hurts feelings or rubs people the wrong way. But for us, I think we've done a pretty good job of defining what everyone's role is on the team and making the hard decisions together. But also making sure that, you know, we're not taking things personally when, Hey, somebody had a meeting and a decision was made. Uh, it's, it's, um, I think everybody buys into the, uh, idea that we're a team and we're doing this together and, uh, everybody's got a part to play there, even if it's not always exactly, um, in the direction they want to go. Just for folks that are listening to this and are maybe single founders wondering how to meet co-founders, how did you guys originally all meet? We have a very funny story, I would say. Go for it. No, sorry. Go on. So Voodoo has four founders. Three of us went to college together. Oliver was actually the great above me, and John, who's us went to college together. Um, uh, Oliver was actually the great above me. Uh, and John, who, who's, uh, one of our other founders, John and I actually kind of decided we wanted to start a company while we were juniors. Um, we had internships that summer that we like, didn't like, so we dropped them, started a company. Oliver had graduated already, um, and had a job at teradata and we convinced him to quit his job and move back to claremont which is where we went to school and uh live in a house with two people who were still in school so i i was doing training with teradata i'd been there i think for six weeks or something like that and i had to go quit basically during a training program uh so that was difficult uh and then and then had to move basically across the street from the college i had just graduated so uh a bit humbling at the time but uh clearly sitting here i think the right decision well what was that pitch like because that that's another very common question like how do i convince someone to join my team that's that's a really good question i'm interested in hearing oliver's perspective because um the other weird thing about our our history is we weren't like best friends before we started our first company um i kind of knew john and john kind of knew oliver because we went to a small school and like i was in a class with john did you know oliver at all uh i don't think we'd met until yeah you guys were pitching me on joining um so there was a little bit of risk right which is why i think we got really lucky yeah um that our personalities were compatible um we went to a really like tech focused school so uh i think just coming from the same environment was a good starting point but to get back to your question the pitch was do you want to start a company and you know selling him on the future of 3d printing which at the time was really easy because it was everywhere i remember one night we had to drive down to san diego and get dinner with oliver's parents and convince them that it was also very old-fashioned yeah yeah Yeah. Uh, almost like we were dating, right. Um, I don't know what happened from, from your side. Yeah. I mean, the pitch is basically, do you want to do fun stuff or not? And I, I wasn't feeling super fulfilled, uh, in, in, uh, the position I was at. So, um, So, um, I, I tend to be a very cautious and, uh, a cautious person. I like to think of like, um, you know, worst case scenarios and stuff like that. This was a very out of character decision for me, I think, to just sort of bail on a job and jump in. Um, but it worked out. Um, I think a lot of it comes down to timing, right? They got me at the right time. I was not their first choice, actually, which I think is an important thing to bring up. Just because for a solo founder out there who's trying to find somebody to make it work, doesn't have to be your first choice, Doesn't have to be your second choice. There's somebody out there that you can probably build this company with. What were the technical capabilities of the other people on the team when they were trying to bring you on? Uh, so it was just the two of them. Uh, they're both, uh, engineering, uh, or they, they had their engineering degrees or were getting them at the time. So really they were looking for someone with a software background to join the team and sort of take on that part of the company. So that's the role I came on for. That's the role I've filled basically ever since is sort of owning the software side of the product. Do you have any pro tips, Daniel? On finding a co-founder? Finding and then convincing a co-founder. owning the software side of the product. Do you have any pro tips, Daniel? On what? On finding a co-founder? Finding and then convincing a co-founder. I was a single founder at some point during YC. And then I found someone who became a very good friend of mine to be my co-founder. But it was a risky decision because um i met him after yc uh his name is robbie and we spent um maybe maybe a total of 48 72 hours together um coding together talking before we made the jump and so we kind of really lucked out in that way um sounds like a theme yeah um the one non-intuitive thing or semi non-intuitive thing that i would encourage i always encourage people to think about is as it turned out for my interaction with robbie the fact that we were destined to be really good friends mattered more than the fact that we both worked well together and so what i mean in particular is as it turns out we had the same shared taste in music we had fairly similar political beliefs we had fairly similar hobbies we like the same video games and that context I found matters quite a bit because you end up spending a lot of your waking hours with this person and some of those hours are quite stressful so it's useful to have this shared substrate of you know oh you both you know like dead mouse or something to fall back on versus fine just shooting for someone who's you know technically competent i would agree with that point wholeheartedly yeah oliver and john are two of my best friends and they weren't before we started our first company five or six years ago yeah and a lot of that is we go to concerts together like we go to sports games we were roommates for four or five years yeah i still live with john yeah all he moved out because he's a girlfriend so good for him but uh that i think that was key to us because we actually just enjoyed spending all that time together yep so i i mean i think one way to encapsulate this is if you're looking for a co-founder maybe more better to start looking i know this sounds kind of lonely but start looking for someone who could be a really good friend and then and then and then your second filter is if they're technical or not as opposed to the opposite yeah that's a great point um so maybe kind of in closing uh you guys have been out of yc for a while now six months yeah uh what's your advice for other yc companies that like like, I know the during YC experience is very different than the post YC experience, building your company. What have you learned since YC that you'd like to share? So, I mean, everybody has a slightly different experience after YC. For us, obviously closing fundraising was something that took effort from me and John. That was two months after YC. We had actually kind of pulled the round together, but doing the documentation and paperwork took a long time because we priced the round instead of doing safes. So if you can do safes, do safes. That's advice number one. Beyond that, you know, the hardest thing that i think um we've encountered since yc is keeping up the momentum um yc is just great at giving you this like excuse for everyone to work really hard like nobody took vacation all that stuff so there was a little bit of like a post yc hangover for the company because we'd all push ourselves really hard. And then we had to like kick everyone back into gear right after we closed fundraising and just start blazing ahead. So if I were to do it again, I would be, I mean, it's easy to say this in retrospect, but I would be thinking about that during YC and right afterwards. Like while you as a founder are really distracted with fundraising, maybe the one thing you should focus on is like keeping everyone else motivated and moving uh even if you're going to kind of be busy and out of the loop that's my experience i guess we're also a little bit larger than probably the average yc company is so true we were 16 people in yc yeah i mean there there definitely are some even larger companies but you guys were on the larger end. One idea on that, that I found really useful for me when running my company is, I guess, so I guess the obvious forcing function you can give yourself is just PR and media. So you just tell the media you're going to launch something in two months, and then you could use that as a way to rally the team. That works, but you can't do that all the time. rally the team that works but you can't do that all the time um so the other thing that we used to do that was quite useful is we used to set up much like yc did these demo days where we'd invite everyone's friends family and most importantly significant others uh to demo what they've built and people would sign up ahead of time um and say oh you know by you know next month's demo day i'm gonna have this and it turns out when you like tell your significant other that like you're gonna have built a thing by a date you really care because you don't want to look like a fool and so that provides kind of synthetic internal forcing function and you can make it like a fun event invited people over to the office um kind of humanize the company to all the folks that don't work there and I found quite a bit of that instilled pressure in the team that we wouldn't have had otherwise okay cool this was great thanks guys thanks thank you so much please change the future of manufacturing in America for the better we're working on it Thank you.