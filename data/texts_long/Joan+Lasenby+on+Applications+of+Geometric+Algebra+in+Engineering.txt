 So Joan, as we walk through geometric algebra, I think the best place to start might be through a more tangible example. So you're doing a project with drones here at Cambridge. Can you explain that first? Yes. So we're doing a project with drones. This is joint with the architecture department. And what we'd like to do is use drones to look at the built environment generally. And the built environment is made up of lots of lines so what we would like to do is to do a lot of our processing or vision processing with lines and lines are much more difficult classically in computer vision than points a lot of reconstruction is done with points. You get a point cloud. You can get structure from motion. MARK MANDELMANN- So motion capture, for instance, when you see someone in the suit with all the ping pong balls, they're connecting points. JANE CARDWELLAN- They are all points, exactly. But then even not with motion capture, just with cameras that are moving, you can get points. You can match points okay so we would like to do this with lines lines are difficult and our mathematical framework that we will use for this is geometric algebra okay so let's define it let's start there yeah me shall i define it okay um and we'll see if it ties in with see if it makes sense what you've read about it so um do you want some history yeah let's start so um so grassman was a mathematician and grassman had something called an outer product so for example i can take two vectors, I can put a wedge between them, a wedge product or an outer product, and I get A wedge B. So this quantity is now a different thing, and I'll explain what that is. So Grassman had this outer product, and Clifford, William Clifford, who was actually at Trinity before he moved to London. So he came along and he extended this outer product. He effectively had an inner product plus an outer product. So, for example, if I have two vectors, A dot B, where the dot is an inner product giving me a scalar, and A wedge B, which gives me this other thing, is a Clifford product. So it seems like a strange thing to do. And he had an algebra for this Clifford product, which is called Clifford algebra. And it's been in the mathematics literature and research program forever, since Clifford died. Which was? In the 1870s. He died at the age of 34, I think, of TB. So he did a lot, but clearly could have done much more. But as a you know applied tool um it wasn't wasn't really used and it was david hestness who came in the 1960s and said gosh you know uh look at this clifford called it geometric algebra i'm going to call it geometric algebra and i'm going to do all these wonderful things with it so effectively i'll, so that's the background. The basis is, so imagine I have scalars, so just numbers, vectors, so things with a magnitude and a direction. In 3D, we can think of this. Bi-vectors, they're planes. Okay. Right? So things that have two vectors, that makes a plane. Yeah. By vectors, they're planes. Okay. Right? So things that have two vectors, that makes a plane. Yep. So a plane would have a position and a magnitude and a handedness. Yeah. What is that? A handedness is, so suppose I have three points that make up a plane. Okay. I can sort of go from A to B to C or from A to C to B. Got it. Okay. So if I take A wedge B to form my plane in vectors, then B wedge A will give me minus the plane. So you have to then start to think of these planes as geometric objects, which have a sign as well. So if I take vectors A, wedge B, wedge C, it gives me a volume. Again, it will be an oriented volume. If I live in four dimensions, A, wedge B, wedge C, wedge D, it'll give me a four volume. So at some point, I get to the highest element in space. In 3D, that would be a volume. I can't go any bigger. And that has a special place in my algebra. So imagine I have, in 3D, scalars plus vectors plus bivectors plus trivectors. So points, lines, planes, volumes. planes, volumes. I have an algebra which takes these things as objects and I can add them, I can multiply them, I can differentiate respect to them. So it's a kind of abstract concept, but it is amazingly powerful. So that's the kind of rough idea of... Right, how Clifford Algebra moved to Geometric Algebra in the modern... And this is all predating computers, so this isn't being rendered anywhere yet. You mean in hardware? Yeah. So we have a community not a a massive community but there are lots of people who are very interested in in you know potentially getting instructions for chipsets etc FPGA is it is okay so and of course we have quite a lot of programs that people have been building so that the community can test these things out. And so what rekindled it in the 60s to make it happen now? So David Hessner was doing his PhD, and he was a physicist and looking at space-time. So basically his PhD turned into a book called Space-Time Algebra from which basically in the 80s people got hold of and started to get interested in, even though David had been working on it since the 60s. What started David on the Clifford Algebra? I am actually not quite sure. in even though david had been working on it throughout since the 60s um what started david on the clifford algebra i am actually not quite sure okay i'll ask him yeah and then so but you mean why so but the he very quickly realized that um this algebra simplified a lot of space-time physics. Right, so that's kind of what I wanted to get at. Sorry. Yeah. What was the realization that made it like, why is this important now? Why is this important? So, in effect, space-time physics, quantum physics, relativity is extremely complicated. physics, relativity is extremely complicated. And it's the area where you do have to have a lot of background knowledge and a lot of background mathematical knowledge. You do need to be proficient in, for example, for general relativity, you need differential geometry. You need a lot of these mathematical systems. You need a lot of tensor analysis. So, I mean, David could see that with this algebra, he could work entirely within an algebra of geometric objects, transformations between these objects. Everything stayed in the algebra. Transformations, linear transformations functions were geometrically intuitive. There were mappings of objects to objects. They weren't just tensors. We didn't have to go to another space, a sort of dual space as you do in differential geometry. So things became easy. And he started to see that you could interpret a lot of things like Dirac matrices. Well, actually, they're not matrices at all. They were elements of the algebra and immediately they became easy to deal with. So his big motivation was that here was a unifying language for mathematics and physics basically. So if you know this language, you can not only do rigid body dynamics and engineering, classical mechanics. You can do linear algebra without matrices and without tensors. And you can do complex things in quantum space-time physics with the same mathematical system. And this is not theorized. This is proven at this point. It's all good. It's all good. Just to clarify for everyone. It's all good. Absolutely. It's not like this idea that maybe this might work someday. No. But part of the problem is that we all, I mean, your next question might be, well, if it's so wonderful, well, why doesn't everyone use it? Right. So A, Clifford died when he was 34, and it was at the point where Gibbs, Heaviside came in and produced vector algebra and the cross product. Mm-hmm. And so, have you ever thought about cross product? Nope. So, I have two vectors, and I take A cross B. It gives me the vector, which is perpendicular to the plane, effectively. Mm-hmm. Now, it's all very nice, but it only works in 3D. It doesn't work in any other dimension. Because in a plane, I've got no perpendicular. You're stuck. In four dimensions, there's no concept of a perpendicular to a plane. But of course, we all grow up with vector calculus, linear algebra, and matrices. And then we have our research areas and it's very difficult to actually to listen to somebody if they come along and say i've got this super duper new mathematical system that you ought to you know take notice of yeah yeah yeah it would say someone comes up to me and says look at this now i will say well you know i've got my own research and it takes me all my time to you know i've got my own research and it takes me all my time to you know okay do what i'm doing okay and so what planted the seed in you that you wanted to follow this path um so you're the truth you sure that was the goal yeah okay so the truth is my husband um met david testers anthony um ladies and be he he My husband met David Testinus, Anthony Lazenby. He became fairly obsessed with geometric algebra. He is a cosmologist. He could see that there was this thing which told him what the Cauchy-Riemann equations are, for people who know it, are, for people who know it, that the Pauli matrices and the Dirac matrices in space-time quantum physics were just really interpretable. He became obsessed with it, totally obsessed. So Anthony had a PhD student called Chris Doran. Chris and Anthony, they've written a book on geometrical algebra for physicists. And it was very difficult for me to actually talk to my husband at that point without actually finding out something about it. Okay. Because he thought it was one of the um most exciting things he'd ever seen and you were at the time just pursuing math a phd what were you i was pregnant at the time so i was just about to have a baby okay so i did have some time actually yeah because i was you know not that much time of course when you've got a small child. But, yeah, I'd gone back as an engineer. I was a postdoc in engineering. I was doing imaging. I was imaging flames. That was a two-year postdoc position. But I actually then began to realize that this algebra would be really useful in parts of engineering, particularly things which involve rotations. And maybe I should talk about rotations because in engineering and physics, rotation, the way geometric algebra deals with rotations is totally key. So, have you heard of quaternions? I've heard of them, yeah. So quaternions are, well, if we go back, people rotate with rotation matrices. So you have, say in three dimensions, you have a three by three matrix, you act on a vector and it rotates it. rotates it. Now, a rotation has just three degrees of freedom, which have nine components in a three by three matrix, and so they're all constrained. So rotation matrices are not numerically nice to deal with because you have to keep them on the manifold. You have to make sure if you change, if you update rotation matrices, you have to make sure it obeys the constraints. So that's one of the things we use. Now in graphics, et cetera, and satellite motion, it's long been known that the best things to use is quaternions. Other methods are Euler angles, like a rotation about the x-axis, the y-axis, the z-axis. But quaternions have been particularly nice because they are minimally parametrized. They have three components. They are smooth. They don't suffer from singularity problems. And Hamilton created quaternions as an extension of complex numbers. So complex numbers, people know that complex number i, i effectively rotates in the plane, a multiplication by i. So Hamilton spent many, many years in his later life trying to extend complex numbers to three dimensions, and he came up with quaternions. So quaternions have these elements i, j, k, which all square to minus one. So it's like three imaginaries. So to start with, that's pretty awful. But everybody knew. There were great libraries. People have been using quaternions since the early days of satellites. So, if you actually look at code, et cetera, people will use this for rotations. Now, very early on, it's in David's book that you see that if I square one of these bivectors in 3D, let's take it in 3D for now, if I square it, if it's a unit bivector, I get minus one. So I have a real object that squares to minus 1. Okay. Which is kind of telling me that I, the unit imaginary, and this jk are probably unit planes. It turns out that the quaternions are just rotations. The ijk give you rotations about the unit planes in three dimensions, the x, y, the y, z, and the x, z plane. So immediately you see that, you can have complete generalizations of things that do rotations in any dimension. And so at that point you're doing this postdoc position, and you realize that you could apply it. Yes. Not to flames, but to mainly computer vision. Okay. And what was the state of computer vision at this time? What year was this? 1993. Okay. So not much happening. Yeah, but a lot of the, you know, it was really starting to move forward. There was no machine learning in computer vision then, but it was all geometry. It was basically all geometry. So people had been using the ideas of projective geometry in computer vision for a long time which is a four-dimensional space um still with matrices so i rotate and translate things so i have lots of cameras i want to find from my images the rotations and translations between my cameras once i've done that i can triangulate and I can do 3D reconstruction. There was also at that stage a lot of Bayesian statistics were coming into computer vision, so tracking things in images and finding the most probable tracks in crowds. So computer vision was really starting to take off. Okay. And so you finish up your two-year, you're creating these flames, these graphics, essentially. Yeah. What do you jump into to actually give it a go? So I was extremely lucky because by that point I had two small children. I don't know if you heard the Royal Society. No. The Royal Society, the body in London. Oh, okay. Yeah, so you probably have because it has journals and lots of historical people with big names in history were fellows of the Royal Society. So the Royal Society has something called University Research Fellows. And I applied to do, it was probably quite a step for them, because I applied to do applications of geometric algebra in engineering. And they gave it to me. So I then had a five-year effectively postdoc. And I could choose what teaching I did. And the engineering department were very good. I didn't need to do a lot of teaching or admin. But I basically had five years to try and get this off the ground. To kind of figure it out. Yeah. And what was an example of an early project? So an early project was actually with, I think at the time, the internet wasn't really quite like it was today. But there was some mailing lists and there was somebody called Eduardo Biro Correchano, who's now in Mexico. But he put this email out on some list saying, anybody working with computer vision and geometric algebra? I thought, what? So I actually contacted him. And those early days, we did quite a lot of translating all the classic projective geometry computer vision, which was quite mathematical at the time, into geometric algebra. Gotcha. Okay. And I mean, this may sound kind of basic, but one of the really nice things about putting your problem, et cetera, into geometric algebra is you have an origin, some inertial frame. Everything is with respect to that. So I rotate, translate. I don't have matrices, so I don't have to worry about coordinate systems. I don't stack up coordinate system upon coordinate system and then worry about what on earth that translation relates what coordinate system is that in yeah and with vision where you're measuring things in an image and so what coordinate frame is that in yeah you know it's it is quite confusing and i know this for a fact because students are very confused about it all when you've got a rotation where's it with respect to in these complicated systems etc this just makes life very very easy okay and you you almost can't go wrong and was the goal of this five-year period to then apply it to some like uh product use or just do the basic research and see how it goes what what happened at that time uh it was um just really seeing what we could get out of it okay so i did some work with a company called phase space who's their motion capture company in the states not far from berkeley and you know looking at algorithms to calibrate cameras because one of the things I haven't mentioned is that there is another aspect to this system which is extremely useful so I've said that I have these geometric objects my rotations are objects so I can write down coordinate free expressions but not only can I write them down I can differentiate with respect to them easily. Okay. So because I have this algebra of objects, I can do calculus on them. Okay. And that's quite hard to do conventionally, because you've got people can do it, but you know, you're differentiating with respect to a matrix or a tensor or a vector, all this. So it's a much harder... You can do it component-wise, but if I want to get closed-form solutions, doing the analytic stage of the calculus is extremely useful. And so the notion was that you could do it with less compute, like you could render these things using geometric algebra faster? No. Never. Okay. So you can do it pretty fast. It's much easier to program up. Okay. It's intuitive. You can think of what you want to do, and I can program it up at this high level. Underlying, you've got an algebra of a much bigger algebra than three-dimensional space where I have three vectors. So actually, computationally, there's more going on. But at a higher level, I can get code to do all this for me. And at a higher level, I can certainly rotate this object to this object, etc. And then in terms of the state of computer vision from then until now, what has progressed to make this drone project possible? OK, so this is an interesting question. So David Hessness and Garrett Sopcich wrote a book. This is a sort of um real reference book of clifford algebra to geometric calculus yeah it's got everything in there it's not a book you'd read it's a book it's a book that you go to find like a reference yeah i'm sure they meant it for you to read and it that was 1984 or so um in 1999, David gave a talk at a conference. He'd done a paper with Hongbo Li about something which was in the final few pages of this book. Of course, not many of us had ever got to the final few pages of this book, which he called conformal geometric algebra. So this is truly stunning for graphics and for visionary projects, projects which use vision. So conformal geometric algebra is a five-dimensional space. So imagine you take Euclidean space, the space we live in, you effectively add on two more vectors. One is the origin and one is a point at infinity. Projective geometry effectively adds on one more vector. So this is this five-dimensional space. So you get this five space and you think, well, okay, what is this going to get me? Well, what this gets you is that points, lines, planes, circles, and spheres become objects in the algebra. They're objects. You give me a C, this big C is a circle. It's a tri-vector in my five-dimensional space. And rotors, which are this class of objects that rotate, encompass rotations, translations, dilations, and invert... Rotations, translations, dil up. You give me three points. I immediately get the circle that passes through. You give me four points. I give you the sphere. It's an object. I use my rotor. I rotate it. I intersect them. It's a beautiful language for graphics. Okay. So, but because from 1999, lots of, well, a fair number of people, Leo Dorst and Stephen Mann and Daniel Fontaine in, Steve in Canada, Leo et al in Amsterdam, wrote a book Geometrical Algebra for Computer Scientists. And a lot of that was based on this conformal, just what you could do, just how easy it was to do things. So because lines are just objects, because I know how to sort of compare one line to another, because I can intersect lines and planes, keeping this nice algebra, it becomes quite almost easy to see what I have to do to implement a variety of algorithms. So it's quite hard to intersect two spheres. People can do it, but in the classic. MARK BLYTHINGTON- But it's easy to imagine how it works. But yeah. But you've got equations. But here we just do have operators that do it between objects. And one of the beautiful things is we live in a Euclidean. To all extents and purposes, from what we see, it's Euclidean. Now, if you have a different underlying geometry yeah so if you have um hyperbolic or spherical geometry uh then in this algebra you have to change you in conformal algebra euclidean geometry is the thing that keeps the point at infinity invariant. Then if I keep other things invariant, I get these other geometries. And I can just use my standard apparatus and do exactly the same things. Rotate my objects in hyperbolic space and rotate my objects in spherical space, move them around. So it is a beautiful language for geometry. Okay. And I haven't even touched on physics because a lot of, you know, de Sitter space, which a lot of the cosmologists work in, is a different geometry. Okay, gotcha. Which you couldn't use this for. Right, which is why it was appealing to your husband 30 years ago. Exactly. So he started out by being amazed at how things like Pauli and the Dirac matrices, spinors, were all just trivial in this algebra. matrices, spinners were all just trivial in this algebra. Then he started to realize that these complicated transformations, which are all written in tense notation, are actually, if you put them in geometric algebra, they are mappings between real things like bivectors to bivectors or bivectors to vectors and things like this. And as soon as you see it in this way, it enables you to interpret things and then maybe move on. Oh, okay. And so for example, so Anthony and Steve Gohl, Chris Doran, and David Hessens are interested in a theory of gravity in flat space, which produces all. So their theory of gravity, you could understand if you understood the algebra, basically. Okay, gotcha. Gotcha. And so, as you were saying before, the reason why people aren't picking up geometric algebra is that you become kind of in a certain track and that you know what you know. But right now, what are people using for modern computer vision to do comparable work? So, computer vision is really massively advanced. Of course, yeah. So today, people are really now moving from geometry to machine learning. So you're using a little bit of geometry, but you are learning to segment things, recognize things by giving it lots and lots of images. But you still have lots of geometric problems. So we still have to extract things from images if we've got moving cameras and things like that. But we have, I suppose it's a case of geometric algebra won't really give you anything that you can't do conventionally. give you anything that you can't do conventionally. But what it might enable you to do is to see how to do that thing. So, for example, if I ask you how close is one line to another, I have a way of doing that in my algebra. I could sit down and write it in conventional. Oh, of course, yeah. But could I have actually thought of that conventionally? Probably not. Okay. Because I'm not clever enough. So, you know, I need a set of tools which makes sense to me, geometrically and physically. And I can then think know other people can of course think about how to extend that okay and so in your day-to-day research how are you then applying machine learning because many of your your phd students are working on exactly that okay so um it's almost impossible to avoid machine learning yeah no you can, but you can't avoid it. So I have two sort of strands. So some students are applying conventional machine learning techniques, conventional, you know, they change all the time, neural networks, recurrent neural networks, LSTMs, to classical data like medical time series data. And I don't know how you can use geometric algebra for that. Right. Okay. So, and, you know, doing image segmentation, et cetera. So classical image segmentation, well, you know, I'm not sure how you can get geometrical algebra into that but as soon as it comes to anything involving like a moving camera moving drone multiple moving cameras having streams of images you want to match things you want to triangulate etc then it is almost the only way i know how to do it okay gotcha so so it's that aspect of it and then can we extend it so can we then you know we know how how to parameterize in this algebra on my lines my planes etc can i learn them so can i learn these geometric objects? So we're keen on analyzing both sort of moving images, which we're going to extract, lines, planes, and also motion. So motion, can I actually parametrize my problem in terms of my geometric objects and learn them? Okay. And so for instance, like, you know, someone doing computer vision with a self-driving car, like, are they applying the same techniques that you're applying to get these lines, or what would they use? I think, no. So, you know, there's huge amounts of research. Yeah, yeah, of course. And who knows what they're doing. But primarily,'s um people are using if it's not like if it's not lidar right yeah you know it's single camera multiple camera lots of data yeah bayesian methods for segmentation following lines is easy you know it's not that's not matching them or trying to reconstruct them you're just kind of following them it's really recognizing um if it's a person if the road if it's a tree and and you've got multiple sensors so you know exactly where you are gps is right is really accurate these days um so no no yeah i think i i don't know well i mean so the question i'm kind of getting around to is like where are the other applications right so like you in in your instance like you're rotating in a camera you want to map something makes a lot of sense like and then you can move it around. But because you have the lines, you can recreate the shape. What are the other use cases? Well, I do think that its real use is the fact that it unifies. It's a unifying language. So if I know this, I can just work things out more easily. Instead of trying, I mean, if people have worked with computer vision, they will know that often things don't work. So instead of a rotation matrix R, they try R transpose. And instead of a translation vector T, they try R transpose T, and they mess around until it works because it's kind of confusing. Okay. You've got no such problem here.'s very straightforward now okay that's not that's not a good reason to use it if you're proficient enough with classical techniques but i i can go into fields like thin shell elasticity you know and um there is a student who is here at the moment doing this. That is quite an involved field. But if we put it in terms of, like, I have these rotors, I have a surface, I can stretch them, I can translate them, then it's just in the language of computer vision. It's not in differential geometry. It's not in anything else. It's a totally understandable um uh process right okay so you could you could see a world where then you know uh an artificial intelligence understands this and then can apply it anywhere and then you can then understand it i yeah yeah i think that's where strength lies yeah And in new physics. I think, you know, because it unifies lots of different quantum mechanics and relativity and, you know, it's not unifying quantum gravity yet, but you can see that it is a system whereby you might be able to think of different ways forward. Right. Okay. So it's actually a better tool. It's a better tool. It's a better tool. Okay. Because people are extremely clever. So they will find ways of doing things that are stunningly clever, but are complicated. Right. And so where do you see limits right now? I don't think it's not computational anymore because we're building up more and more tools. So I can give you a website and you can try it out and you won't have to install anything because it's an online you know python notebook so you can you can have a play with it so we are you know we are a community which is certainly moving forward um there still isn't there aren't a lot of us um so it's not taught it's not taught so you know teach my fourth year's image processing, but I don't teach them geometric algebra. Okay. And is there an interest there to learn, or they're just like, I don't know? When you don't know about it, you can't really be interested in it. Okay. So it's a – and students have no hang-ups. They learn it, and they think, great, you know, it's a it's a and students have no hang-ups they learn it and they think great you know it's another tool yeah yeah and use it okay so um it really it enables you i mean i have a lot of confidence that if you give me a paper on uh thin elasticity. It's going to be tough because there's tensors everywhere, and I've got frames and frames and frames and dual frames and things, but I can eventually understand it. So these different fields. In fact, there's a colleague, Alan MacGroby, who's using he was using a sort of form of it in structures. So there are fields. Electromagnetism is also, I should have mentioned this, is a field whereby you really get huge simplification. So I am fairly confident I can model electromagnetic fields and do maybe some new engineering things using this, if I had time. Okay. Well, we were talking about programming before we started recording at lunch and about going from MATLAB to Python, right? Have people tried to create a port? In other words, oh, you have this traditional equation, we can port it over, and then you can understand it and see the value. Has that happened yet? No. Okay. Not really, not really. I mean, there are, I mean, most of the code is enabling you to do things in a kind of transparent way, like I can wedge together two vectors or yeah i can conformal i can form my sphere visualize it yeah and i can do numerical i can do lots of numerical computations with it fast so we can now do it quickly but porting things is a kind of difficult one yeah like you're saying well you know here's my equations in terms of pauli spinners um what does it look like in geometric algebra well kind of looks the same except your spinners aren't spinners they're you know uh so it's a difficult that that's a very hard question to answer. Right, because it's not so simple as like, oh, this is how you call this function. It's not the same thing at all. No, not really. Okay, so this is sort of a weird random tangent, but before when we met, you were telling me that a couple years ago, someone posted on Hacker News one of your papers. Yeah. What was it about? How did all this happen? So it was an invited paper, the Millennium Edition, so it was 2000, of Philosophical Transactions in the Royal Society. So we wrote a paper which was telling, just saying how geometric algebra was a unifying language. And look at all these great things we can do in computer science, engineering, and physics. And this is the way the world works and this is, you know, you should do it. So it, you know, some citations and it sat there until, bizarrely, it was posted there and it was a friend of mine who reads these things texted me and said well your paper is number one read on this hacker news and I said well what's that you know is that good or is that bad I don't know so hard to know how it emerged and hard to know how many, I mean, were there some people who looked at that and now are in our geometric algebra community who, you know, sort of get interested and came along. Throughout the world now, there are groups. And, you know, in the 1990 1990 there were not many yeah there were little groups who were really keen on it um but now there are groups almost everywhere they're not big sure but um interesting did you did you read the comments when it went up there i did yeah i mean they range from wow this looks really cool, to this looks crazy, you know, and impossible to understand. I thought, oh, no, that doesn't, that wasn't the... We're not trying to communicate that. I know, we didn't want to say that. To, gosh, this looks as though it can do everything, you know, so they weren't very detailed. It was more people beaming in and saying um do we short things although i don't know whether i read them all uh that's the nature of the internet you have to comment quickly the post just falls off the front page and then your comments because of course yeah in the next five hours it was probably yeah uh gone right exactly sunk down to a hundred right but but um well what do the folks who are, are there naysayers? Is that a community? Sorry, what? Are there naysayers of geometric algebra? Oh, sorry. This is not going to be a thing. Yeah, I wouldn't say so. I mean, there are people who, there are lots of people who think, yeah, that looks interesting, but really I can do it anyway. And I have. I am the world's expert in Pauli matrices or whatever. people who think yeah that looks interesting but really i can do it anyway you know and i have i am i am the world's expert in you know powerly matrices or whatever what do i need to put my matrix in terms of a vector um and so you know people think in different ways um to them that is the way of doing it that's always been the way of doing it um so i don't think there are people who say oh this is complete rubbish there are just people who say well yeah but you know what's it going to get me okay um and i don't think people it's not the kind of thing where you could say it's wrong because it's not wrong right it's just a tool which depends whether you want to invest the time. Because you think about multiplying vectors together and things like this. It's anti-commutative. It's not a commutative algebra. So immediately you throw away everything you've learned as a kid and through school and through university. So it makes perfect sense once you're into it. But there's a little, you know, there's a little hump. There's a learning curve. There's a learning curve. You have to throw some things away. Yeah, and it's much easier for younger people to do that. Sure, that makes sense. Because they have no real prejudices. Right, okay. They say, yeah, it's another thing, you know. It's like machine learning. Oh, yeah. Another algorithm. I'll program it up now. Right. And so, yeah, I think probably there are people who do think, well, why should I bother? But I don't think they would say, no, it's a wrong thing to do. One shouldn't do that. One should use matrices. Okay. So in your educated opinion where do you see this really taking hold in the next i don't know like for thinking about it in the practical sense um so many people who are listening to yc podcasts are like entrepreneurs or engineers are studying um where do you see people applying things like this um so um clearly in the in the fields of um fundamental theoretical advances so you know like physics um or the aspects of physics that we're not quite sure about yeah that's the big um that's i where i see it will have some effect um because it enables you to think and it enables you to think in different ways um in engineering i think there are lots of fields and i don't know whether the is there a killer application where if i could do it everyone would say whoa this is the way to go. Right. I don't know. As I say, what I would like to see is that people had it in their toolbox. Yeah. Because, you know, there are lots of very, very clever people around who can cope with very hard sophisticated physics and maths there are a lot of people who are maybe not quite so clever and they need the right tools in order to do these complex things and i see it as actually this provides these people with a real you know a lot of people have a lot of geometric insight, but maybe not the mathematical sophistication. And I think this will certainly sort of give them a big advantage because it seems to me to be the way the world works. This, if it's a unifying language, it's what we should be writing our equations in. Okay. So I'm not sure that's answered your question no that's a great that's actually a great answer yeah i believe that and i like it a lot too um if you weren't working on this do you have thoughts on where you might apply your your energy well it's interesting because i have always had i'm i'm a runner so I've been a runner since I was a kid I I am absolutely convinced that even if you don't run you know as you get older you need to move and you need to keep your body moving independently. You need to make the muscles move independently. You need to keep healthy. And I probably would be doing something which tried to get everybody out and moving. And that was not what you were expecting. No, that's great. Yeah. But, you know, I look at people as they get older and life could be so much better for them if they kept mobile and they looked after their body. A slight obsession of mine. But anyway, yeah. Yeah, that's great. That's totally awesome. Yeah. I guess then my last question is if someone wants to learn more about this and actually start trying it out yeah uh where should they go well so lots of books available and i i people will probably be annoyed with me if i don't mention their books but the so the david hesson has three books space time algebra probably not the place to start new foundations of classical mechanics and geometric algebra um clifford algebra to geometric has three books, Space-Time Algebra, Probably Not the Place to Start, New Foundations of Classical Mechanics, and Geometric Algebra, Clifford Algebra to Geometric Calculus. Now they're great books. My husband Anthony and Chris Doran have a book, Geometric Algebra and Physicists. Leo Dorr, Stephen Mann, and Daniel Fontaine have a book, is Geometrical Geometry for Computer Scientists. Eduardo Barricano has books which are more focused on robotics. So there are lots of books out there, lots of review articles, lots of conference proceedings, lots of code now. So people, you can kind of get code for MATLAB, for C, for Python. We've been using now a package by an American guy called Alex Arsenevich who wrote a Clifford package, and we've been integrating it into – one of my students, Hugo, who you met, has created a web version. So the big problem with a lot of these things, you have to download the package. You've got the package. You've got to get the NumPy. You've got to get all these other things. You've got to get it all working. You've got to get it working. And if you're on Linux, it tends to be not to buy. If you're on Windows, it's like impossible yeah um not impossible but your average person would probably say you know what no but we we're working to try and get a web version so people can actually go on just try it out with some readme files and and a bit of graphics so you can see it so there's loads of stuff out there at the moment where can they find that if they want to maybe is it on your site or um it is hugo so hugo and alex have been working on this and i can give you the web address okay we can put it in the blog post yeah yeah because they're just releasing it to the world okay yeah perfect so it'd be good to have people test it out and say email back and say this doesn't work't work. All right. Thank you so much for your time. Okay. Been a pleasure.