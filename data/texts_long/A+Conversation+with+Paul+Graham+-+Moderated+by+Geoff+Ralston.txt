 Well, thank you for coming this morning. We are trying something a little bit different this startup school year. We are not just having our weekly two lectures, but we are having some conversations with notable people and I couldn't be happier to have one of the most notable startup people here. He'll get embarrassed when I say anything complimentary, so I'll try to avoid it. Paul Graham, my friend and the founder of Y Combinator back in 2005. And we're just going to talk and hopefully it won't be boring. Paul. Yes, Jeff. So you and I got to know each other, strangely, at a, it was kind of a startup at the time, Yahoo, back in the late 90s. 98. Yeah. Did you guys know he wrote Yahoo Mail? Some of it, yeah. Y Combinator has the people who wrote Yahoo Mail and Gmail. That is weird, right? Paul Buchheit, who actually has more of a claim on actually writing Gmail than I do have a claim on writing Yahoo Mail. I wrote some important parts of Yahoo Mail, but Paul was kind of by himself doing Gmail almost. And we were a little more intentional with Yahoo Mail and had a team creating something called Rocket Mail. But it is a little weird that both of us ended up at YC years later. But Paul was at Yahoo. I was at Yahoo because we created something called Rocket Mail and we were purchased in 97. But Paul's company was bought in 98. And so, you had this weird idea for a product, for something you thought people would want in the mid-90s, which had to do with like SaaS before SaaS was a thing. How did you come up with this idea for ViaWeb, the company that Yahoo bought? Okay, so what we made was something that is now called a web app. At the time, it was the first one. And that's why the company was called ViaWeb, because it worked via the web. The way I remember very vividly, we thought back then, everybody thought that writing software was identical with writing software that ran on the client. And worse still, for those of you who remember the mid-90s, the client meant Windows, right? We knew how to write software for Unix. We liked Unix. We did not know how to write software for Windows, but we knew enough to know that we did not want to learn. And so we were really, really highly motivated to figure out how to write software without having to write software without having to write software to run on Windows and so we thought to ourselves well maybe well you know the way I first thought of it actually was that you would have this you would have it was an online store builder right and I thought that you could you could send it updates by email that was I thought you could send it updates by email. That was, I thought you could send it updates by email, right? And it would change your website. And then I remember thinking, well, if you can. Posterous for shopping carts or whatever. If you can use SMTP, why not HTTP, to update your website? Whoa, the software could run on the server and you could control it by clicking on links in the browser. Would that even work, right? But I remember I was like sleeping on a mattress on the floor in Robert's spare bedroom. And I remember I sat up in bed when I thought of this, like the letter L, right? It was actually like one of those scenes in a movie. I'm like, oh my God, we could avoid having to write software on Windows at all. We never, at that point, we were never thinking about the benefits of web apps, which are great as it turned out. We were just thinking, we could actually do this without ever having to learn Windows. So it was all about avoiding Windows. It didn't matter that you could deploy then without having to learn windows avoiding windows it didn't matter that like you could deploy then without having to ship software to none of that no no just just avoiding windows we could actually write thank you bill gates never have to learn windows um because like the netscape people had already gone through the pain of making netscape work on windows right and we could just like that was like a hole onto windows you know and people could get through the hole and click on links in the browser and control the software. And so we immediately, we weren't even sure this would work because it was so weird. But we immediately sat down and tried to write this really, really clunky website builder that worked by clicking on links. It was terrible, but it did actually work. It could make a website. And I'm like, holy shit, this actually works. Yeah, it's weird that an innovative idea like that just sort of comes out of nowhere. I mean, it doesn't seem innovative now because all websites work that way, but the first one, that's going from zero to one. It's very common. It's very common for ideas. In retrospect, they seem obvious, and you sort of, historians who weren't there, sort of straighten out all the kinks in the development, and it just seems like, oh, they had this, you know, it's like this idea, I always hate it when people represent startup ideas as light bulbs, you know, because as well as being the most cliched metaphor imaginable it's also false you don't just like have this idea and then realize it right no it's more like you have this sort of inkling that something you could do something that somebody else hasn't done before and it's probably a bad idea but you're too lazy to learn windows and so you want to do it that way, right? And so, or like who would, or like Zuck starting Facebook, you know, just like, let's see what happens, right? Way implausible if this would ever be a startup. Which is good for you all. Hopefully some of your ideas seem really implausible. Right? I love it when ideas seem implausible in the right way. Over the years, I mean, I already had, just from being a hacker, a sort of a good nose for this sort of thing, but it has become refined over all these years of dealing with startups. And when people have, I was talking to some people yesterday, and they were talking about two possible things they could do. And one of them seemed so it seemed like naughty not like it was it was it was sort of maltreating anyone it was just sort of taking advantage of something that seemed like it shouldn't even be possible right like like making the software run on the server and just like never making software that seemed to the users to run on their computer but actually was just talking to them through the browser, that kind of naughtiness. And I said, like, pick that one because it seems so outrageous. It seems so hilarious. It seems like there's all these ways we have talking about what's a good idea. And when you try to match up ideas with them, it's always sort of a complicated, you know, match up ideas with them, it's always sort of a complicated, you know, it's like, is this idea naughty or is it, is it, is it, is it like not quite intuitive or not so obvious? And it's really always hard to, to take any particular idea and say, is that the one with potential? Well, you can't tell. In fact, that's another thing. It's not just that the outcomes of startups are hard to predict. I think to some degree they're actually indeterminate. There's a huge amount of luck involved. And so I think even if Y Combinator were as good at picking startups as you could possibly get, I mean, in fact, you have like 150 startups per batch of which maybe five will become giant or something like that hopefully five that would be good yeah well depends on your definition of giant right it's a power law distribution more like if for some definitions of giant one of it one every five batches we'll take if five or any definition of giant we'll be happy so what was i saying talking about i like talking about the indeterminacy of ideas. Even if you were able to pick perfectly, that doesn't mean you could get the batches down to only five startups. You probably have to pick 20, I think, even if you were perfect. So it's hard to know. There's this strange mix of extraordinary hard work, an idea that actually has something to it but is not obvious. It's hard for founders to know. You don't know yourselves. You don't know yourselves. I mean, you don't know comma yourselves. Not that you don't know yourselves, although that's also true. And that's why it's good to be a hacker, because if you're some business person, you know, and you think I am going to work on business opportunities. Right. Well, I don't know if this is a business opportunity, so I'm not going to work on it. Whereas someone who's a hacker who's just doing things for the fun of it or because they don't like windows. Yeah. Laz laziness too. Laziness is actually, in some cases, really helpful. Some kinds of laziness. Some kinds of laziness. I'm a little scared about this meme escaping into the wild. Right. Can't you just see? Can't you just see? It's true. They said laziness is good, he said from the sofa, as he ate another donut you know it would be better if people thought laziness wasn't good because the laziness that kind of that people do that's good they do it they would do anyway even if they thought it's weird yeah well using laziness not in the normal sense of laziness right because if you're late there's there's no such thing as a lazy founder that builds a big company there's but but a certain sort of it's sort of a reticence to do something for some reason we're calling it laziness but it's not really that seem like it's avoidish schleps yeah it makes you you know if you have a natural hatred for gratuitouslaps like um then what that that produces elegant solutions so so in 1995 ish i was like trying every single idea i could possibly try to start some internet business and i was doing it all by myself which was awful and and what i didn't know how to do was to find people to do it with and i kind of ran into a bunch of people and I had no clue whether they would be good people to start companies with. And I was thinking about your experience. You said you were like sleeping on Robert's flow. You started, you started via web with two fascinating people. Robert Maxwell and Trevor Blackwell who later Robert Morris. Robert Morris and Trevor Blackwell. Robert Maxwell. Robert Morris and Trevor Blackwell who later... Robert Morris. Robert Morris and Trevor Blackwell. Robert Maxwell. Robert Morris and Trevor Blackwell. And that was a weird mix of names. Anyway, how did you pick them as co-founders? How did that happen? And when did you decide they would be good co-founders? Were they good co-founders? All right. Yeah. Right? They were extremely... It worked. They were extremely truculent co-founders who all right so yeah right they were extremely worked they were extremely truculent co-founders who were very good at programming um but i remember robert was like not into the whole startup thing the entire way like whenever he was on the board and whenever we got whenever you get an acquisition offer the board has to at least consider it right and so you would get these crap lowball acquisition offers. We'll give you like $2 million in our stock, right? And Robert was like, yes! No, no, Robert would say, we would vote on it, and Robert would always say, well, you know, I have to be honest here, this would at least mean we could stop working on this thing, and so. Yes, I would take this deal, right? I made a deal with Robert that if he ever made a million dollars out of out of VioWeb, he would get an earring. Robert is not the kind of guy who would enjoy having an earring, let me tell you. And so as soon as the deal closed, me and Trevor frog marched him to the place in Harvard Square where people get their things pierced. Never heard this before. And we got him an earring. There's photographs on the internet of Robert Morris with an earring. I bet he didn't keep it. Not for long. We should have specified that. I never thought to specify. You never thought you'd actually get the million dollars. No, no, I really actually did. But I thought he would wear it for a bit longer. When his fiancee saw it she fell on the floor why did you choose why did I choose founders okay so I chose Robert because he was my co-conspirator in everything and I don't mean I was always I was always the lead and he was just the co-conspirator when he did things I would be his co-conspirator too. Like the internet worm of 1988. Do you guys know Robert Morris is pretty famous all on his own? Yeah. He invented buffer overflow. And I remember when he told me about it, and I said, wow, what a cool idea. You should totally do that. He was the first famous hacker who really got in trouble, I think. Yeah. Really in trouble. It's true. He was the first famous hacker who really got in trouble, I think. Yeah. Really in trouble. He was the way, it's true. He was the first person to be prosecuted under the Computer Fraud and Abuse Act of 1986. So if you're looking for a co-founder, look at people who've been prosecuted because it works. Yeah, he is actually a convicted felon. The funny thing was. This is another meme we don't necessarily want to escape out there. That convicted felons are what you want to look for as co-founders. If they're convicted for that. It was funny because the FBI, like law enforcement kind of does things by the book, right? Like imagination is a big thing in like Sherlock Holmes stories, but not in actual everyday law enforcement. And so they have these, the FBI agent told me, they have these motives they look for, sex, drugs, money, revenge, right? And so Robert did it out of curiosity, and that's just like, it was just not on the list, right? They really had a hard time figuring out what the hell was going on. I think even within the government, there were lots of figuring out what the hell was going on. I think even within the government, there were lots of people who never understood what was going on. So back to Robert and Trevor, who... Oh, so why did I pick Robert and Trevor? Yeah. So Robert, Robert, Robert I picked because I would do everything with him, right? We had all these schemes. And so you knew you could work with him. I knew I could work with him and I knew he was really good. He was a really good programmer. He could program as fast as he could type. Of course, this was in C, which is a lot of very verbose language. But he could program as fast as he could type. He was amazing. If he didn't like what the operating system would do, he would edit the source and recompile it, and then it would do what he wanted. So, truculence aside, he was exceptional. Like, when he showed up at Harvard, undergrads were only allowed to have accounts on, like, the official undergrad computing system off in the Science Center. And there were all these real computers in the CS department in the Aiken lab. And so they wouldn't give him an account there. And so he just walked up to a machine, you know, switched it to single user with him as the super user, gave himself an account and then switched it back. He was curious. Yeah. Well, he also wanted accounts on the right machines. He got kicked. This whole thing will be about Robert. Robert's such an interesting character. I shouldn't talk about this. He may be more interesting than anything else we can talk about. He got kicked out of Harvard as an undergrad for reconnecting Harvard to the Internet. Harvard had been one of the early Internet nodes. Does that sound funny to get in trouble for disconnecting a school from the internet? No, connecting it. I mean, for connecting a school to the internet? Okay. Where were we? We're still trying to figure out why the heck you chose Robert and Trevor. Oh, I should tell you, though, about how he reconnected. Tell us about the disconnecting. I'll make it really fast. No, no, it's okay. So we have all day. We don't, do we? No, we don't. Okay, how long do we have? We have enough time. We have the same watch. More or less. Robert. Okay, so. Harvard Connected was one of the very early internet nodes and by the time Robert arrived as an undergrad the connection had died from bit decay and like no one noticed that's how unimportant the internet was back then or rather ARPANET as it was then called barely an internet and so RTM spent one whole semester working on getting Harvard reconnected to the internet. RTM is Roberts. Yes, yes, Robert. And he didn't do any work for any of his classes, and he got such bad grades, he got kicked out for a year. So we actually used that later as a recruiting technique because we knew that, because there might be other people who got kicked out for spending all their time on some project. And so we actually went around Harvard and posted up this poster saying, did you get kicked out for working on some project of your own? We'd like to hire you. I think there's probably something. We got a really good programmer that way. There's probably something deep in it. He made tons of money off of options because we got acquired during the year, right? And he enjoyed life out of school so much, I don't think he went back until he was 25. All right, so why Trevor? Why Trevor? So you picked Robert. Robert was the guy you did everything with, and he was great. Okay, so after we'd been doing... But by the way, when you picked Robert, did you know he was going to be a pain in the ass in so many ways? Or was that a surprise to you picked Robert, did you know he was going to be a pain in the ass in so many ways? Or was that a surprise to you? Well, I knew he was a pain in the ass. I didn't know the company was going to be so hard and that would bring out so much pain in the ass. So you didn't realize how hard startups were? Let me tell you, the way we got Trevor was very indicative. So a month in, we'd been working on this company for a month. And Robert rebels. And he says, we've been working on this company for a whole month and it's still not done. Like, what have you gotten me into? Right. And I thought, hmm, maybe we need more programmers. So I said, all right, Robert, who's the smartest person you know in grad school? And he said, Trevor. And I said, Trevor? Trevor's one of those people who's a lot smarter than he seems. But Trevor is actually super smart. And so we went and recruited Trevor. And he said, oh, OK. That's a really good Trevor invitation. That almost sounded Canadian. Trevor has two modes, oh, okay, and oh, I'm sorry, which is what he does when he does something that breaks everything, which was very common, very common. And so we got Trevor. I recruited Trevor to work on the thing. He does nothing for two weeks, at least as far as I can tell. He just disappears. And then two weeks later, he says, come into my office. And he's rewritten all our goddamn software in small talk. You know? Is that typical? Yes. So I said, all right, Trevor. We're not using that. But do this instead. Right? And so Trevor was like the super productive hacking monster. But you didn't know that in advance. You just trusted Robert when Robert told you he was really smart. Well, if Robert said he was the smartest, he's definitely the smartest. But there's kind of a deep lesson in that and how you pick, whether it's employees or co-founders, it's you find someone you trust and then find someone they trust. Yeah, although here's an interesting point. That works better for some qualities than others. Like intelligence, intelligent people can judge other intelligent people, but trustworthy people cannot judge other trustworthy people. In fact, trustworthy people are often fooled cannot judge other trustworthy people in fact trustworthy people are often fooled by untrustworthy people so like kate corto is like our architect who did this is like super trustworthy but she's always fooled by these like sneaky schemers you know who take advantage of her so i guess that means you take recommendations from people but then you have to add your own no no no you can totally trust like if robert says someone's smart and i disagree i think i must be wrong right yeah but you need to it just works for some qualities better than others but you want them to be trustworthy when they join you as a co-founder so you have to add that judgment for trustworthiness yes this whole thing of like networking doesn't work it doesn't you have to have someone who can judge whether people are trustworthy which i'm i am not even good at i am not good at the person who does that for y combinator is jessica the social radar um the secret power behind everything so you did hire people via web too yes what did you learn about hiring in your like your first startup like so you learned that they they if they were getting lousy grades because they were working on a project, that seemed good, which is kind of counterintuitive. A lot of things we seem to do at YC end up being counterintuitive. Startups in general are very, very counterintuitive. And so that's actually why YC exists. If it was obvious what to do in starting a startup, YC couldn't really add much by teaching people how to do it, right? And so I often say, I often, in fact, practically every day if I do office hours, I'm reminded of this, that what Y Combinator does is tell founders things that they ignore. Right. So we tell people don't hire too fast and then they go off and hire too fast and then they come back later and say, oh, I wish we'd listened. But like all the things we tell people, we tell people the counterintuitive stuff, not the obvious stuff. And then what counterintuitive means is it sounds wrong. And so they go with their gut and do the wrong thing instead and then hopefully catch the mistake in time. Why is it that startups are so counterintuitive? You know, that would be very much writing an essay about, that would be worth writing an essay about why startups are so counterintuitive. I don't know. I don't know. I don't know. I could come up with some theories, but I have a feeling the answer is so interestingly complicated, I would be unlikely to come up with one. I mean, it's really interesting. We were just talking about one of the things that you did write an essay about, which is somewhat counterintuitive. When you start a startup and you're like, okay, now I'm going to grow. And then you write a whole bunch of stuff, like you're writing software that helps you grow and and you wrote a whole essay that says don't do that do things that don't scale in the beginning yeah do things that don't scale because growth is maybe you can start by saying what it means to do things that don't scale because i don't know if you guys have read this essay you have not all read i'm sure you've all read all of Paul's essay, but this is actually very important because most of you all have early startups. And when you do an early startup, it's become our mantra YC. And I've seen it again and again. You should not try to do too much in the beginning. You should do things that don't scale. Well, what doing things that don't scale means specifically is doing things in a sort of handmade artisanal painstaking way um that you feel like yeah it would be great if you could do things that way forever but you you're in the back of your mind you think to yourself well there's no way we could keep doing this and become giant right and what do things that don't scale means is do those things early on anyway because you know if you don't do them you'll never be big and so you got nothing to lose um and also you learn a lot from it you learn a lot and so i discovered a lot of these things that we teach uh startups at y combinator or you teach startups at y combinator i retired. I don't know if you know that. But a lot of things you guys teach startups are things that I hit myself and didn't realize that they were actually common startup lessons. So one of them is doing things very manually for your early customers. Like it's so important to get early customers that if you have to do a ton of manual stuff, that's okay. You'll learn a lot from it. Did you guys do manual stuff? Yes. Oh, yes. Totally. And we thought, oh, we're doing it wrong. This is so lame. And in fact, it was exactly the right thing. We made an online store builder. You could build a store on the internet and sell stuff. And we would go to would-be customers and say, would you like to use our easy online store builder? And they would say, no. And we would say, but you want an online store, right? And they would say, yeah. And they would say, well, what if we use, we would say, what if we used our software for you to make an online store and then you could have it would that be good and they'd say all right um and so we'd like ah we can't get anyone to use our software but at least they're willing to let us use it for them um and it seemed it seemed so lame i learned so much shit about like direct marketing as it turns out it's called we were members of the dma the direct marketing association that's what you know in in every business card carrying member of the dma we were we were um in every business they have a name for the business that's not the name outsiders call it like fast food no no no they don't call it that they call it fast casual within the industry right um and in in the business, they used to call the direct marketing industry, right? So that's what the DMA meant back in those days, the catalog business. We signed up for every catalog. You know those catalogs you get in the mail? We would just like write and ask for more. We had this like bookshelf full of every catalog ever. Yeah, it seems like almost like if you were building a new search engine, what you ought to do is have your box out there and then just take all the searches manually and like get results and throw them out there and see what happens. I'm trying to think what we did for mail that was manual in the beginning. We had sort of a manual ad server. Like we didn't really have ad serving technology. We just throw ad ad. I wrote it, so it wasn't really good. And we would just throw them in there. There's a deep lesson there for people, though. What happens if you think you know the solution and you build lots of stuff for it, you're going to be wrong because you just don't know it. Having to use our software myself made it much better. Because I would be using our software to make someone's website. And I was also the guy who wrote the site builder. And so I would be using it and think to myself, this is inconvenient. In the middle of building their site, I would change the software. And I mean ship as in like MV. And that's the great thing about server-based software. Ship is the Unix MV command. So, well, no, CP. I would want to keep a copy of the source so I could keep editing it. But I would change the software in the middle of using it and then go back to working on their website and boy did that make that, that made the software much better that I had to use it. Yeah. So, so picking co-founders, you want to pick the best people who you can somehow believe are trustworthy. It's probably helpful for a lot of people. I think a lot of people taking the class are sole founders now. Yeah. Why is it that being a sole founder is so difficult? Wow. There's so many different reasons. I think the hardest part is morale. There's no one, there's like, if you have multiple people, they keep one another going when things are going badly and there's no one to cheer you up. That's what was hard for me. I remember 95, I'd be like, I know this internet thing is going to be real, but damn. Oh, so you were a sole founder? Yeah. Yeah. That's why his hair is grayer than mine. Yeah, like being a sole founder is hard. Like it's hard because there's a million reasons why what you're doing isn't going to work, and mostly you're right. So it's easy to convince yourself to... Paul used to say this, and I always remember, he used to say, look, you have two choices as a founder. Do you remember what you would say after that? Well, there are so many different cases. Versions of this. Well, he would say you could either quit or get rich. Yeah. Die or get rich. Like the company is a lot of versions. That's what happens with startups. Mostly the company either dies or it succeeds. Something works. And if it succeeds, you get rich. And, you know, getting rich can mean, you know, you have a nice little business where you're the boss and you have 20 or 50 employees or it could mean you're Airbnb, right? They're both good outcomes. Not as good for your investors necessarily, but for you, they're really good. And doing things that don't scale, that's how, you know, and internalizing what that really means. I was thinking about, you know, one of the, it's the sort of things that don't scale that we talk about at YC all the time. We say you're supposed to, for success, you talk to users and write code. You talk, and if you think about it, talking to users, especially as sort of the founder, doesn't really scale very well. But that's what it forces you to do if you have to do everything that doesn't scale. It forces you to learn. Right. In the beginning, you only have 10 customers. You want to grow 20%. You want to grow 10% next week. 10% a week is an ambitious goal. You only got to get one more customer. You can go out and do that very manually, right? And then next week, you have 11 customers. You have to get 1.1 customers, right? Which is basically one, right? You just keep going out there and doing things manually. And as long as your growth rate is good, it doesn't matter how small the number is because a constant growth rate means exponential growth. And that means the base number will soon take care of itself. I was kind of thinking about what makes companies good, what makes companies fail and I was thinking about maybe how we could talk a little bit about some of those aspects of how people can kind of figure out how they're doing here. We have thousands of companies out in startup school land trying to figure out what to do next and whether they're doing the right thing and whether they're failing and whether they're on the right path. What makes companies fail most of the time is poor execution by the founders, right? We often talk to startups who are worried about competitors. And one advantage of YC having funded so many companies is you have a really large data set. And like, how many companies have been killed by competitors, one? More than one? Like out of 1900, right? So I tell startups that basically you have the same protection against competitors that light aircraft have against crashing into other light aircraft when flying through clouds. You know what the protection is? Space is large. Those little Cessnas don't have any radar in them you know you can't see in clouds it's this it's it this falls under the rubric of counterintuitive advice because one of the things that happens all the time is people come up to me and say oh my god there's another new company what should I you know that's in exactly my space what should I do right and it's sort of like if you're running the 100 meters, right, and suddenly there appears another lane with another runner in it, what should you do? Run as fast as you can, just like you presumably were, right? If they're better than you, they'll win. And if not, then you'll win. And that's a good reminder. Could everyone please silence your phones if you haven't already? Yeah. What else? One of the things we do a lot is try to judge, right? Companies and founders. Pick who's going to succeed. And you guys are doing the same thing you know except you're trying to pick yourselves hopefully what what what is it that that makes startups succeed that makes startups succeed well you have to start with um a good founding team ideally not just one person that's my question you can do it with one person. Well, I couldn't. I couldn't. I ended up having to join other people. I actually think the vast majority. That was not rocket mail that you were saying. No, there's no way. I couldn't do it. I'm not built that way. I think most people aren't built that way. That's my questions about Robert and Trevor. It aren't built that way. That's my questions about Robert and Trevor that, you know, it's just so difficult. I would not try and start a startup with just myself as the founder. I don't think I could do it. Yeah, it's lonely enough anyway. You think you can, but I couldn't. So, you need a good, solid founding team who know one another well and who can work together. Just like, pause there. Like, know one another well and who can work together just like pause there like knowing one another well why does that even matter because um what happens in a startup um will shake uh your relationship if there's any sort of flakiness or uncertainty or disloyalty or whatever like lingering in there it will emerge under the stresses of a startup. Yeah. It's like a marriage, only harder. You spend more time with that person. There's other differences. There's... Potentially, yeah. Okay, so you get a good founding team. You get someone who you can stand stress with. So there's two categories of stuff. There's two categories of answers we could give here. Like there's the answer you give to investors about how to pick startups. And then there's like only a subset of that is useful to founders, right? So like if, you know, you could tell investors, you want to pick smart people, right? But founders are as smart as they are if they've already, what can we tell them, get smarter, right? And actually it turns out it's not that important to be smart. It's much, much more important to be determined. If you imagine this hypothetical person who's like 100, 100 out of 100 for smart and 100 out of 100 for determination, right? And then you start taking away determination. You know, it doesn't take very long before you have this sort of ineffectual but brilliant person. Whereas if you take someone who's like super, super determined and you start taking away smartness bit by bit I mean eventually you get to some guy who owns a lot of taxi medallions but he's still rich right or like a trash hauling business and like that but like you can take away a lot of smart yeah you have to take a lot of smart and add and take away a bunch of ethics at the same time and then you get that guy, right? He can be president. Yeah. I've been thinking about like... Who thought that Trump would actually teach an important lesson? Yeah, for startups. It's all about determination. I was thinking about these axes we think about. And those are two, like the intelligence axis and the determination axis. And obviously, if you were really intelligent, really determined, that's awesome. Oh, by the way, only one person has to be super determined. Right. Right? So like, you know, you can have one person who really wants to start the company and one person. You and Robert. Right, exactly. Who after a month is like, what? We're still working on this? That depends on this tight bond where you can drag that person along with you. Otherwise, they'll go away. But I was thinking there's actually another axis, which is you have to have the ability somewhere on your team to project, to think up, because your idea is going to suck and then it'll suck less and less. And so you have to have the ability to think, where should we like to navigate? Like you have to have some sort of creativity that allows you to like make the right choices. No, no. Actually, you might not have to be that creative. If you care enough about users, you can just follow what will make users happy the way a scientist follows the truth. And eventually, without much thinking on your part, the need to grow will give you this product idea that's actually the product, that's the result of evolution. So maybe you're either sort of Steve Jobs and can intuit what customers need, or you just have to have the skill of actually talking to customers and understanding what they're saying, which isn't always obvious. Well, you know, Steve Jobs' trick was he satisfied users too, except he was the user. It's like, I don't want to have any phone jack anymore, so no more phone jacks for anybody, right? And maybe he was just lucky that his desires were generic enough that it was true for everybody. Yeah, yeah, yeah. He was living in the future. Yeah. Like he didn't really like the internet except for reading the New York Times, so he never really got that right. Interesting. You worked. Didn't you work? You worked at Apple at one point after you got bought. I did. For six months. What was it like? What was Steve like? Could you tell from where you were in Apple what Steve was like? Yeah. I got to talk to him a few times. He's different. Tell us. tell us how are there useful lessons you can learn from him or is he a one-off um i wouldn't presume i only met with him a handful of times and i wouldn't presume to know too much about him yeah you had a lot of indirect evidence and stories and stuff like that yeah like do you ever see founders at YC? You think to yourself, ooh, this is like Steve Jobs. Yeah. I don't think we'd fund a Steve Jobs at YC. Well, that's not good. Yeah. And the reason is, especially when Steve Jobs was starting off, he was an asshole. Oh, I think actually you would fund him because Steve Jobs would make you fund him. Maybe. I think actually you would fund him because Steve Jobs would make you fund him. Maybe. Right? Maybe. We try to avoid people who seem like they're assholes. And I think, like, you know, you wrote a whole essay on being nice. Yeah. The Ronco principle, right? There's a couple. A couple. One is about that. Yeah, being nice. There's also one called Be Good. Be Good, right. And I don't think he would have passed the test, especially when he was younger. I worry about that because it's true that it's usually good to be nice and friendly and benevolent. He wasn't. Maybe if YC had caught him early. We could have helped. Maybe. Maybe that's part of what made him successful in the early. We could have helped. Maybe. Maybe that was part of... Maybe. Maybe that's part of what made him successful in the beginning. I don't know. I don't know. I don't know. It worked for Donald Trump. Donald Trump. Or did it? That's a different kind of business. That's a bad example, right? Yeah. This is another meme we should avoid. No In business, determination matters more, but business is not identical with startups. I want to leave these guys some time to ask questions, but what are they going to get wrong? What mistakes will these people make that maybe hearing them might help? It probably won't because you won't listen, but what you will get wrong is that you will not pay enough attention to users. You will make up some idea in your own head that you will call your vision. And then you will spend a lot of time thinking about your vision in a cafe by yourself. And write, build some elaborate thing without going and talking to users because that's doing sales, which is a pain in the ass. And they might say no. And you'd be way better off finding someone, anyone who has a problem that they will pay you to fix and fixing it and then seeing if you can find more people like that best case is if you yourself have the problem right but like you will not ship fast enough because you don't want to face the you you're embarrassed to ship something unfinished and you don't want to face the the the likely feedback that you will get from shipping it's humbling and humiliating when they tell you how shitty what you built actually is, right? But that's the only way you get it better. Yeah. So you will shrink from contact with the real world or contact with your users. That's the mistake you will make. Yeah, there's a Paul Grahamism in there which is all around launching fast, launching before you're ready. I sometimes tell people the story of – It's Reid Hoffman actually who harped on that one early, not me. I think he said if you're not embarrassed with what you launched, then you launched too late. I remember when I was joining Y Combinator and at the same time, this is not necessarily a good idea, launching Imagine K-12, this ed tech version of YC. And I came in to talk to Paul and he's like, so how's it going with Imagine K-12? Because he helped out a lot. And I said, oh, it's going well. I think it was probably called something else at that point. Well, no, no, no, no. By then you'd already... He actually gave us the name of Magic 812. And so it was called Magic 812. And he's like, when are you going to launch? And I was like, well, we're working on our PR plan. And we're finishing the software. So this was like, you know, we're going to have a summer batch. And this was probably in February or something. And I said, so we had like, you know, probably in like six weeks. He said, why don't you just launch? Why don't you just launch now? And I was like, damn, he just did it to me. And we did. We launched, we launched like within a week we launched. And so that is a mistake you'll make. You'll wait too long. You'll, you'll, you'll be embarrassed. You'll. We launched YCE probably in less than a week of having the idea. Of course, launching it was merely posting a website, and we didn't have any software in the beginning. We just had this ASCII form that people would fill out and reply to us by email. The first couple batches, reply to us by email. The first couple batches, the applications were by email. We would print them out and pass them around amongst the partners and we would all write grades on the top, like we were grading papers. And then we would sort this heap of papers and that was the application process. Talking about doing things that don't scale. Try to do that with thousands of applications now, it would be harder. So we have lots of software that does that, because eventually you scale. Eventually you build software. When you learn what software you ought to be building. It'd be fun to spend a lot of time, more time talking about how YC got got started but but I think rather than that let's sound you have left we can probably go to around 12 and videos that get too long or like no one wants to watch anyway so so we've already been going for about 40 minutes or so so let's open it up to any questions you guys might have. Yeah. My question is about hiring co-founders. So in the complex pieces, most likely you have a lot of very successful friends that might want to join you and you can work with them and do something. But you're risking losing basically that person. If you want to hire someone from the street who's a co-founder and technically savvy, then you might risk breaking the company later. So it's kind of like sometimes it's more risk. Are you saying that if you recruit your co-founders or your friends as co-founders, you might lose them as friends? I don't think that's a big danger. I don't think you have to worry about that. So the question was, should I have my friends be co-founders and then maybe risk losing them as friends? Or should I just take someone off the street where I don't have the risk of losing them as friends, but they might break my company? Was that your question? Did I get that right? I already answered it, dude. Come on. I just wanted to make sure they heard the question too, just because I repeated the question. Yes, go ahead. How do you deal with different, so I guess it's a two-part question. One is how do you deal with different commitment levels between co-founders? And also, if you had to fire a co-founder, how would you go about it? How do you deal with different commitment levels of co-founders? And if you do have to fire a co-founder, what should you do? Okay, so the way you deal with different commitment levels is you ask yourself, would I rather have 30% of this person or 100% of some other person? And in my case, I would rather have like 10% of Robert Morris's brain than 100% of almost anybody else's. So it was an easy decision. How do you fire co-founders? In Y Combinator, the answer is you ask Carolyn Levy. Y Combinator, there's so much experience with dealing with crap like firing co-founders. And you just go and talk to them and they say, here, you do this and this right um and it's probably online too so you could google it really has yc published how to fire well we've we've we have published we've actually if you look at some of the talks carolyn has given and kirstie i'm pretty sure they've covered that particular issue one way you deal with it by the, is making sure that someone has a little bit more stock. It's usually better to have somewhat equal shares, but not completely equal. And if one person has 51% and the other person has 49%, then they can control. You at least don't get deadlocked. Yes. Yeah. So when you talk about launch, is launching to like private beta or a couple of people good enough or do you have to just launch it to public? So what does launch really mean? It means you have actually, okay, so the question is, is launching in a private beta to a few people good enough or you'd have to launch to the general public? I will take launching in just a private beta to a couple people because that's closer to the that's closer to full launch than like just sitting thinking of your idea in a cafe next yes are you asking about icos yeah what do you think about icos paul or a bunch of projects have maybe overrides or basically the... Are you asking about ICOs? Yeah, what do you think about ICOs, Paul? I know nothing about this world. I've heard there's a huge amount of crypto money floating around. So if there's money floating around, it's often a good idea for startups to try and get it. Beyond that, I don't know. But I will say, like, one of the things we've seen a lot at Y Combinator is it's not always right to raise too much money. And even if you don't, like, the ICO thing... In fact, by definition of two, it's always wrong. Yeah. The, I'll raise a lot of money. And the thing about, there's a couple of reasons for that. One, you dilute more than you necessarily need to. But the other reason is that money just sitting there has sort of a gravitational effect. It makes your organization fat. And it makes you do stupid things. So it's like there's companies that have raised a billion dollars on ICOs and I don't know if they'll ever have a real company. Like there's companies that have raised a billion dollars on ICOs and I don't know if they'll ever have a real company. Where you get like, you get a bunch of LPs and raise a billion dollars and then you just hire so many more people than you actually need. Right. It's usually not accurate though. It's usually not accurate. That's what I was saying. That's the difference with an ICO. I get it. But just having a billion dollars when you only barely have an idea. It's not necessarily, like, you know, Magic Leap raised $2.3 billion and they seem to have almost nothing. By the way, that is the trick for getting your question answered. I learned that a long time ago. You raise your hand as people are finishing the preceding question. And I see that guy's hand over there. He knows the trick. Go ahead, what is it? What are your best tips for a great user interview? My best tips for a great user interview? Well, you want to figure out not just what they think is wrong, but what's actually wrong, like what's missing in their life, right? So just start talking to them. Like, say, what would you like to do? What would you like to be able to do that you can't? And they might just, you know, they'll tend to give you an answer that's like a subset, right? Like, you know, if you were asking someone about email, they'd like to say, I like, you know, it's really important to me to be able to mark emails as unread, right? And I'm like, what does it mean, unread? That whole unread thing is a sign that the whole inbox is being misused. It's what's really going on is it's a to-do list, you know, and that's why you have to mark items as unread so they stay on your to-do list. And so you could, so you start asking them with what's wrong, and then you try and figure out what they really mean But they're really getting at which they themselves might not know, you know And then you start asking them. So what if you could do such-and-such? What if you could do such-and-such right so start by asking them questions about their life and then get hypothetical on them Okay, we should ask someone on this side You've taken over so you just keep calling them. You're doing great. You pick, Gil. Go ahead. Right there in the way corner. This is actually kind of off one of the questions that somebody else asked earlier. So you talked about launching early, right? How do you justify the financial risk in turbulence because of launching a shady product? How do you justify the financial risk of launching a shitty product? Or an early-stage product or something half-baked, right? Okay, so the risk of launching early is not as great as the risk of launching late. It's not like there's only risk on one side, right? There's a risk of launching late, too. So you've got to have a rule of thumb about when to launch. And my rule of thumb, the way I, like, I have this phrase for it that didn't become as sticky as minimum viable product because it describes what the minimum viable product has. But it's a quantum of utility, right? But it's a quantum of utility, right? Launch as soon as you have a quantum of utility, which means as soon as there's one person in the world who is glad that you launched because now they can do something that they couldn't do. If you have something that if you launched it, no one would be happy, then you're not ready to launch, right? As soon as there's at least somebody out there who would say, oh, here's this thing I can use because I can do X, and before that I couldn't do it, then you should launch. As soon as you have a quantum of utility. It sounds like there's some utility function. Like if it makes too many people happy and like one person happy and like a hundred really unhappy, maybe it's not ready. But if you you know Paul Buchheit always says if you have ten people who really love your product that's a good place to be yeah all you need is if you that's if there's ten people who are super excited totally totally launch and like and nobody else cares that is perfectly fine that's great. Okay. Yes? Can you talk about the difference between the, what would you always say, build what customers want versus build what customers need? So most of the time, the want may be very short-sighted, whereas the need may be deeper or want may have some unintended consequences. So how do you deal with building what they really need versus what they really want? Well, the danger of building... Okay, so the question is how do you decide between building what people need and building what people want, right? Well, the problem is what you really want to be doing is build something people will choose to use or buy or become your user or something like that. And so here's a counterexam example to the whole need versus want thing. What people need is healthy food. What people buy is unhealthy food. So if you're a business, which one do you want to do? Right? I mean, yeah, ideally you want to make healthy food that also tastes good, right? But really, you can't push this you can't you can't push this too far you can't push this too far I mean I myself would not start some company making junk food or something like that but if you are making food don't like or something where need and want are very different be real careful about picking need you know or you'll go out and you know your goal will be to cleanse the world of sin or something like that it's easy to delude yourself as a founder to think you're like you yeah the other danger is what they need is what you think they what you're implicitly talking about is what you think they need cleanse the world of your definition of sin, right? Yes. Yeah. My name is Mr. Damborka. I'm a smart variable technologist. My question is, when I'm working my project, sometimes I'm seeing different problems and different, you know, in my mind, I'm thinking different solutions. Is that normal as a founder? Is it normal as a founder to see multiple different solutions? Yeah, sure, absolutely. You just have to pick one. Pick the one that you think could get usage quickest. Oh, that's a good one. And what's the founder DNA? What's the founder DNA? What is the founder DNA? Ah, founder DNA. Founder's DNA, I mean, basically the character. You mean what makes someone a founder? Yes. They choose to be one. And what's your explanation? What makes someone a good founder? A combination of positive and negative things, I think. Positive things are things like determination and, you know, willingness to try new things. But then there may also be negative things like if, if you are, I think if you have worked for a large company for 20 years, you might not be a founder unless you were forced to for visa reasons, because if you were the to for visa reasons because if you were the kind of person that would that would make a good founder you wouldn't be able to stand working for a large company for 20 years right and so actually we've noticed certain companies where the the alumni of these companies tend to make bad founders and it's because no one who would make a good founder could have stood working for these companies for very long. Okay, maybe we should pick one on this side. Okay, yes please, go ahead. We'll take a few more questions. Okay, the question is pricing during launch. It's especially important to me because I have a successful offline business that I'm taking online. But the overall question for all of us is any strategies about pricing during launch? What do you price during launch? Well, you can probably guess. If you know your business, you know roughly what you should charge. So you should probably just go with whatever you guess. If you want to be more scientific about it, you could try talking to some potential users. Most of the time, you have some sort of tame users who are actual users but are also friends of yours or something like that or family. And you can ask them, tell me honestly, what would you actually pay for this? You can always change your prices later, though. If you want to lower your prices, no one's going to complain. And if you want to grant, if you want to raise your prices, you just grandfather your existing users, which if you have exponential growth will always be a tiny subset of your total users. And then no one will complain about that either. So don't sweat about it too much. One way I think about that is it just seems like in the beginning, what you need more than anything is customers. And you want them to pay, so you need to pick a price that gets you customers. So you'll learn, because you'll learn so much from those customers. And you can change later, right? Don't lose users over price. Yeah, because in the beginning you just want growth. Because the customers teach you. The first customers don't just give you money. They teach you. All right. Two more questions. You pick two. Okay. Right up front here. Angel investing. So my name is Karen and I'm with ChatGoose, which is a chat manager. So three tips for dealing with and finding angel investors if you don't have the rich uncles, et cetera. Well, we never talked about fundraising at all. Well, maybe we'll have to do this whole thing again. That's good. Fundraising is a thing to occupy your thoughts as a founder is overrated. It's better not to be spending all your time thinking about fundraising. And we come to it much later in the class, so we don't need to. All right, so the question was how to find angel investors um well that's the that's the thing i'm particularly ill-suited to answering that question because y combinator is like this machine for funneling angel investors into all the startups that it accepts so like how do you find angel investors if you don't it's like asking a pilot how to you know walk along a track on the ground. I know the least about that. Here's the thing. Angel investors are looking for you. So get out there. Go to... I don't know. Well, there's lots of startup events. They're not necessarily good angels, but angels are out startup events. Angels are, like, they're not necessarily good angels, but angels are out there looking. And look, the best way to actually meet angels is to get one to invest in you and then to introduce you to people they know. Actually, I know the answer to this. I know the answer. Find people who work at startups and ask them to introduce you to their investors. That's the way to do it. That's a good answer. Okay. Last question, Paul, you get to choose maybe from this side. Right there. Is YC thinking of going after high school students to fund? Well, I don't know, because I don't think on behalf of YC anymore, but you better not be, because that would be an evil thing to do. There are plenty of high school students who could start successful startups, but they shouldn't. Just because you could start a successful startup doesn't mean you should just because you could start a successful startup doesn't mean you should because if you start a successful startup like that means like the the you know the footloose and fancy fancy free days of your life are over right that like you're working for that company we have funded kids in high, but only because they're already going. We're not encouraging. I agree. To go to high school and encourage kids to do this incredibly hard thing instead of having fun and being kids, that's awful. I actually think that it's premature optimization, too, right? What you should be doing when you're in high school and even college is you should be figuring out what the options are, not picking one option and running with it, right? And, you know, it just turns out that usually people who are in school and then stop to start companies, it's like, you know, there are dropouts from Harvard. We know the classic examples. But if you drop out and just go do it and you're on a path, that's one thing. But most people, they're dabbling and they have a fallback. And that's not a good way to be a startup founder. You have to be 100% committed. And so we'll fund people in college, maybe even high school, if they're already clearly 100% committed. Otherwise, no, whatever trend. I think that trend you're talking about is that you graduate from high school and why bother getting a college degree because you're already a fantastic hacker. So I'm going to hire you. And if that person wants to enter the professional workforce, well, that's great. I don't know. I was, I don't think I would, it would have been good for me. It wouldn't have been good for me either but you know like go off and start some startup i do think between 18 and 22 you grow a lot as a human being who's human and humane and it's not clear what what society will turn into if we if all those folks enter the workforce it's it's good to like mess around and do a whole bunch of different things in your early 20s. If you can afford it, yeah. Whether it's, whether this messing around and doing a whole bunch of things takes the form of college or something else, just like don't, be careful because like starting a startup is like catching a dragon by the tail if it works. Be careful at what point in your life you do that. Paul, thank you very much for coming in. Thank you, Jeff. you