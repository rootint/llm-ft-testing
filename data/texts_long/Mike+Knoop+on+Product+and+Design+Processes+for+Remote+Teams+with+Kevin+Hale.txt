 Hey guys, welcome to the podcast. How's it going? Good. Great. Cool. Kevin, welcome back. For people who don't know you, what do you do? I'm a partner at Y Combinator. I founded a company called Wufoo back in 2006. I was in the second batch at YC. And that company, appropriately, was a no-office company. We were all remote all the way back then. Huh. That's relevant to today, isn't it? Some early inspiration for us. Wow. What are the odds? All right, Mike. So what do you do? Yeah. Hey, I'm Mike. I am a co-founder at Zapier. I'm our chief product officer. And I originally started out as a front-end engineer and a product designer. So I have a very deep appreciation for those areas and i think has kind of um how i came to run some of the design team today and i've thought a lot about like scaling design teams um over the last seven or eight years and what does zapier do uh zapier is a piece of software that helps you automate your tasks at work helps you be more productive uh so if you have um if you use multiple tools for your job and you're trying to, like you manually are copying and pasting data from one tool to the other all day as part of a task you do, you can use Zapier to automate that and have it done automatically in the background. So an example would be if you are, let's say, a project manager and you've got a team that works out of GitHub and you wanted to send some notifications into Slack or into Jira, whenever those issues get closed, you could set that up just as one example. Cool. And how did you guys meet? Because you've known each other for a while. Kevin and I? Yeah. Yeah, I came over to the place that you guys were working when you guys were doing YC, and we just talked for a couple hours. But it was a really interesting conversation. Basically, I told you, this is what we did at Wufoo, and I was like, you should basically just do kind of a lot of the same things. Specifically, yeah. Think about remote work, that you're going to be doing this for a really long time, and then integrations was kind of like patching a bunch of things together to a form builder was a feature at Wufoo, but to me, I saw what they were doing was turning that into an actual business. And so a lot of my insights were like, this is what works for us. It's really powerful. And I totally get why every other company would be interested in Zapier. Yeah, you're definitely one of the people who saw the early, I think, vision of what Zapier could be. And form software is such a good use case because the data never ends in a form you want to do something with it usually it's once someone submits a form i want to go put it in my crm or qualify that lead or put them in an email list somewhere it's actually interesting that like i think the life cycle of people like getting their business online it's like you start off with like i need like a presence it's like how do i get my stuff out there and so use like website builders like by default to become really big we didn't realize this when we started but we understood this later on was that like oh then people need to figure out like how do i collect data um from all these people that are coming to us and so form building contact forms etc like all of that became really relevant and surveys and then the next thing is like oh now i have all this new data what do i do with it and that's like zapier's like the next step so these are like the three like stages of every company of like oh this is what i need yeah and they have just giant markets i remember early days uh wufu people would talk to us about like so what's your tam what's like your total addressable market and we literally would just like i'm not doing that because it'd be like everyone that ever has a website everyone who needs to collect data like do you want me to calculate that i have no idea yeah i sometimes think those uh exercises while useful are sometimes like a little misleading it's misleading when your market is so ridiculously large yeah when you're thinking about like a consumer adoption you know you don't ask facebook what's your tan right right and for us when we think about this opportunity um certainly when we got started you know our ambitions were hey can we build like a cool piece of software and support ourselves um but over the over the years i think we realized whoa we've like tapped into something that almost every person who uses apps and software to get their job done should be using something like zapier there's this like explosion in staff software in the industry that is like the barrier to entry to creating software is so low and distributing software is so low that you get these niche tools and more and more folks are using these niche tools and bringing them into the workplace. So something almost out of necessity has to exist like Zapier in order to be able to make those tools play well together. And a lot of times, just because of the dynamics of the explosion and how many tools there are, there's no one player in that marketplace that's going to be incentivized to go build thousands of integrations with everyone else. Yeah. But at this point, Yeah, I mean, at this point, surely you do have to be thinking more specifically about personas and growing out individual markets, right? So how do you approach it now that you have so many users? Yeah. Honestly, to date, it's still a very horizontal strategy. We have mostly focused over the last seven years about getting more and more apps on Zapier and getting the tools people want on Zapier. I think that's been one of the things that actually surprised me was how much growth we've been able to get out of like, the initial, I guess, decision back in 2012 to build an open platform. Looking back, that was definitely one of the, the like better decisions i think we made in the early days we built the first 50 or 60 apps on zapier ourself brian wade and i just to like bootstrap that that engine and when we launched in 2012 we i remember we had live chat i think olark on the site at the time and we you know we got literally we launched in tech crunch and had three days straight where all the chat messages were answering was just people asking for apps that we didn't support and i had never even heard of and it opened my eyes and opened i think all of our eyes that if we're going to get this thing to scale we have to figure out a way to get those apps on zapier and we just can't do it with three people so we it was almost out of necessity we don't have money to hire we can't build these ourselves so we have to get if figure out a way partners can build those things on zapier and at that point we had enough inertia momentum from the launch and from early users that were really excited about the product and how do you carry this jumpstart that because i think that's like everyone especially i remember back then people were talking about the platform you got to be a platform like how can you be like salesforce and the thing is jumpstarting that is difficult like just because you put up an api and tell people like hey if you go and do this then you're going to get benefit like how did you guys in the early days get people to be like i will program against your thing so that i can be part of your ecosystem when it was very very small it is interesting how every every sas company every software company eventually get big enough you want to be be a platform. I think I'd always, I'd heard the heuristic of like, once you get big enough where you could carve off 1% of your revenue and that could be its own standalone business, like you've kind of reached a critical mass that you could actually build a platform that has legs and can sustain itself. For us in the early days, obviously we didn't have that. I think the thing that we leaned on really heavily was the value proposition to some of our partners building on Zapier. It wasn't just most of the time these platforms plays one of the big mechanics you see people building on platforms is for distribution. Like I might go want to be in the Salesforce app exchange because that way more Salesforce customers can learn about the fact that I exist and might discover me. For us, we didn't have that. We didn't have a big user base in the beginning. The value we gave to partners was around retention. If they built, they integrated with Zapier, they got access to 50, 60 at the time, integrations that were maintained and scaled and were adding more to it. And they got it let for free. So it allows them to go and say to their customers who are asking for these integrations, no longer do they have to say hey sorry no we'll put that on our to-do list or our feature backlog and we all know how that goes they could start saying hey yes you can do that with our product go check out zapier here's a link it was a way for them to say yes to customer requests yeah like there's actually a way for you to do this go over there's value to them beyond you know just user acquisition that incentivize them in the early days to build on zapier did it end up being that like a lot of people on the front lines like recommending you were then support people because for us like in our company customer support was where all these feature requests would come in and so did end up being i mean i i would imagine a lot of them were like hey here's the stop guy here's how i satisfy you that was very common um we get listed a lot in like help docs help documentation sales is also another avenue where we get mentioned a lot where we can zapier basically helps them close a deal with a customer that they're trying to upsell or convert into a paid plan was that like the start of like your dominance and like seo stuff is like oh we get people sort of linking to us um the that was a little that was actually earlier we so we built our app directory before we built the product before we launched in tech crunch that whole story was uh pre that we had been working on zapier for about five months i think at that point yeah the very first thing we did when we sat down was we built our app directory which was landing pages and we used that to try and gauge what people wanted us to build we were building these manually we didn't we had a very big opportunity cost on our time so in the beginning how how many apps did you guys integrate and do before you actually had people integrating and doing the work for you it was like 50 or 60 yeah they get 50 or 60 yeah but we had landing pages for i think a few hundred at that point and we had email collection on the pages and classic lean startup of just trying to understand and gauge the market demand for this thing before you go invest the time to build it. But on launch, you had 50. I think so, yeah. Okay, because that was a startup weekend project initially? Yeah, that's where I met Wade at actually. I'd known Brian for about a year before we started Zapier. But yeah, I met Wade the first time I was actually going to pitch a different idea at that start of weekend I mean not even worth talking about at this point as soon as I heard Brian pitch the idea for what was called API Mixer at the time my eyes lit up and I was like that's what I'm working on this weekend so during that weekend we prototyped out actually what Zapier is like the core mechanics of like mapping data between apps all came out of that weekend. And I think we built PayPal and HiRise and Twitter, I think, were the first three apps. How did you pick those? It was more, we sat down and said, what would be a cool use case that we could demonstrate this prototype with? So during the final demo during Startup Weekend, the mechanics of the weekend is you work for a weekend and then you present to the rest of the crew on Sunday night. And during the demo we said hey wouldn't it be fun if we get up on stage and have people actually like tweet something live and then have people pay us something on paypal and then you could actually see zap like the prototype of zapier run and pull that data into high rise the idea was like oh we could aggregate you know if someone pays you on paypal and they're tweeting at, you'd like to know that in your CRM so that you could pay special attention when you're contacting them. Right. So it kind of came out of a single use case and we worked backwards from that. And so at what point do you end up doing YC? Yeah, we applied actually twice to YC. We got the email rejection the first time. We applied basically with the prototype from Startup Weekend. So we had no customers no traction basically just three dudes from missouri it's a hackathon project project um so actually totally useful exercise i think uh but it definitely lit a fire under us i think as far as like what was useful about filling out the question we're gonna show these people wrong did something change while filling out the application um it was helpful to think through what we didn't have yet. I think for that first time, uh, it made us realize some of the things around traction that we were like, there was a big Delta and, um, still like optimistic with a prototype. Um, but yeah, once we got the email objection, we, at that point we had enough hints of success. We were like, we're going to keep working on this and it gave us actually more motivation to keep burning 40 hours and nights and weekends a week for the next few months. And then the second time we applied, you know, by that point we had had hundreds of conversations and chat logs and messages from actually a lot of folks in like the YC network were even using the product. It was invite only at that point. And we are having folks pay. we had our first 10 people pay us 100 bucks to like validate it and we turned down the price like i think five bucks and we had a few you know 100 people who paid us that amount of money um it's just a lot more social proof and validation that like hey this is a problem that a lot of people care about and could be useful and so at that point had you guys committed to being a fully remote company when you went through yc did you even have employees no just the three of us and we hadn't um zapier had been i mentioned we've been doing nights and weekends for that four or five months in early 2012 you guys still had like jobs yeah brian and wade had full-time jobs i was still a full-time student actually a grad student i i get the one the one star of dropping out to start Zapier. But yeah, after our full-time jobs were over, five o'clock, we would go either back to our own apartments and work separately, or we had one of our bosses let us run it, use one of his offices to co-work out of in the evenings. And we'd go put in, work until midnight, 1 a.m. every night, working on Zapier, basically. So it's kind of two full-time jobs for the first few months. Yeah, and so demo day happens, and then what do you do? Yeah, so obviously YC, one of the things is moving out to California. So that was really, I think, one of the big values of YC for us was the forcing function to go commit all in. No longer is it a side project. This is actually the full-time now we could did you not fully believe in it by then or is it like um you thought like this is an interesting hobby yeah i think you know thinking back to that time it was you think about our ambitions right it was like hey we wanted to get this to a point where we could support ourselves be our own bosses control our own schedule and it hadn't got to the point where we could supplant like our full time income so it was kind of out of necessity that we were running the company building it that way but once we got to yc you know you get a little bit of initial capital we got an apartment in sunnyvale and that kind of allowed us to focus all full time on it um after demo day uh we actually leading up to demo day i remember one one of the early problems we ran into that summer was all three of us would wake up in the morning and we were all doing customer support. We had a shared Gmail inbox. Not even that. An email would get copied into all three of our inboxes. In order to do support, we would have to sit next to each other so we wouldn't answer the same email. And we would be spending until noon each morning just answering support tickets and trying to help people get set up with the product. And that was chewing up a lot of development and forward progress time. So the very first hire we looked at was someone to help us out with support. And we had no network in the Bay Area. We just moved out three months ago. We didn't know anyone else. Our networks were from kind of like our college networks and from past jobs. And when we started looking at the folks we thought might be a good fit for that the one person who came to mind was one of wade's i think college roommates and he lived in chicago at the time and we knew we couldn't convince him to move to the bay area like we but we didn't want to and we thought back to like hey we were kind of doing zapier remotely before um startup weekend or before yc what's, we could give that a try. And this coincided with the exact time after YC where I was, my wife, girlfriend at the time was finishing law school back in Missouri. So I was flying back and forth every two weeks back to Missouri and then back out to California to work Brian and Wade. So kind of this perfect storm of like situation where it was like, well, we have some confidence that we can do this remotely because we had been doing it before. And the people we want to hire want to be remote. And I had to be remote for part of the time. So like, let's just give it a go. So it was very much an experiment in the early days just to think like, hey, this was working. Let's see if it can continue to work. And did you have any kind of plan or structure or were you just like all right well let's just see what happens and make it work you know more inspiration than plan i'd say like you look at folks like base camp uh at the time wufu at the time like we had seen at least small organizations that had been successful at building fully distributed remote workforces so i think there was more inspiration than anything um a lot of times for a lot of people they feel like the company isn't real until like there's an office there's like a lot of ego thing and so i think that's the kind of thing that's amazing about remote teams that actually get really big is like somehow they don't have something that's tied to like the thing the thing i need to show off like they're comfortable with saying like i got got no place to show you. I work from my home. And so like, is that an, like, did you guys even struggle at all about that? It was like, how are we going to be a real serious company without this? It didn't hurt any, it didn't like hurt any efforts in terms of scaling the organization. It's certainly even, it's funny how much, organization it's certainly even it's funny how much how pervasive that like idea is because even i remember probably last year or the year before we'd still have people joining the organization who'd comment like yeah do my parents want to know if i'm working at a real company right now and it's like well yeah we have you know 100 we have like 50 million in arr like yeah we're a real company but um yeah it's still this is one of the reasons why i like some of the things that we do are actually useful because we can send those to friends and family and say, hey, look, this isn't just like a sideshow. This is a real thing. But how did you not get caught into that trap? That's the thing. It has to come from the founders, obviously. How did we believe that it was not a side project? Why is it that you never felt like you needed to have an office? No, it's just like peer pressure around startup norms. Exactly. Like, why did you not succumb to that? Because that's often what I see a lot of people do is that like, I'm spending this money because I think this is what it looks like to normalize me. Because this is actually very, especially at that time, it was very radical to be like, I'm not going to have an office. Yeah. very radical to be like i'm not going to have an office yeah i mean when we were talking to like investors and whatnot through yc lots that raised eyebrows we'd get folks turning us away strictly because of that even some of the folks who did we went forward with like still would be like hey when are you gonna you know mature as an organization and get an office and start hiring locally right now you see a very different opinion in vc so which is fun to see that mindset shift but um how did we resist i mean in there in like those early couple first years between you know 2012 2014 um it was largely driven out of i guess kind of like the scrappy nature of the organization like it was out of necessity because we weren't profitable yet um we'd only raised a small amount of money to like help give us a backstop to be able to scale a little bit faster than we otherwise would have and the networks of folks who wanted to hire were remote it was probably around eight or nine people into the organization when it stopped being an experiment i do remember specifically having that conversation with like brian and wade around like hey this is this is working like this doesn't and it was probably i think right after our first company retreat where we went up to washington and had like seven of us um where it felt like yeah this this isn't just like an experiment and like an easy way to get better recruiting like this is actually a better way to like run the company for us definitely started off with costs we're like uh we can't afford an office. But later on, as things were working, we were just like, if you have this frugal mentality, we're like, there's nothing about the office and wanting to have a commute that made any extra sense. And we also had relocated from California to Florida. So it wasn't like, oh yeah, our office in Florida was going to be the driving thing for anyone. And so for us, it really just was like, I think profitability was the biggest thing for us. We were making money. And so if someone had some criticism against like, oh, why are you doing it this way? I was like, I'm making tons of money. So I don't really care what you have to say about this. Does WooFoo still have the best exit to investment ratio? The ratio, yes. In terms of how much percentage of the company that YC owned or any of my angel investors to the output. And I think we're still in top 10 biggest exits for YC still. Still? Because of how much equity that was owned. Because we didn't raise any money. You raised what? We raised $118,000. YC was $18,000 then. And we raised money from two angels, PB and PG. And it was $50,000 each. And that was it. I was just thinking, you know, I think logistics and practicality was one reason why remote was like we believed in it so much. The other reason I think is actually a little bit more tied tied to Brian and Wade and how we like to work. In the early days, I think it goes back to that nice and weekends. Part of the reason and ambition of wanting to start Zapper in the first place was we kind of wanted to own our own schedule and set our own goals and not be beholden to a giant organization telling us what to do. We wanted to be very autonomous and one of like that that's a that is a company value our number one value is default action and that permeates all the way from the very beginning where we wanted to like we wanted to build zapier as a company that we would want to work at and if i'm going to go work at it like a big company i would want that like level of autonomy and no one telling me that i have to be in the office at 8 30 in the morning every day and like control my own schedule and be able to like just go know go identify good things to work on and do them so as someone now who's hiring these people do you have to filter out people who think that they want that autonomy who think that they might want to be working alone for people who actually do and is there a good way to do that like How do you get the sense that people are really gonna- Is your company full of libertarians who care about freedom or is it a company full of introverts? I imagine it's not one or the other, but it's one of these things where it's like- I do think we probably attract folks that enjoy working alone more, not exclusively. We do have quite a few folks who are extroverted in the organization who've been successful and found ways to make it work. One of the things I tell everyone who's going through the interview process is your work can't be your family at Zapier or any distributed remote company. In the past, it's very easy to lean on your work as that social connection. That is a very rare healthy mindset. And if you're going to make it work at zapier you have to find a social network that's like outside the company you'll get a little bit of it because we do two company retreats you'll see their faces and names all day in slack um but whether it's like you know uh like side projects or hobbies or like close friends or religion or family or whatever it is like you'll definitely you definitely want to have one of those networks that's outside the work environment related to this like what are other major characters you look for that you know this person's going to be appropriate for remote work past experience with remote is pretty good as a pretty good signal because they know what they're getting into um we now with that said we've had quite a few folks who haven't had post past remote experience and they've been very successful but there is like a learning curve attached to it i think the biggest one of the biggest things i look for in interviewing that tells me whether someone's going to be effective or not is like how much they can uphold that first value of like defaulting to action do they have past experiences where they did not take a consensus driven approach and instead said hey this is the right thing to do and i hey, this is the right thing to do, and I believe that this is the right thing to do, and went and caused some kind of action in their previous company or organization because they thought it was the right. But that sounds like a quality that's not just for remote workers. It sounds like you just want that period for any company. That is one of the probably most surprising things I have discovered or observed scaling a 200 person remote company to date is that the types of things you have to do in order to be a successful remote company make you just a generally better company they are not unique to remote however they you do have to figure them out earlier and i think that is where a lot of the interesting when people ask like how do you run a remote company i think that's really where it is because the we've had to invest really early on and how do we what's our decision making frameworks how do we communicate as an organization what are our processes you have to get really explicit about your processes in order to be successful and in order for folks to have the information that they need to be able to default to action and be able to know how to operate in this organization so so you mentioned this i heard this in another podcast about like overlapping time zones and making sure you don't unblock or block and unblock people. Nina Mehta, who I know, hey Nina, asked a question on Twitter related to this. And that is what's the best way to share work and knowledge across designers working on different parts of the product without distracting from focused working time? There's an interesting underlying i guess assumption here or observation i could say about this which is one of the benefits of remote work apart like one of the number one benefits is of course from recruiting you get to hire the best people anywhere in the world a secondary benefit that i think isn't as obvious is that when you're actually doing your job like the best work gets done not when you're like sitting next to someone and like collaborating all day there's like you have to get into deep work even for a role like product design which is very collaborative by nature you still have to like have chunks of time like four hours at a time to go really deep and explore a lot of iterations a lot of different ideas and i think this is where like the process part of the organization gets so explicit is all right you know in a co-located company in an office you don't probably have a lot of explicit direction or like process laid out as far as when you're spending deep time versus when you're collaborating and coordinating with your co-workers because i can just tap you on the shoulder kevin and like ask you what you think of my the work i just did where it is in a remote team we just have to be so much more explicit about what are the processes individual people individual teams follow when they want to communicate what were some mistakes you guys made in the early days you said you have to figure this out early earlier um did you guys make any mistakes i think one of the things that we figured out in the early days um was when to be intentional about how to be how to sounds generic how to communicate um when to raise the bandwidth on communication there is a when you're in a co-located organization a company like i'm working in person with you i the default communication mode is i'm going to get your attention and then i'm going to have a conversation with you and i have full i have the full range of bandwidth right i can use body language i can use my i can stand up i can use tone um it's like full bandwidth between us but i've got 100 distracted you like you i have your full attention yeah now so it's like we're taking two people's times up for this um in a remote organization the default is 100 the opposite of the spectrum which is people don't communicate at all like if you're they're using a slack channel and that's like your main office which is is how we operate today. If two folks are on a team together, the default is kind of like, you don't say anything. It's a, it's like just a blinking text cursor. Right. Um, and we have to be, we had to figure out when are the right moments and how do we teach the organization, like when to move up that bandwidth chain to move from not talking at all, because deep work is important to text is acceptable it's like slack or email or something like that to when to move that to a video call so like when should i raise the bandwidth from like typing this thing out to jumping on a video call and then finally like write these rules down there there's some like transition moments to look out for i'd say and those are the things that are like written down and shared with the company so a good example of one that a lot of folks would be familiar with is like the slack many people are typing message that pops up so if you like one of the things a lot of our teammates if you see that that's probably a really good signal that you should be like jumping on a video call at that point instead of wasting or not wasting but instead of spending you know 10 man hours in slack debating about this for an hour across 10 people, just get on a Zoom call and hash it out for 10, 15 minutes and then summarize the decision back into the team chat tool that you're using. And it cuts down. So that's what I mean by identifying the moments that it's important to increase the bandwidth up to move faster. We had a rule when we were doing remote working where we knew that this was really painful. And what we hated was long discussions happening for too long and breaking this sort of like deep work or like maker schedule yeah and so for us we changed the rule to be like if you're discussing something for like 15 minutes at that 15 minute mark just you got to stop and go on to whatever the next thing you have to do like to get to like what you say is default action and when we said like all discussions that have been paused we set a time for this and we said it like at the end of the week on friday when the team meets together it ended up being like 90 at a time that once they slept on it they realized they didn't even have to have a discussion they just like they they just magically figure something out or how to compromise or realize something wasn't a big deal. And so usually by the time we get to Friday, not many things were ever brought up. Only the most important things surface at that point. And so I think it was like, I like this idea that what you're trying to default to is respecting someone else's time and that the only time you start respecting is when you need to make it really, really efficient. But then what about on the other hand, where you're like, say you're stuck on a certain design problem, programming problem, whatever it might be. At what point do you say like, okay, I'm going to break both of your focuses and take your attention full on to solve this problem or try to solve it? Yeah, that is a, I mean, it's a good question. Um, the, the reality is even if i wanted to get your full attention there's no guarantee you're going to be able to get it in a remote company right like i i may not have a path where i can go over and tap you on a shoulder i might be able to you know dm you in slack i might be able to send you a calendar invite and hope to get 10 minutes on your calendar this afternoon but a lot of times you don't have like you don't have the same guarantee of being able to get someone's attention that you do in a co-located and i think that's actually good because it protects the attention of the person who would otherwise get distracted and the thing like some of the social i guess norms of the organization of how we like address that is you know one is in slack if you d if you tag somebody in a message like at tag them specifically it's kind of the social norm to be to acknowledge that within 24 hours so we have some expectations like that and the reason we have set 24 hours is because we have folks all across the world the sun never sets on zapier i like to say um so yeah we have some of these social expectations where there is going to be some asynchronicity in how the organization works and operates and it's one of the reasons why i think hiring for default action is so important is if you get blocked in whatever your primary task is and you're waiting on someone else in the org you have to have the bone to go figure out what are other smart things that i can work on that are giving contribute value to the goals and how do i better serve our customers here yeah um if you're the type of person who, as soon as I get blocked, I'm just going to sit here until I'm told what to do next, you're not going to be successful at Zapier, or I'd argue most remote companies. So how big is Zapier right now? How many employees? 200. We've just crossed 200. And then your primary responsibility is all the design work that's done at Zapier? Your primary responsibility is all the design work that's done at Zapier. I spend a lot of time helping our product teams figure out what to work on next. And I love spending time with our design and engineering teams. How big is the product and design team at Zapier? We've got about seven or eight product managers, a similar number of product designers, and then an engineering org that's about 50 folks attached to that. So from my experience, I like how much collaboration is necessary like especially at the start of like building out new products and sort of like thinking through them and then also designing them and then also part of like the design culture is like critiques and so to me that was one of the things that was like really difficult luckily at wufu it was like i was the only designer we never grew to beyond 10 people so easy to communicate with yourself exactly so we never ran into that problem so i'm really curious like what did you what's done differently for your design team and product teams to make that sort of work yeah um i think the one of the most important relationships in the organization is the relationship between product managers and product designers. I don't think I'm saying anything new or novel here by saying that, but it's certainly true for us, which is when we are thinking about staffing and hiring a team, we're making sure that those two folks are intentionally building rapport, they're spending a lot of time together, and they have a very strong shared ownership over the goals that they're working towards. How do you do that remote work-wise? That's the thing that's difficult especially when you're trying to respect everyone's bandwidth yeah in the um in the earlier days when we had started scaling which we'd started kind of scaling these teams maybe about a year or two ago um it was i'll admit it was more ad hoc like we were figuring out this process still these days with 200 um we've been a lot more we just have similar to what i was talking about before we have to just get a lot more explicit with processes um we started using okrs as like an alignment mechanism and like a designer and a pm and an engineer all own and share an ok a lot of companies kind of have weird definitions of ok like how do you guys define okrs like an objective that that team is trying to accomplish like hey we want to, we want to increase how many users are able to set up a Zap by 10% this quarter or something like that. And that's something that a PM, an engineering manager, and a product designer would have shared ownership over. It gives a lot of focus to that team. And it also helps elevate everyone's role to be thinking about like the impact and the customer first i think what the thing i've noticed that happens in scaling zapier is um there's a tendency for engineering and pm design to kind of specialize in their own areas and like they have their own unique things they're thinking about all the time right engineer might be thinking all day and about the user experience and engineering is thinking all day about estimates and delivery and refactoring and code quality pm is thinking about business impact and if you don't give them some kind if there isn't some kind of shared system for how they should value the things that are prioritizing you get a lot of us versus that mentality that kind of creeps into the organization where it's like well i want the designer to do this around with the engineer do this so you give teams okrs versus individuals yes gotcha yeah this. This is something new we're starting to do, but so far it's been pretty fruitful in building that alignment across teams. And so how is the team checking in on each other? Is it like a stand-up type thing every day? Yeah, every team does a little different, actually. So there's a lot of... One of the things about Zapier that is cool to see is a lot of teams experiment with some of the processes you give a lot of autonomy to different teams to try a bunch of stuff yes we do um okay and okrs are kind of our framework for how we pull all how we make that not chaotic if that makes sense um i like to think about there's like the things that are important to be consistent across teams are the interfaces like you need to make sure that the interface between teams is consistent so that both teams know how to be specific what does that mean um what are what's our how am i dependent on you or what is the api layer if it's two product teams that are building in the same area of the product okay um or if it's design what's the like ownership between and where's that handoff like what's the scope role uh scope of ownership between two teams um so it's like or to be another layer might be like um if we use a we use JIRA for doing a lot of our issue tracking and project management. And there is some level of consistency that is important to have across all of our product teams using our project management software so that we can build some observability into the product development process across the whole company. So we can get a sense of where are we doing well, where are we not doing well, issues where we might be over investing in feature work or under investing in feature work or tech debt and things like that so there's like some level of consistency that's important but we do generally try to give a lot of individual autonomy to these like epd trios how are the teams created mostly on an like do you guys assign them or the people kind of like have a draft or they are picked and like we hire into them i guess so we will create a lane at the like leadership level of the organization like hey here is a new opportunity we want to go after here's a new area of the product that we aren't addressing or part of the conversion funnel that we want to improve um and we'll then staff into that so we've got a decent recruiting team now so whatever team that someone's on they kind of stay with that team all the way through the life of zapier or it mostly uh they're long-running teams i'll say that um we've had folks switch i wouldn't say we've actually our earliest product team uh is only two a year and a half two years old so and some of those folks have shifted we We've had folks restaff from one team to another where there was another part of the product they wanted to work on and they had some expertise that could be used somewhere else. Maybe we brought in, maybe this person's a really senior level experienced at engineering. We've just brought in more of a staff level or associate level engineer. We want to get them to work together. What's the time frame for like these okrs like are they like quarterly goals like yearly goals like you probably have a right a range of them yeah annual and annual and monthly tends to be the two kind of extremes annual just to know like all right what are we what are we working towards over the course of year what is this product team trying to accomplish over the course of 2019 and then kind of monthly check-ins against that where they break those down and so can you break down how an average team might handle tracking for an OKR? Like how does that workflow actually go down? Yeah, this is still new to the organization. So I feel like I need to give the coffee hat that we're learning a lot still with this. We've been practicing with OKRs at the exec level for the last two quarters in 2018, which gave us enough confidence that, hey, this is actually a very effective tool for us to help align and allow everyone, all these different teams and people in the organization to be autonomous and default to action in ways that they want, that we wanted to start rolling it out to all the individual teams this year for 2019. Practically speaking, I think the best version of this, and this is aspirational, I don't think we're quite there yet, is you've got some high level of direction being set by the leadership of the organization. Um, what are we trying to accomplish, right? For Zapier case, we're trying to build a piece of productivity software that anyone can use. Um, how do we get Zapier adopted by, you know, tens of millions of people someday. And you've got this high level direction and strategy being set. And then at the team level and lower in the organization, there's a lot of work that is happening that needs to figure out, okay, where is that aligned and how does that bubble up? And there's kind of a meat in the middle approach where you kind of want the work that's happening 50 of it to be kind of top down driven and i think 50 of it being bottom up because in reality the exec team leadership is never going to have perfect insight into all the pieces of work that happen across the organization and i don't think that's what something like okrs is particularly useful for is to define every piece of work you're doing i think it's largely useful for helping you prioritize and make hard trade-offs and have discussions like this is one of the things that's great about writing down our process documentation in zappy writing down our decision making processes is when it's written down you have something to debate about i can go to you and say hey can we debate whether this is the right thing we should be spending our time on it's so much easier to do that when there's an artifact that you're talking about as opposed to a group of people with different ideas in their head about what is important to have it. It just removes this layer of conflict in the organization. It also, discussions can drift when it's not tied to the artifact. Yeah. What other tools do you guys use? I don't have any doubt that you guys like use zapier itself to help you guys we are yes you use okay dog food but i remember in the early days talking to you guys you guys bought a lot of tools for yourself and i'm just wondering like right now what's like the most helpful tools that you guys are using either that you've built yourself or that like other that you're using from other companies? Yeah, the one that I actually built this one in the early days, it's a tool called Async is the name of it internally. It's an internal blog, essentially. We use Slack as kind of our company office, for better or for worse. This is where folks usually log into in the morning. This is where work gets talked about. But one of the trouble with that especially as we scaled is and anyone any remote company or any team that uses slack will be able to tell you this it gets the overwhelming amount of noise in slack how do you keep up with slack and very early on we set the expectation that slack is not a tool you're expected to keep up with in zapier you are free to leave channels in fact we encourage it that is fascinating there's a feature in slack where uh you can turn off the leave join notifications and we turn that off because we wanted to give folks like it's great the social comfort to be able to leave channels without feeling awkward just because it feels like pressure it's like i'm behind on my homework there's some social pressure i just end up muting those channels rather than leaving them yes yeah like we actually have like a course working on for how to like be at using Slack. It's happier. But this is in the early days. So we set that expectation of that's how we use that tool. One of the things that kind of was missing that I saw was what is our more thoughtful, to use maybe like the Daniel Kahneman idea, like slow thinking version of Slack? Slack is where work gets talked about, right? It's like quick responses in the moment i need a decision okay where does our final work get talked about or where does our more like deeper work that we're thinking more long term and putting together like where are final reports getting shown to the organization and how does that get shown to um how do the right people get notified that like i have something i need you to read and make a decision on or think about um so this is were in the early days i actually got inspired by um uh nick francis over at help scout they were using a tool another remote team called p2 was a plugin for wordpress that it was basically it's kind of like a twitter feed yeah automatic was using this internally and that's how they run really old it is yeah uh we we worked we used it zapier for a good six months and it was pretty good it started breaking and we wanted to customize it and this is one of the most interesting things i've why i like investing in tools is you can you can tweak and change them to match the like level of company you're at essentially as your company gets bigger you're going to run into these new bottlenecks and you can start like layering in and customizing the tool instead of having to go like throw the tool away and pull a new one in and relearn it so this in the early days p2 started breaking for us it didn't scale it didn't tie into our auth system was funny enough the reason why i wanted to rebuild it um so i built a version of internally called async which can just internal blog and this was kind of the tool that one of the cadences that we have in zapier is every week we ask everyone to write a friday update for what they worked on and this is kind of the heartbeat of the organization and so that goes up on the blog it goes up on async yeah and this worked really well like in the early days you got 20 people 30 people you get to read everybody's friday updates you get to know everything that's every decision that's made everything people are learning all the work that's happening well you get to 70 or 80 100 blog posts yeah that starts taking a full day just to read like all the information so it's you start to run into the same problems even slack does where it's information overload yeah um but because we own the tool we can we can tweak it and tailor it to how we like our we want to run the organization and how we make decisions and how we want communication to work um we started building like a default feed view where it was a curation layer in terms of, okay, who are your immediate direct reports? Who are the folks you need to follow? You can follow folks. You can create custom feed views to like build the curation. We work with managers to like onboard new employees to set up their like views in the right way so that it's curated so that they get just the information they need. And so does email have a specific role or is it kind of a catch-all for you? We don't send any internal email. Really? That's like my fantasy. Full stop. None. So we use email. Email is used in a few ways in Zapier. Of course, we do email support. So we use Help Scout and all of our emails. Basically, if there's any internal to external communication, so like when we're talking with our partners or with customers, obviously that happens over email. But internally, there is no email. Just Slack and Async. Yeah, those are our tool. We also use Quip for long-form documentation. It's a wiki. It's a collaborative wiki. Google Docs mixed with a wiki. That's more for documentation. Documenting processes, hiring rubrics, things that need to live a little bit longer in the organization. Both Async and Slack are feed views that roll off. One thing people were surprised about with us at Wufoo was how much time we spent development-wise on internal tools, actually. It was almost 30 to 40% of development time was us building stuff for ourselves. It's why we were able to grow and only be at a 10% company for so long. What is that ratio for you guys? Do you have special internal tools teams that Facebook is famous of famous for? We did last year. We had invested in an internal tools team which was helping scaling some of the Async software that we were talking about. I, for better or worse, have been kind of the internal tools manager for the last six months. I was building, I mentioned this, OKRs. We actually built our own OKR software into Async gotcha and one of the beautiful beautiful parts of it is like when you're updating your okr it's got annotations that tie into the posts you're writing so we've got this nice long-running graph of hey here's this metric i'm moving over the year you can see oh here's where we launched this feature here's where we made this decision and you can see it annotated on the graph and but right now it's kind of just organic like teams make their their own stuff. It does tend to be a little more organic. I'll say in the early days, I think we invested more time in internal tools and it's something I'd love to spend more time on actually. Like I was just thinking, just listening to Async, I'm like, I remember this for us. Like a lot of our internal tools ended up being like YC companies down the line in the future. As I'm hearing Async and i'm just like oh god that's a startup right there uh more more recently most of the internal things that get built in zapier today are like apps on zapier we have a lot of folks in our engineering team and even more broadly on a support team and uh product design where we'll build features into zapier by building an app on zapier and this is kind of where some of like the innovation of zapier comes from is like quite a few of the most popular apps on Zapier were built by one engineer and a side project at a retreat hackathon. Just for fun, because it was like, hey, we're going to add this little bit of functionality to the product that doesn't exist. Maybe it's the ability... But it actually made it out in the product. That's actually the biggest criticism for lots of corporate hackathons, is people spend all weekend get really excited and they never make it to the life of day yeah we tried pretty hard to make like pick our packathon projects and we curated them in a way that we thought that there was some value that could eventually make it to the make it out to customers in some format or it would help customers in some way so what are the other things you guys do to kind of keep employee and founder morale high across a remote team yeah we do the probably the biggest thing we do is we do two company retreats a year um even the fact even though we're 100 remote there is still a lot of value for getting in person um and we don't like discount that yeah uh you get to build a lot of empathy you get to build relationship with folks and it allows you to kind of be assume best intent the rest of the year right when you're when build relationship with folks and it allows you to kind of be assume best intent the rest of the year right when you're when you're in slack and you're in that working on that tense project and someone leaves you know writes a message that might be a little more curt than it should have been it's like oh i i can hear their voice in my head like i know who that is i understand who that is like i'm not gonna jump off and like assume that they were trying to be mean to me or something like that and that helps smooth over a lot of issues that i think can happen when you are primarily using text-based communication tools where you do lose a lot of that tone um you have to try like really hard to use tone and it's just that's one of the first things that can easily get lost when you're like intense moments so there's a lot of value for building in-person relationships still um so we do two company retreats a year uh where we fly the whole company into usually some cool resort or hotel or place around the u.s or how long are those retreats it's a week and then friday what do you guys do during that time is it just hanging out or i mentioned some structure yeah we've tried a few formats um we've i mentioned the hackathon we've uh traditionally done like a hackathon most of the week and then we would have a couple days set up for teams to kind of break out in their own individual silos this past retreat we tried something different though um we tried giving one of the uh things we do a lot we run a lot of company surveys and we try to evolve and iterate how we run the company doesn't mean you do a lot like how often uh i mean anytime we're doing a company-wide thing you're probably going to be a survey sent out about like it to get feedback so we can improve it for next time over email uh it is tied into slack actually for how the survey gets sent i do there is an email though too i i'll i'll admit that. You're not there yet. Yeah, I still do keep my Gmail tab open. But yeah, there is like a Slack sign. But every company retreat, there's a survey. We send out two company surveys a year. I ran a product all company survey last year. So we do a lot of that. What's the best thing you guys do at the retreat that you didn't do on the first ones? Like what has retreat that you didn't do on the first ones like what has changed that you're like this is way better to do it this way uh so this last time the thing we experimented with was we added unstructured time we had always planned every hour of every retreat to date where fascinating i know this is interesting you didn't think about it earlier i know right it's probably a bias that's like or being like thinking we're in a remote mindset right which is like design the process how do we want people collaborating how do we want them connecting what and like make that happen and i think some of our like you know managers feel responsible to make sure their teams are taken care of and people know what they're doing and what there should be spending time on so there was just the sense where from the top from management perspective like we were over planning all the hours. And one of the things that that prevents is, um, cross team coordination or cross team communicate conversation, or what if like one person from the data team and one person from support and one, an engineer, like had this cool topic that they talked about it. Maybe one of our unconference sessions, they wanted to go hack on an idea. Like there was no time for that to happen in the past format. sessions they wanted to go hack on an idea like there was no time for that to happen in the past format and it just because it was completely top-down planned so we added these two afternoon sessions of unstructured time where we set the expectation that hey it's still a work day but figure out how to best utilize this time with your team and your peers how did you know it worked mostly through feedback at this point um i i was anxious about it going in like i it was so we did that we added this process in because of feedback we got before i want time like people had specifically asked for time to do this so we added it in i was still anxious that like folks would not take advantage of it i i was worried that they would just default to what they would do if they weren't at the retreat right Just do what I'm going to go do. Normal work. Work on my roadmap or work on support tickets in isolation. But we want to take advantage of the fact we're here. So I overemphasized in almost all my conversations with the team leading up to the retreat to take advantage of the time. And when I walked around and just observed the different groups of people that were coordinating in those afternoon sessions, I was surprised at how many people took advantage of the time. Like, given my anxiety, I guess, that it was not going to be as well-advantaged. I think it shouldn't be surprising. When you're hiring a bunch of people who are, like, default action, self-driven, et cetera, and then you bring them all together, like, they're going to do the right thing. Yeah. It certainly worked out well. And I will continue to do something like that in future retreats, I think. I'm curious, how do you guys do design critiques? How does that work in this collaborative environment? Because it's so difficult to even do it in person. And you guys have an interface that has to bridge hundreds and hundreds of apps together and hundreds and hundreds of different types of features together and so it's so complex and i'm trying to think of like doing that without people really close and diving deep on the problem like how does that work for you guys i guess i'd be interested to ask like why what assumption do you have that makes why what like previous belief or experience do you have, Kevin, that says I have to be sitting next to you in order to solve a problem like that? I think it's one of those things where for design in particular, it's hard to point, circle, resketch, et cetera. There's some things that on pen and paper in person i can show now i know that there's ways to do it where it's like oh i can do this show it by video etc but it seems slower and more inefficient i'm just wondering like is there things that you could do to compensate or is like you think about it differently yeah um it comes back down to being explicit again so uh one of the exercises i've done quite a few times with the team has been like the nine box uh design exercises what's that uh fold your paper into like nine boxes and you have like two minutes to sketch nine different ideas of a solution and then you have everyone present their nine ideas and then you do like a remix usually for like a longer five minute session and you come out with a lot of um just divergent ideas in a short amount of time and the time compression on being able to come up with an individual idea is intentional to like force folks not to get too deep in the thinking just to like go wide instead of deep i've run these over zoom calls where i'll literally ask i did this with the entire company last year uh where a little while ago where i asked um i was like maybe the point 70 or 80 people um everyone bring paper bring sharpie and i gave the problem statement up front and everyone's like just on a zoom call with their video i'm like sitting at their table right now drawing on their paper and they'd hold it up and they'd talk about it and i had them take a picture and post in the slack channel so there was like a higher fidelity version that they could see and they're holding it up and pointing to it. I actually see how that's stronger than normal design collaboration. When everyone's in a room, there's a pressure of like, oh, I don't want to look bad. Or like if I'm trying to sketch and figure something out, like it feels uncomfortable to do so in front of a bunch of other people. So I can see how like having everyone separated, it's like, oh, you're working your own kind of state. It feels can see how like having everyone separated it's like oh you're working your own kind of say it feels a little bit more safer to be daring yeah and there's like there were instances where i remember still having to like encourage folks like hey show it even if you think it's like bad because that's some of some of the things you think are weird ideas often end up leading to the right idea even if they're initially like weird um it'll just trigger like a different way of thinking about a problem that hasn't been thought of before um but we've so another process we have in addition to like doing kind of team exercises like this one of our more go-to processes that we've has been working really well for us the last uh last year was we were doing a um a tuesday thursday um essentially design review across several product teams so we would invite several product managers several product designers and the tuesday thursday cadence was how we built in that feedback we process where it's like okay i want to show something the team and get feedback on and get critique and then it's instead of only doing one a week where you'd have to wait a whole another cycle there's a forcing function to turn around and iterate and go deep on 48 hours to then turn around and show it back on thursday um that's and show it again so it's it's kind of like a bit of a mix where you still get that deep work in between the two review check-ins um but it's still on a zoom call well um one of the things i like to ask people to do on zoom calls especially in design collaboration sessions is like don't mute yourself uh zapier has built up this interesting norms around like what what is zoom etiquette right like how to when to unmute yourself when to like jump on video all that kind of stuff so we kind of i have to like intentionally ask folks to like break that habit and say okay for this please don't keep me on mute so to encourage folks to just jump in right i want folks to feel comfortable not waiting to give their feedback but just like to to generate a little bit more like randomness in that conversation um i think this is probably one of the things that is very interesting about remote and you there's a question someone asked around like how do you be innovative as a remote company or how do you and there's some amount of like randomness that you i think is probably desirable in an organization certainly you don't want it to be 50 or 100 random right you you want some low level of like randomness in terms of people talking to each other or what's being shared um yeah i think they're kind of alluding to like serendipitous chance encounters right weird like you know water cooler conversation yeah yeah one of the things we do is uh process we it's called uh pair buddies we're actually three people on these now we've gotten big enough where we have a bot that randomly just picks people that are in a slack channel and says hey two people should or three folks now should uh like here's's 30 minutes to chat. Okay. And the idea is like, you don't, no agenda, just like a 30 minute call over, share whatever you're working on and talk, talk through some of those ideas. I actually think this idea is interesting. I actually think a lot of companies or organizations, the group over optimize for serendipity. Like they're like, But to me, serendipity, where some random thing happened, all of a sudden we have a great idea, that's like hitting the lotto. And to me, optimizing for the lotto is very weird. 99% of the companies are like, we have a whole list of shit that we have to get done. And so to me, it's like optimizing for that should always be the first priority, not for the off chance of these other chance encounters. I'm always wondering like what is the right ratio because I think there is some I think back to our hackathons right where this is a totally individual driven thing and we had great things that got built that no one would have like top down plan to go build and surprised us Like where all of a sudden it's like, oh, this is my opportunity for this to happen. Versus like, yeah, well not forcing it, just like, oh, let's like have it all together and then maybe something will sort of bubble up. I mean, to me, like a lot of it ends up getting solved by just knowing what other people are working on, which is a problem across every company I've ever worked at before. It's like crushing email but what has he actually been doing we we don't have that problem we have the other other problem which is like i have too much i have too many opportunities to learn what other people working on it's like how do i curate down to like all right who are the people i need to know about what's working on so that i can do my job effectively. So kind of wrapping up, I'm curious about like, if I were to be starting out a remote company, what's the framework you would offer to say like, okay, you should do X, Y, and Z things and set yourself up for success to really get the most out of this? I think it is one of the reasons why it is so hard to add remote onto an existing company is because remote, well, when you see folks talk about it and ask questions about it's always very process and tools based i think the honest answer is that it's more of a cultural change than it is a process and tools thing so folks that are starting out actually how i think are at an advantage in this fact because there is no culture yet like it is you or it is your you know co-founders or whatever um and you have the chance to like set up the culture in a way that encourages things that are going to work in a remote organization so again thinking through things like defaulting action and encouraging empowering autonomy and how are we going to make decisions and thinking through some of those things in the early days um being exposed about writing down and sharing all the work that you do and building it a habit into the organization to write down everything that's done and share that with colleagues as opposed to relying on context sharing over like a Zoom call that's ephemeral and can get lost. Those are like the cultural habits and norms that are a lot harder to change in the future. Um, because you need everybody doing it. I think there's a structural advantage for folks that are a hundred percent distributed that everyone's in an equal boat. They're all in the same boat, right? I'm all in my home office. If other people aren't doing that thing, then I, I'm not going to be successful or happy in my, my own job. Um, so you can take advantage of that in the early days by like, it's a lot easier to set those, that initial culture up where it's like, okay, we do want folks to be individually empowered to make decisions. We want to hire folks that have like demonstrated this ability in the past. We want folks that are good at written communication that like over communicate, even like one of the things I often tell new engineers that are joining at written communication that like over communicate even like one of the things i often tell new engineers that are joining zapier and product designers is i have to encourage over communication a lot again coming back to the default no one talks like um it is more important and it feels awkward at first to like be just sharing a status update with like an empty slack channel or a slack channel where you're not expecting a reply like that takes that's a habit to build where it's like you have to realize how useful that is to the person on the other end where hey i might get blocked on something in that status update you gave four hours ago helps give me some context on something that i should be doing or how to solve a problem in a certain way um that otherwise would get blocked on a you know request response cycle from them and especially across time zones that's tough um so yeah being just setting up the right values around like autonomy and written communication are probably the two most important you guys wrote a book about this right kind of we did yeah it's a ebook on running a remote company it's a couple i think it's a couple years out of date from a process standpoint but it gets like the cultural what's the biggest right what's the biggest thing you wish you could update in the book um so like one i mean biggest thing probably how we've scaled async would be what i would go back and like to add to it um in there like the book was written at a time where we didn't we had enough people that could somewhat reasonably consume all the context that was published there on a on a monthly base or on like a daily basis or weekly basis that's not true anymore like we've had to be a lot more thoughtful and intentional about what are the is it a push first pull kind of mechanism um what's the what's the kind of algorithm that powers the default feed view that shows content that everybody should be reading in the organization on a weekly basis? And then what are thought leaders and other people in this space that you guys follow for inspiration that other people should definitely check out? Yeah, there's several folks that are bigger than us that have run remote organizations. It's kind of a little bit of rare air once you get beyond like 50 people, though, or even 20 people fully remote. Folks like GitLab is bigger than us. Envision is another organization that's largely remote. Automatic is another early one that we looked up to. I think the biggest thing, again, we took away from those was not from not a process standpoint or even a cultural value standpoint. It was, hey, it exists. This is not impossible. Right. Like someone has proved that it is possible. We are not having to trailblaze the fact that like it is possible to have a company with that many people that's fully remote. Now they have slightly all those organizations have slightly different value mechanisms than we do so like that's what we're gonna have to figure out as we scale is all right how does that how do we apply that size of the organization to where we're at um but yeah that's the biggest takeaway i would say is like remote is possible there's very large organizations that are doing it so um you're in good company if you decide to build a fully remote company. That's a great place to wrap it up. All right. Thank you. Thanks, Grabe. Thanks, Mike.