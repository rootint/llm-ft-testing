 This is a real privilege for me. We are here today with Dr. Werner Vogels. He is the CTO of Amazon and of course has a lot of really exciting experience with that. And so we're going to be talking to him today about his experience with Amazon, about his experience with startups, and about lots of technical topics as well that will be relevant to many of us. So thank you all and let's give it up for Dr. Vogels. Thank you. Okay. So we're going to be talking of course about Amazon today and about your role there, but I'd like to start with a little bit of background. Would you mind telling us about your career before you started at Amazon and sort of what brought you to that point? How much time do we have? So I was an academic before I joined Amazon. And so I've been a research scientist at Cornell for 10 years, building very large scale distributed systems. And as in common in American academia, you're being motivated to do startups on the side. So we did two startups on the side. One of them that already existed when I joined them and they got sold off and were successful to a company called Stratus. I don't know if anybody remembers that. It's before your time. And another company that actually failed. So we had both experiences. That was great, kind of. So before that, so I'm not the typical sort of computer scientist. I wasn't until 28 when I decided to actually to go back to school. I worked in hospitals before that, radiotherapy in the Dutch Cancer Research Institute, doing radiotherapy in cancer patients. And at one moment I realized that I really hated all these people dying around me. And so I decided to go do something that had no humans involved whatsoever. So computer science seemed like a really good thing to go into. And this is mid-80s, so computer science is nowhere where it is now to today. But it turned out I had aâ€¦ There weren't any humans back then. Let me put it like that, yeah. So it turned out I had a gift for it. And I didn't know that up front. And from there I went into research So, turned out I had a gift for it. And I didn't know that upfront. And from there I went into research because I worked with the kinds of things that I really was interested in. Got my PhD, worked in Portugal for a number of years in a research institute and then was invited to come to Cornell. And then at one moment, so what I did do around that time also when I was still at Cornell was actually either consult for large companies like the HPs and the Suns and whatever of this world. And also often gave talks. And so at one moment, Amazon invites me to come give a talk about sort of some of the material I was working on. And I think like, really? Really? Do I have to go? What is this? This is a bookshop. You know, it's a web server in a database. How hard can it be? One glimpse in that kitchen, however, and I realized that this is a massive technology operation. It's not a retailer. It's a technology company. And operating at a scale that I had never seen before, definitely not at other companies that that i'd consulted for and so the challenges that they were faced with from from a distributed systems researcher perspective were amazing and so i didn't need to think very hard when they offered me uh offered me a job wow that's incredible so that's interesting do you feel like that was um a change like today sort of like the interesting distributed systems problems are huge companies and maybe before it was academia or was that just the way it happened to go? I think that still is the case. I think most distributed system researchers have become more aware of the scale that these very large companies need to operate at or not even these very large companies. If you think about or not even these very large companies. I think if you think about, you know, any successful internet company or digital-only company needs to operate at a scale that is unparalleled. You know, in 2004, when I joined Amazon, I mean, many of you, if you're going to be successful, will be easily operating at that particular scale that Amazon was at in 2004. But there was no body of work that you could really rely on. There was no infrastructure that you had to rely on. So a lot of effort went into basically keeping the lights on, on things that cloud and other technologies now gives you. And so Amazon had gotten in 2004 to a scale purely by being practical. And it's not that there was a book or so that you could read how to build a scalable organization or a scalable company. No, it didn't. And so everything, Amazon was sort of, in my eyes, five to ten years ahead of the curve, both in terms of the usage of technology, of the development of technology, but also at the operational scale. And especially if you want to be a fast-moving company, it's not like you could look at traditional enterprises because they all sort of suffer from innovators' dilemma and other things are really slow at one moment once it becomes successful. How to build a company that needs to continue to move fast is a whole different story. And so you may be doing things that you may be making business trade-offs. For example, the creation of technical debt or the allowing duplication to happen and things like that would be out of the question in the traditional enterprise because efficiency is their main goal. At Amazon, moving fast and innovating fast and having a very long pipeline of experiments, that's the more and most important thing. So you're willing to allow duplication to happen, you're allowed to create technical depth as long as you know that you have to pay it off. So there's many trade-offs that Amazon has been willing to make over time that you can't find in a traditional MBA book. And so in most of these things, Amazon had to develop for themselves, whether it's technology or whether it's processes or business processes. It helps, of course, that with Jeff Bezos at the helm, you have someone who's a true visionary and truly understands sort of how the next modern world will look like or should look like. Thanks. So a couple of years after you joined, you were appointed the CTO of Amazon. Six months, actually. Oh, really? Someone asks you, do you want to be the CTO? He's not going to ask next year, is he? Wow, okay. No, so Alfie Muehlen, who was still at the company, by the way, he really wanted to be a developer and they had been looking for a replacement for him. And as I said earlier, sometimes you have gifts that you don't know about until you start doing them. And so I think I joined in September and I think in January I became a CTO. Wow. So tell me what that was like at Amazon, and then sort of what that role has shifted into as we get till today. Yeah. So one of the things that at Amazon, sort of one of the reasons for hiring me, and actually a few of my, I brought actually, what was it? I brought five of my students, former students with me when I came there. It was really to insert more sort of academic rigor into the way that we wanted to approach scaling. Where Amazon had become really good at scale, but the challenge was that we wanted to do orders of magnitude more. And in essence, we go from order of magnitude growth. You have to revisit almost everything that you do, whether it's your processes, but also your technologies. And so to really be on a solid footing to do sort of the next one or two orders of magnitude of growth that were coming, we needed to sort of insert way more rigor into our thinking. And it was, for example, around performance. How do you measure? What kind of infrastructure do you need for measurements? How do you, if you want to be a truly data-driven company that sort of makes data-driven decisions, you need to, first of all, have the data, but you also need to have a culture around how do you measure and how do you interpret those measurements. I mean, a medium latency of, let's say, 1.2 seconds of your web page to your customers doesn't say anything. It just says that 50% of your customers have a worse experience. You need to know how much worse. And then, from an engineering, so, for example, the 99 percentile or the 99.9 percentile is way more important often in those cases. And then, how do you create an engineering discipline that has control over that 99 percentile such that you can actually start pulling it in if that's what you want to do? And then be able to associate that with business decisions. For example, I mean, the common knowledge is that if you improve latencies of your web pages, conversion goes up. And so the question then is how much are you willing to spend to drive that conversion up? You need to have more capacity. You need to do more engineering. And so when you have a diminishing return on sort of the investments that you have to make to get that control. So all year, we focused really on performance and measurement and things like that. There was a bit in progress already when I joined. We did a whole year on focusing on single points of failure. Really, I think in 2004 we were pretty good in terms of reliability. There were rules around so we had to use three data centers, you had to replicate whatever you did over these three data centers, you'd be able to lose a data center, customers should not be impacted so you could lose two data centers, you'd be able to lose a data center. Customer should not be impacted. So you could lose two data centers. Customer can be impacted in terms of latency, but not in functionality. All of those rules were there, and I think we were pretty good at it until at one moment we decided, so why don't we pull the plug out of one of these data centers and see what happens? And the first time we did this was not like we made it as a surprise. No, we gave everybody a heads up that this is what we're going to do. We're not really pulling the plug. I mean, you pull the network, basically. So data center gets isolated. Turns out all these things that look great on paper didn't really look that great in practice. Although the first time when you do it, lots of manual processes still, manual database failovers, things like that. This is all pre-AWS. And so that's sort of a whole year focusing on that. And so by the time you do the third or the fourth of these, what we call game days, you actually get to a point where these things become really well automated and that you can actually do them without human intervention. One biggest surprise when we did the first time was, and then you bring the other data center back online. And then suddenly that data center has to sync with the other data centers. Man, that's a nightmare. That was a scenario that nobody had thought about. And so, but until you do these things, you don't know them. And especially at scale. So, and then we did a year on efficiency. We did some other things. So, and then we did a year on efficiency, we did some other things. So, mostly the role of a CTO is to drive really big programs and think about sort of what is the technology that we need for the future to be able to be on solid footing as a business? Or in the case of Amazon, what are the kind of unique technologies that we've developed that we may be able to turn into a business? Then things change at one moment because in early 2000, we had opened up the catalog. We put an API on the catalog. That was popular in those days. You just put an API on something to see what innovation happens. And it turns out lots of great companies were being built. So you would have access to the catalog, search, shopping cart, and I think one more function. Anyway, so lots of new e-commerce companies were being built based on the Amazon catalog. They would do comparison shopping and have wonderful new UIs towards the whole site. Really great stuff being built. But as soon as one of those companies became successful, they all started to stutter in the execution. They all needed to get investment, not because they needed to do the business operations, they all needed to start buying, not because they needed to do the business operations, they all needed to start buying hardware. And they need to hire IT people. And so all this investment was in essence an indirect funding of the American hardware industry. And so all of these companies had a hard time doing that. They had a hard time getting the investment, they had a hard time getting the hardware because you might order 50 servers. It's not like driving up to Costco and actually getting them in your shopping cart. And then hire IT people and things like that. So most of those companies that were initially successful around the Amazon catalog all failed. And they didn't fail because they didn't have great ideas, they failed because they couldn't get their IT staff ready or get the money to actually do that. And I think one of the things that has shifted with AWS and cloud is that the investment that you get no longer goes in large numbers to hardware companies, it goes into hiring more people that are relevant for your company and actually build your products better. En dat gaat in het horen van meer mensen die relevant zijn voor je bedrijf en je producten beter bouwen. Dus we starten 8DWS en we kunnen daar later meer over praten. Maar als je een technologieprovider bent, verandert jouw rol als CTO. Ik heb een blogpost gezet waarin er in, there's sort of four different types of CTO. Every large company in the world of a CTO will be different, but I think there's sort of four large categories. One is in enterprises, they're often sort of the infrastructure manager. They will report to the CIO, manages large amounts of infrastructure. And then there is sort of the second role, I think, is that of what you often see in younger businesses where the CTO is the technical co-founder, the one with the technical vision. I do think that that role is a dangerous one because there's so many other things that actually fall into that bucket in terms of VP of engineering teams and things that the CTOs may not necessarily be really good at, but we can talk about that later. Then there is the role of a big thinker. That's really where you're sort of driving innovation. If you look at companies like AT&T and Lucent and others, they all had CTOs that had an office of the CTO that would be really building next-generation technologies or experimentation there. And then there's the role of the external phasing technologist. If you're a technology provider to other companies, there's a role for an executive to actually interact at a deep technical level with your customers to understand how are they using my products. And looking for bigger patterns among your customers. What are the bigger pain points that they still have? Not only with our technology, but just in general. Often jokily said, so we're in the business of pain management, AWS. So what kind of pain do customers still have that they have to work on that actually don't contribute to the products that they want to build? And so that's sort of on one hand helping customers understand things, sort of being a bit of the evangelist for the whole notion of cloud, which definitely let's say 10 years ago was much more important than it is now. But then most importantly, take the feedback from your customers back and start thinking about sort of what new features or products you have to do or what kind of processes we need to change to make sure we serve our customers better. And so it's a much more customer-focused position than a technology-focused one. Great. I'm curious. Great. I'm curious, you were talking earlier about, especially in the early days, there were lots of tasks like the game day you were talking about to make sure that the infrastructure was up for scale. I'm curious if you've noticed in your time in Amazon as it's grown and the engineering culture has grown so much, are there any tips or tricks you've seen on how to grow an engineering culture and keep it moving quickly, you know, keep it effective? Well, given that Amazon is in reality my first real job, for a long time I thought that the rest of the world was just like Amazon. And it's not. There's a very unique culture at Amazon, I think, that works really well for fast-moving companies, and that is to build your teams as independent as possible, to remove as much hierarchy and structure from your organization as that is possible. Hierarchy, in my eyes, is totally unnatural. I mean, you need to have some form of hierarchy maybe for reporting or things like that or for some management pieces. But, you know, if you look at nature, there's a head monkey and all the other monkeys. There are no lieutenant monkeys. And so, no, I mean, you may have multiple groups of these, with all with their head monkey, but there is, and it scales really well. I mean, if you look at ants and all sorts of other patterns in nature, if you're able to build a self-organizing organization, which means basically that you hire people that really want to be independent, not want to be followers, that actually want to own a piece of the product and actually take ownership on that, I think that's extremely important when you're a younger business, where you don't need followers. You don't need just coders. You need people that want to have ownership over the piece that you want. And I think, look for that. There is something at Amazon that we call the leadership principles. There's 14 of them. And basically, it's all around culture. And so it's customer obsession, ownership, dive deep. And so there's 14 of them. Check them out. If dive deep. And so there's 14 of them. Check them out. If you type them in your favorite search engine, you'll find them with a deep explanation of all of them. But that really drives what the Amazon culture is. And so when we hire, let's say when you bring in someone for an interview, you probably have really figured out whether he or she is a good enough engineer for the phone interviews and things like that. Your interviews are all about culture. It's really, do you have a real good culture fit? Because there's nothing worse than a bad hire when it comes to sort of the culture kind of environment. Because that sort of disrupts your small teams tremendously. So at Amazon, we're a strong believer in very small teams. So 10 to 12 people. Because with 10 to 12 people, everybody knows of each other what you're doing. By the way, if you run Scrum, if you want to stand in the corridor in the morning with 25 people, that doesn't work. And so you're really focusing on small teams and making sure that they have strong ownership over the pieces that they need to do. And so, yeah, one of the building teams that are independent thinkers, want to have control over their own destiny, I think is important. I think one of the challenges is when you grow as a young business, often, I mean, the role of a CTO originally is probably that he does everything that has to do with tech. It's basically think about the technology, but also manage the teams. I think managing teams is a completely different discipline. There's a major difference between what I would call a VP of engineering and a CTO. The VP of engineering every morning wakes up thinking, do I have the absolute best team? Is my team in the best position to deliver what they need to deliver? It's a people person. I'm really thinking about making sure that your engineer is in the right position to deliver the technology, the products that they need to deliver. CTO thinks about technology. Are we building the right technologies? Do we have the right tools? Do we have all of these kind of things? So it's a very different job in my eyes than that of a VP of engineering. So I think as a, do you guys know Michael Lobb? Rant, I think is he well-known as sort of the blogger, write his pieces. If you're a manager, if you think about managing, I think in terms of technology management, he's probably sort of the most well-known modern writer that really thinks deeply about how do you make teams effective. And that's very different. But he's not a CTO. He's a VP of engineering. And so I think that sort of really embodies that. He wrote books about it as well. So really check out his stuff. embodies that he wrote books about it as well. So really check out his stuff. Michael Lobb Rants is his Rants and Respose I think is the blog. So really check those things out. Great. So you mentioned earlier that in sort of the early days of Amazon you had those companies integrating with you and they were failing for the infrastructure reasons. So is that where AWS came from? Or tell me, how did the idea for AWS happen? How did that get popular internally? Well, so internally the Amazon Retailer and AWS as well are more or less organized in such independent teams that most of those teams look like startups as well. Or they have complete control over their own destination. And believe me, the recommendation in zo'n afhankelijk team, dat de meeste van die teams ook start-ups lijken. Ze hebben volledige controle over hun eigen bestemming. En geloof me, de recommenderingsengine voor boeken is heel anders dan de recommenderingsengine voor schoenen. Ze hebben een ander team, ze hebben andere doelen, ze hebben hun eigen innovatiewijze, allemaal ontwikkeld door het team themselves, by the way. So we had gone through a number of architectural changes. So end of the 90s. So Amazon's goal was to get big fast. And you were basically violating all sorts of architectural principles to get to that point. That meant that it ended up with some sort of monolith and a massive database infrastructure in the back end that was very brittle and basically couldn't grow anymore from an architectural point of view. But remember, nobody had done this before, so they can't be blamed. It's not like you're violating the textbook. There was no textbook. And so then Amazon moves to what's called a service-oriented architecture. That was not a word that existed around that time either. So carving off pieces of Amazon beweegt zich naar wat we de service-geÃ«ntereerde architectuur noemen. Dat was geen woord dat er in die tijd ook was. Dus het afschrijven van stukjes van de monolith, het samenbrengen van de data die ze opwekken, een API op het plaatsen, en dan een netwerk-infrastructuur die we dan services noemen. En dat duurde twee tot drie jaar om dat te doen. Vooral omdat er geen geschiedenis was on, mostly because there was, again, no history about how do you run services. And so basically what we were doing, we were swinging the pendulum all the way to the other end. So in this one with the monolith, the whole set of databases were shared resource and basically the constraint. Because shared resources are the thing that sort of make you move slower. What we saw, one of the reasons for changing architecture was that we saw that the effectiveness of engineers was dropping off. Basically deployments were going slower, new features were getting slower, all these kind of things. And why? Because the backend databases were managed by a group of DBAs, so database administrators, the DBA cabal. And to make any schema changes, you had to go through them. And these guys were responsible DBA Cabal. En om schema's te maken moest je door hen gaan. En deze mensen waren verantwoordelijk voor deze databases. Dus ze waren zo conservatief als je het kan voorstellen. Ja, want de verantwoordelijkheid van de site bepaalde zich op hen. Dus dat zorgde ervoor dat onze effectiviteit en innovatie echt vervallen. En dus door te bewegen naar deze nieuwe architectuur hebben we al was really dropping off. And so moving to this new architecture we created all these teams that were going to be independent that they would have their own data stores there's no longer a centralized data store there's no longer centralized resources things like that. So oh great. Except for that we made some mistakes there. So one of the, okay two, three years later we carved off all these pieces the monolith is largely gone all surfaces. Turns out, that's a side story Twee, drie jaar later hebben we al deze stukjes afgehaald, de monolith is langzaam weg, alle servicen. Het is een side story, we hebben een fout gemaakt in drie heel grote datasets, kusten, itemen, dat is de catalog en beoordelingen. En we hebben eigenlijk al de code die op dat bepaalde data werkte als Ã©Ã©n service. In twee jaar was dat het grootste dat de monolith was. En dus moesten we in veel kleinere functiebewegingen deelvormen. Bijvoorbeeld, als je het over de Customer Master Service praat, dat bestaat uit tien kleine services, elke met hun eigen unieke schaling en verhouding. Bijvoorbeeld, er zou a login service in there that basically is called on every webpage, but in that same piece of software also set the address book service. That only is needed when you check out. And so, but that whole thing needed to scale at the scale of the login service, because that was the one that required the most scale. So decomposing that into different building blocks that each have their unique scaling and reliability and maybe security requirements We hebben dat in verschillende gebouwblokken gebruikt, die elkaar een uniek schelselen hebben, en verantwoordelijkheid en misschien ook veiligheidsvermogen, dat we naar wat nu de microservices architectuur noemen. OkÃ©, dus we gaan verder, al deze teams zijn klein, ze hebben hun eigen stuk, en dan zien we de effectiviteit van deze teams weer vervangen. Want wat er gebeurt is dat elke van die services nu een schelsel nodig heeft. these teams tapering off again. Because what happens is that each of those services now needs to scale. They all need to work on the same thing. They all need to manage load balancers, hardware, databases. Each of the teams now is responsible for actually replicating the database over three different data centers. So actually all these teams, you see the communication between these teams and the networking infrastructure increasing. There's all these gecreÃ«erd, al deze werk wordt gedaan, maar ze werken niet op innovatie, ze werken niet op het houden van de experimentale pipeline. Dus er was een andere rode flag en wat we realiseerden was dat al deze teams hetzelfde deden, omdat we de pendulum naar die kant zwongen, dat nu je je eigen database moest managen. Dus that now you had to manage your own database. So dropping actually databases into a shared services platform, dropping storage, dropping networking in there, and for example, also dropping making it an environment where servers no longer were servers but became virtual and you could actually manage them. So I think we were really good in those days in terms of hardware provisioning. So as an engineer, you would go to a portal. You would fill in what you need. Ik denk dat we in die tijden echt goed waren in het zaken van hardware provisioning. Als ingenieur zou je naar een portal gaan, je zou wat nodig hebben. Je nodig 10 meer Linux servers van deze soort. Een uur of twee later zou je ze hebben. En als je je kan voorstellen dat je eind jaren, tijdens het eind van de jaar, op de dag van de Vierde Kerst, de spijken vier keer zo hoog zijn, dus je zou... Teams nodig hebben van veel meer so teams need a lot more hardware. If you then would go talk to them in January and tell them, why aren't you releasing any capacity? So, you know, there's this project coming up in March, so we thought, why don't we just hang on to it? And apparently just an hour to get capacity is not a good enough incentive to sort of release stuff again. So we needed to go to a model, first of all, where you could take engineers out of the loop and where you could have business We moesten dus naar een model gaan waar je de ingenieurs uit de loop kon nemen en waar je bedrijfsregels kon hebben die besloten hoeveel capaciteit er aan de hand was. De servers moesten virtual worden, ze moesten een API krijgen. We hebben dus dit voor onszelf gebouwd. Als we kijken naar de bedrijven die aan de buitenkant vervallen, maar we hebben dit voor onszelf gesloten. Dan beginnen we te denken over wat technologieÃ«n, maar niet de technologieÃ«n zelf, maar we hadden ze voor het interne gebouwd en toen hebben we ze op het buitenland gebouwd. De eerste die we ontstonden was Amazon S3, de enkele storage service, in de spring van 2006. Storage for the Internet is wat we het noemden. En dus, echt in de oorlogsdagen dachten we dat dit wordt aangepakt bij wat ik nu internet-scale bedrijven zou noemen. Ik hou niet van het woord start-ups, want ik denk dat er veel andere soorten bedrijven zijn die uiteindelijk internet-scale nodig hebben en dat was echt waar we voor moesten. Storage werd de first one. We launched EC2 in the fall of that year. Same kind of mobile and interfaces that we used internally where suddenly compute capability became programmable. Within a few months, enterprises figured out that this was way too good a deal for them as well. And we know what the story is since since then so i am curious i mean at the time as you were developing this before it was released did amazon have a sense i mean it's it's a dominant product now in the world it's changed the way developers work at small and large companies did you really have that belief coming in this is going to change the landscape or was it just sort of like an iterate every year, more people are using it, and it just slowly grew into what it is today? I think one of the things that we were, I won't say caught off guard by, is that how fast it grew. That's definitely. Did we know it was going to be really big? Yes, that was the bet that we were making. So at Amazon, there's two types of innovation that happens. One of them is that each team by themselves is in charge of the innovation roadmap for the coming year. So teams do that for themselves. So as I said, the recommendation engine for shoes, who has as a metric to reduce the number of returns. So can you recommend? So if this Valentino's 9 fitted you really well, if you want to buy this Jimmy Choo's, maybe you do an 8.5. This seems silly, but doing returns is a tax. It's a customer-unfriendly kind of thing. So the more you can do that. So those guys are in charge of building a roadmap for the coming year, how to get new data sources, how to maybe engage with your customers differently. And that's something they make up themselves. There's no top-down saying, and thou shalt do this. So that's one level of innovation. The other level is the one that requires significant capital investment. And that was clearly something that AWS falls into that particular category. Things like the Kindle, Amazon Prime, others are all things that to do that, we needed to do significant capital investment. And at Amazon, we have to rule that if you do that, if it's going to be successful, it needs to be successful in a way that has significant impact on the Amazon balance sheet. It's not that we're interested in another, let's say, that sounds coy, but another $50 million opportunity. Now, if you make this capital Niet dat we geÃ¯nteresseerd zijn in een andere, dat klinkt een beetje kwaad, maar een andere 50 miljoen dollar kans. Als je deze kapitale investeringen maakt, moet je voor hele grote kansen kijken. Dus we wisten dat als AWS succesvol was, het massievol succesvol was. In een manier die we nog nooit hebben gezien. We wisten dat we veel nieuwe processen en technologieÃ«n en technieken nodig om dit allemaal te kunnen doen. Als het succesvol was. Ik herinner me dat we toen we de S3 ontwikkelden een nummer op het bord stonden. En we dachten dat we dit binnen zes maanden voor dit aantal objecten in de storage engine zouden bouwen. En dan hebben we er twee maaltijds van achter het. We hebben dat in de eerste drie ma en dan, voor de hek van het, zetten we twee orde van maatregelen achter. OkÃ©, we hebben dat in de eerste drie maanden doorgebleven. Ja? Oh, nu is het er ineens uit dat we, sommige beslissingen die we vroeger maakten, van de technologie-punt vanuit de zicht, waren heel smart. We wisten dat als je met elke orde van maatregelen van grootte If you would, with every order of magnitude of growth, you probably need to revisit the architecture that you have. So you need to build software that needs to be able to evolve over time. And for example, take a storage engine. If you go to the next release internally of your software, you can't just copy the massive amount of petabytes that you have on the other storage disks to do this. No, so you have to live with multiple architectures at the same time, versions all these kind of things fortunately and with all the lessons from amazon.com we'd actually taken the right steps there but there's been some challenges over time in that sense and but i think also just like with any other company it's not only the tech that you have to Ook, net als bij elke andere bedrijf, is het niet alleen de techniek die je moet schakelen. In de eerste dagen bij AWS zeiden we dat we geen salespeople nodig hadden. Dit is allemaal zelfservicelijke. Dat is niet het geval. Je hebt dus de architecten van de oplossingen nodig, je hebt technische accountmanagers nodig, case. It turns out you need solution architects, you need technical account managers, you need customer support, you need all these kind of things to build around your product that have nothing to do with the tech itself. But you cannot become a successful company way without that. I was looking just right before this interview, actually, and I was looking at sort of the AWS directory page. And there's, I don't know, I think it was like 130 services, and probably that number will change, you know, by the time we finish this conversation. I'm curious, how do you, as an organization, determine, like, how do you decide to build something new? Is there like, is it a top-down process? Is it just an individual team? What does that look like to launch something new? I think it works both ways. I mean, we expect all of our teams, as they are now, to be in very close contact with our customers. So about 95% of features and services that we deliver are in response to direct requests from our customers. And so that's a massive influx. Of course, the earlier services that we built, you could almost think about what they should be. I mean, what is the basic IT infrastructure, storage, compute, databases, network, security? I mean, you didn't need customers to actually sort of tell you that. We knew that those were the basic pieces that we needed to build. But pretty quickly, customers came with all sorts of other requests. I mean, if I look at the sort of things that AWS was really good at, at the fundamental level, it is scale, performance, security, reliability, and managing cost. Those are not products on the outside, but those are sort of core capabilities that come back in each and every one of these services. And so customers then came to us and said well you know can't you run analytics for us yeah this is the early days so everything about analytics around iot about mobile development about um you know that's these days blockchain uh all these other technologies that customers actually want to use but do not want to manage themselves. And as such, you know, helping them sort of putting up the right features or tools is important. And we also had a very strong culture around when we launch new products, new services, we will launch them with a minimal feature set. You could call it an MVP. But that sounds like that's, I mean, this is technology where other people need to build their business on. So you can't actually launch things that are flaky. It needs to be rock solid. So we launch things rock solid with a minimum feature set and then work with your customers on what should the other features be. Now, in general, we already have an inkling what the other features are going to be. When we launched DynamoDB, for example, we really knew customers wanted secondary indices. We didn't launch with them, but that was obvious that that was what they wanted. Mostly you launch with a minimum feature set because these are sometimes services nobody else has used before, nobody built. And so you need to observe your customers how they're going to use your product because you don't know upfront. Actually, they'll probably use it in every possible way except for the one that you intended it to. That is good. Because if you didn't launch with everything in the kitchen sink, then sort of you can focus on how your customers are using your product and then slowly start to iterate and adding new features and services to it in the way that sort of their new modern way of development is working. When we launched Lambda, which is our serverless environment, so basically you just write code, you dump it in S3, and you don't need to think about servers and anything else. You don't need to think about idle time. You only have to pay for what you use. Things like that. Great environment. Nobody had done that before. So how is development going to change? What are the kind of other support structures around it? een gegeven moment. Niemand heeft dat nog nooit gedaan. Dus hoe gaat het ontwikkeling veranderen? Wat zijn de andere ondersteuningsstructures om het heen? Oorspronkelijk, misschien hebben we het veel meer ontwikkeld als een gegeven moment, dus een nieuw file komt in S3, dat triggert wat code. Een nieuw message komt in, dat triggert wat code, API gateway, dingen zoals dat. Maar het blijkt eruit dat sommige van But it turns out some of the companies that actually immediately jumped on board with serverless were some of the largest enterprises. Why? Because you don't need to manage anything. And you don't need to pay if no execution happens. I mean, if you run a whole batch of EC2 instances, whether you use them or not, you're being billed for them. And in this case, you're only being billed for execution. And so it changes the way the development happens. And so you don't launch everything and the kitchen sink set earlier around serverless. You're going to see how your customers are using this. And then you quickly start iterating. We deliver X-ray as being the debugging environment, deliver step functions to build more complex applications. And there's a lot of more things coming down in that pipeline, mostly because you can observe how your customers are using your product. So, for example, in DynamoDB, we knew secondary indices. Turns out customers wanted row and item levels access management. Much more important for them than secondary indices. So, basically, customers reordered our roadmap to be able to sort of... And then we started delivering the things that mattered most to them, which I think is an important part in this. But again, even though it looks like an MVP, we can't treat it like an MVP because people will be building their business on it and will be depending on it. So it comes with a very different culture structure on it. Het komt dus uit een heel verschillende cultuurstructuur. In het laatste jaar waren er 1400 nieuwe features en services. Als het aantal teams groeit, accelereren ze ook. We gebruiken binnen AWS dezelfde structuur. De Neptune team, de grafische database, is vervolgens in contact met hun belangrijkste of de meest behoorlijke klanten. En ze begrijpen wat hun nodigheid is. to be in contact with their most important customer, or most, let's say, demanding customers, and understand what their needs are. And so each of these teams has their own customer set and customer base, and all built their own roadmap. The more services you get, the more roadmaps you get. But this is really a very fast-moving environment where the way that people are building software is changing dramatically, changed dramatically as well. If we would have sort of taken the step in deciding for our customers how they should develop software, you probably would have been developing software in, let's say, the way that five years ago, software, or 10 years ago, because that's sort of the structure you have. Instead of it, we need to start developing software how we would like to develop software in 2020 or 2025. That's kind of the thinking that we have. And you can't do that by deciding for your customers. You need to work closely with them and allow them to sort of drive your innovation engine. About a decade ago, you wrote a blog post called, I think, Working Backwards. You remember the one I'm talking about? Yeah. I'm curious. Could you describe sort of the product development flow that you put in that post? And then tell me what you learned and whether Amazon still uses that structure. We use it everywhere. And so the post is called working from the customer backwards so at Amazon we have a very strong focus on sort of developing only those things that really matter for your customers or even though we're a technology company and I think if you're a heavy technology company lots of engineering there's a there's a risk that the engineers get in charge yeah if they get in charge. Yeah? If they get in charge, you do not necessarily build products, you build technology. And so for us, I think there's a big difference between the two. I think what makes AWS, for example, successful is because we focus on products, meaning what do we want to build for our customer? Much more like, oh, this is this very cool storage system that sits underneath there that we've never built before, or how do we do global tables in DynamoDB? So this is all this amazing tech that we're building, but that's not what's driving it. What do you want to build for your customer? What is the problem you want to solve for them? So we want to make sure that, and whether that is in AWS or whether that is in retail is, of of het een nieuwe office in Menlo Park is. We gebruiken een proces die weken terug. Waarom doen we dit? Dus het eerste wat je doet, is dat je een pressrelease schrijft. En het is niet een pressrelease die gaat uit. Het is een pressrelease die je voor jezelf schrijft, in die je in heel duidelijke en simpele termen exact beschrijft wat je gaat bouwen. describe in very clear and simple terms exactly what you're going to build. Then you write a document with, let's say, the 20 most frequent questions. And then you have to answer those in very clear and simple terms as well. Sometimes, especially for more complex situations, we iterate on those first two documents maybe 10 to 15 times until it's really absolutely exactly clear what you're going to build and not more than that. Then you write the UX document, basically how are my customers going to use this or what is the interaction with the customers going to be. And then the fourth document is part of the user manual, glossary and some other terms, things like that. At the end of that, you have a set of four documents that describes exactly what you're going to do. And then the ruling within Amazon is that, and thou shall not be built more than that. Because as engineers, and I'm one myself, you have the tendency to sort of anything that makes it easy for you to build version two, you might already start putting that in version one. That's not an option. It's really focusing on building that and exactly only that. It gives us a really strong structure around how to think about customers, how to think about products, much more than about technology. So this is the product you want to build. Now, what kind of technologies hebben we nodig voor dat? Dus er is een heel sterk product denkende om dat heen. Het combineert met een ander proces dat we hebben. Dus meetingen op Amazon hebben we een moratorium op slijden. Dus geen PowerPoint, geen keynote, niets van dat soort. Waarom? Omdat in ontmoetingen slides dood zijn. De helft van de ruimte zal op hun telefoon zijn. En de andere helft zal al bij slide nummer 2 vermoeden zijn dat ze niet begrijpen wat je praat. Dat is duidelijk, want je hebt de hele presentatie nog niet gezien. Dus we werken in Amazon met wat we zogenaamd zespagers zijn. Dit is een zespagers document, een narratief dat je moet schrijven. De eerste 30 minuten van een gesprek worden altijd gespeeld door dit document in complete stilte te lezen. Soms halfweg door het lezen, ga je terug naar het schilderijbord. We spelen hier geen tijd mee. guys, go back to the drawing board. Don't waste our time here. Because why? Because it is very important because it's very hard to write a clear document if you do not have clarity of mind. Writing a narrative is extremely hard. And this might be, it's often a collaborative effort. You'll write it, you give it to some of your colleagues for feedback, you put it in your drawer, a week later you pick it up again and you revise it until you get to a point where you think you're really clear about describing whether it's a feature or a product or an activity or a new business that you want to go into. And after reading those six pages for 30 minutes, everybody in the room is on the same page. No pun intended, by the way. Or pun intended, whatever you want to say. So you get a very high quality discussion after that. Because everybody knows exactly what we're talking about. So often part of that process is then as an addendum to the six-pager will be the PR and FAQ. And you'll iterate on those. So we have a very unique culture around that. Five years ago, containers, or sorry, virtualization was still pretty new. A lot of companies were just moving to that. Today, everything is being containerized. You have lots of big customers moving to Lambda, to sort of totally serverless platforms. Where do you think development is going to go five years from now? How are we going to be building our apps? If I would have this crystal ball, I would be sort of, yeah. I do think, I see quite a few companies skipping the container step more and more. Not that I think, you know, so I think there is a, I think some part of the popular, the part of, I think what makes containers popular, one thing there is everybody wanted to go to a more microservices environment and I think that maps really well sort of with container technologies. We can scale things up and down easily in the single components that you have and so I think that matches the microservices thinking really well. I think most of the people that actually come into that phase often come out of the monolith phase, sort of breaking up the monolith into sort of those containers. I think people that start from scratch more and more develop around sort of serverless environments. And so you could even consider, so we've at AWS two container products. One is ECS, the Elastic Container Service. It's all around Docker and Docker capabilities and things like that. And deep integration for all the AWS services. And then there's EKS, which is managed Kubernetes service. So that's how we started off. The thing with containers is, especially before we delivered Fargate, and I'll talk about it in a minute, is that basically it almost brings you back to the pre-cloud days. Suddenly you need to manage multiple containers over multiple availability zones. There's almost so much that you need to map them onto virtual machines because these things don't run by themselves. You still need to manage the whole virtual machine environment underneath there. So even though containers is a great sort of development abstraction, customers need to do a lot of work to run those containers. So part of that will be taken care of because it's a managed service. We also delivered something that's called Fargate. So Fargate basically takes away all the management of virtual machines underneath there. So basically, just write a container, you drop it in there, it runs. Kind of. That's the state where you want to be in. I think every time when you need to do things that actually have nothing to do with building your product or running your product in the most efficient way, then that's sort of a waste of effort. And so we continue to look at how can we take more and more of those pain points away because you know what? Nobody cared who were running winning containers nobody cared about the virtual machines underneath there yeah it's just the tax that you had to pay um and i think we were sort of bringing up especially i think the interaction in the kubernetes group is really uh feeding many things back into sort of the mainstream kubernetes open source environment especially when it comes to things like security and things like that. So how are we doing things differently five years? That was the question. Yeah, I think there's a lot more serverless development because I think we see already an enormous pickup in and around that. I think we'll see more and more tools and sort of support platforms in infrastructure around the ability to build more complex serverless environments. Better integration, I think, with other services. That's definitely things that we'll see. But I want to shift to something else. I think one thing that we will be doing, I hope, five years from now, is that everybody will be taking security as their number one job. Whether you're the CEO, whether you're the CTO, whether you're an engineer, we all need to become security conscious and we all need to become security engineers. I think if you've looked at the past four or five years, I mean, there isn't a week that goes by where there is not so massive data breach. It's embarrassing. I think us as technologists and as digital business leaders, we should be embarrassed. But we are not. Where's the outrage? We almost seem to accept this as being sort of part of our business. It's not. Without protecting your customers, you have no business. And I think for every, and this is something that maybe as a young business, as a startup, you didn't think about 10 years ago or five years ago, where I think everybody needs to start with thinking about oh, this is the kind of data I'm collecting for my customers. How am I protecting my customers? And you may say, oh, who is interested in when Werner rented this bike here? Well, you know what? That data set plus two Odyssey data sets that you may get from other places may have a very valuable position. So I think we all need to become extremely security conscious and make sure that we can continue to protect our customers. It will be embarrassing, I think, as young businesses to actually start losing your data of your customers, it will impact everybody else in your environment, not just as customers but it will reflect on other young businesses as well and I think if you collect data of your customers, if you have consumer data, you have a grave responsibility to keep that data secure and you know there's also tools for it. There's encryption and we give you dozens of different tools that all can help you to do this. But you need to keep it in your mind that that's your first and foremost job. Of course, you all think, yeah, but we don't know. We're building this new service. We're building this new consumer service. We don't think, no, I think the only way, if you actually build your new business without security in mind, it will be very hard to retrofit it into it. And so you will have a nightmare, let's say, two, three years down the road when you become successful and you grow and you need to retrofit security, you're going to be in a major mess. So it means also that your development processes, because that's what you asked about, need to change. You know, security needs to become a default part of your, for example, your continuous integration and continuous deployment pipeline. It needs to trigger events. Whenever you're building something and someone adds a new open source library to it, an alarm should be going off for someone to inspect. Why are we adding this? Why are we doing this? Did we check this out from a security point of view? And so your development pipeline itself needs to be secure. There needs to be all sorts of alarms going off in that whole section. And security needs to become your first and foremost concern. There's lots of automation tools around it. So you deploy, you can use Amazon Inspector to test about all sorts of vulnerabilities. But if you do continuous integration and continuous deployment, especially if you, for example, in FinTech or in healthcare, you're subject to all sorts of regulatory requirements, how do you know that these new next five lines of codes that you just wrote don't violate your HIPAA? Or that you're still in compliance with whatever the financial regulator wants from you? So there's all sorts of automation tools that can continuously test this for you, but you do need to do it. And it needs to be in your mind. mind so development especially if you do continuously deployment changes radically from how we've been approaching security in the past now i honestly believe continuous deployment actually is better from a security point of view because in the past you would write 50 000 lines of code security team would come in would review it would bless it they had no clue what they were doing that would bless it 50 000 lines of code you have no idea it and they had no clue what they were doing that would bless it 50 000 lines of code you have no idea yeah and then you would deploy it changing five lines of codes is something that you can actually test with automated processes and automatic reasoning and things like that that you actually are building the right right right right thing so i think it is great advances for security we do need to keep security in our mind so i I hope that in five years time, we're not necessarily all security engineers, we're all super security conscious and protecting our customers will be our first concern. It is at Amazon. It will be forever our number one investment area, both in terms of intellectual capital, as well as sort of in financial capital, without protecting your customers, you do not have a business. Beyond not taking security seriously enough, are there any other common mistakes or errors you see startups doing as they use AWS? Well, first and foremost, I think there's a technical one. So we've got quite a few people that are for the first time AWS users, but that have already had experiences, let's say, building services and using a traditional data center. Using AWS as a data center makes it you lose out. I think, yeah, there are some advantages to it. You have some elasticity and things like that that you can make use of. But if you don't use sort of the higher-level services around security, around data analytics, around mobile, all of these where we take away a lot of the development for a lot of the hard, let's say the heavy lifting, you're losing out. If you just treat it as a data center with just some virtual machines and databases and storage, that's not where your major productivity improvements are going to come from. Some, but not the major ones. Next to that sort of more of a meta level, you have to figure out what kind of company you are. And I think there's sort of two different companies, two different styles. One of them is, you know, you go for the high growth, get big fast kind of thing, you know, acquire as many customers as possible, as quickly as possible, not necessarily thinking that much about revenue, taking lots of investors' money and really get big really fast to become successful and then probably be acquired because that's why people invest in you. That makes your use of AWS and your use of cloud very different from if you're, and we support that really well because you don't have to worry that much about getting capacity or services, whatever, it's all there. And it comes with a clear cost picture as well. That's different. Or if you want to become a sustainable company, basically I want to build this company but still be in business 30 years from now. Not necessarily focused on acquisition but just building a business. van nu. Niet precies geconcentreerd op de acquies, maar gewoon een bedrijf bouwen. Ik denk, als jullie het signaal en geluid volgen, de mensen van Basecamp, DHH en andere, en Jason Fried, praten veel over hoe ze een bestaande bouw maken, hoe ze willen bouwen, ze willen nog steeds in bedrijf, ze willen nog steeds dit bedrijf doen, 10, 20 jaar van nu. Hoe doe je dat? En dat is heel anders, dat behoort aan verschillende architecties. Het behoort veel meer controle over kost. Het behoort een duidelijke associatie tussen kost en kustenverkoop. Dus AWS steunt dat ook, maar het behoort je om heel verschillende architecties te bouwen. Want je wilt veel meer controle over kost en schaal hebben dan in de andere manier, waar we niet zo erg bezig zijn met kost, maar we zijn veel meer bezig met of we snel kunnen veranderen zodat we onze klanten en onze betrouwbaarheden kunnen beantwoorden, omdat we snel moeten groeien. Jeff maakt vaak de distinctie tussen mercenaries and missionaries. Mercenaries are the startup founders that are in it for the money. And missionaries are the ones that are in it for the love of the product. I want to build this product or I want to build this business. And you support both. They're both valid. They're both valid approaches to entrepreneurship. It's just that the tech support and the tech that you build for each for these different groups is very, very different. So figure out what you are. Alright. Well, thank you so much. This has been wonderful and we've learned so much. And everyone, a big thanks to Dr. Werner Voldo.