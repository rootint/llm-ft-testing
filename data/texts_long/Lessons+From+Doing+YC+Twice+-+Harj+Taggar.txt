 Hey everyone, today we have Harj Tagar. He is the CEO and co-founder of TripleByte and a multiple-time YC alum. So if you could just give us some of your backstory and we can go from there. Cool, thanks for having me. So I first went through YC in 2007 with my first startup, Automatic, where we were building e-commerce software to make it easy for small businesses to sell online. Then sort of a year and a half later, we sold that company. I spent a year at our acquiring company and came back to work at YC as a partner in 2010, back when YC was effectively just Paul and Jessica. And then we sort of grew YC. I left YC in summer 2013, took a bit of time out to travel and work on personal projects, and then started TripleByte with Guillaume and Armon, who had also gone through YC with SocialCam in 2012. And their co-founder was Michael Seibel, who's now the CEO of Y Combinator. And the three of us kind of started brainstorming some ideas and decided we wanted to work on TripleByte and went through YC in summer 2015. Okay. And what is TripleByte? Just to clarify. Yeah. So TripleByte is, it's effectively a marketplace for connecting software engineers with companies that are hiring. And specifically what we do is we put engineers through a valuation process that tests their skills without using their resumes or their backgrounds. And what that lets us do is find really great engineers who might not make it past the resume screening step in a lot of companies. And conversely, filter out engineers who do have great resumes, but don't actually have a great technical ability. And then we use that data to match them with the companies they'll be the best technical fit for. So we can kind of tell an engineer with a pretty high degree of accuracy, they may be a really great fit for Facebook, Dropbox, and three other companies that have a similar profile in what they're looking for and not such a great fit for other companies. So we can help engineers sort of streamline their job search process and just speak to companies where they have a high chance of kind of doing well. And where did that idea come from? A few different angles. So my co-founder, Armon, had originally sort of had an idea around recruiting and specifically technical recruiting being broken and just felt that it was a really hard problem. Each of us had experienced it at our previous startups, like how hard it was to hire. And I had seen coming out of working at YC that as soon as every company raised their seed round, the number one thing they complained about was how difficult it was to hire. And so we kind of knew it was a real problem. We experienced it ourselves at our previous startups. It started with this idea of, of well if we started a recruiting firm to solve this what would it look like and we kind of started thinking about things that we found interesting about that idea and the specific angle was this idea of data that if you were a recruiting company that specialized not in spamming people on linkedin but specialized in figuring out who was a great engineer and on the flip, figuring out what every company was specifically looking for. You'd have like this amazing data set and you could just make it efficient on both sides. So you'd have people looking for a company spend less time like in wasted interviews and you boost the productivity of companies because they'd spend a lot less time interviewing people that weren't a good fit for them. And so how many engineers have you placed at this point? We're not public with the numbers. Oh, it's good stuff just yet. But we've had about 15,000 go through our screening process at this point. Cool. And I've seen you guys put out a bunch of content and stuff like, what are the traits that companies are looking for? So we started out, when initially we launched, actually we were working with just YC startups. And so we've expanded to outside of that, but we're still predominantly focused on, I'd say sort of internet software companies. And what we found is that most of them are looking, a trade that's most in demand is kind of what we call like the product engineer, which means someone that's able to think about problems in terms of like how will this like, you know, help our users or grow our user base or boost revenue, as opposed to being attracted to just interesting technical problems. problems. Another trait that's pretty common, actually this is like a shift that's going on I think in the hiring process for engineers in general, is looking for signs of coding productivity as opposed to theoretical knowledge. So Stripe potentially was sort of like a big proponent of this where interviews are shifting, technical interviews are shifting increasingly towards here's a laptop, here's a project, and debug the code or show us you can build something in a couple of hours, as opposed to here's a whiteboard and show me how this algorithm would work kind of thing. So we're finding that actually knowing your tools well and being able to productively write code during an interview or just show examples of being productive as a engineer as opposed to having a great base of theoretical knowledge is increasingly in demand and so it's not even take home at this point it's literally like spend a day build something companies some companies do do take homes the trade-off with doing a take-home project is um you have a drop in the number of people that will go through it so specifically often what happens is when someone decides they want to find a new company to work at they'll apply to multiple companies right and if you are the one company that has a take-home project and they have three other companies that they'll just do an on-site interview and get them through the process then a lot of engineers will just choose not to spend the time doing your take-home project. Oh, okay. Conversely, it can actually help you find really great people because a lot of people don't perform well under a timed interview, but are really great, smart people. And they actually can do better when you let them work on a take-home project when no one's watching them. And they can actually show you what their strengths are under that. Yeah, for sure. Cool. And so if someone were to be looking at building that skill set, what would you recommend? Do you recommend people go to boot camps and do that stuff? So boot camps, this is interesting. Boot camps are controversial because a lot of tech companies have had bad experiences with boot camp grads and they can almost act as a negative signal. What we found is that the top tier with bootcamp grads and it can they can almost act as a negative signal what we found is that the top like the top tier of bootcamp grads are on par if not better in certain dimensions than the top cs grads um and specific this is getting a little anecdotal but like specifically what we tend to find is that people who have uh an engineering background like whether that's software engineering or maybe it was like just a form of engineering but they like didn't go into programming they like worked as a investment banker say boot camps can be really great for them because they like they teach you like the exact tools that companies use and they teach you kind of like how to build web applications and you already have sort of the general principles of engineering as your as your base and so you can come out of one of those programs and be like a top tier junior engineer but i wouldn't i mean you wouldn't recommend a boot camp to someone who's already been working as an engineer for a while okay and if i say i'm a high school student do i go to college and study cs or do i go to a boot camp um depends depends what you want i mean again this is what i could like answer that in like a number of ways yeah if you depends on the person i imagine but if you're optimizing for like time to get your first job a boot camp there's a strong argument for why like you know a boot camp is three months of like intense pressure um i i think like the arguments for doing like a cs program i you know apart, apart from the social aspect of going to college and meeting people and just developing yourself, would be not all companies are only building web applications. There are a large number of companies that highly value computer science knowledge and it does, arguably, it does help longer, having a more fundamental underpinning. So it's kind of, it's up to you, but it's not as, it's not as clearly obvious as maybe it was before that getting a CS degree is the only way into engineering career. Fair enough. So you are one of increasingly more people now that have done YC multiple times. And this is one of the reasons why I wanted to have you come in. So you've done YC twice now, in addition to being a partner for several years. Why did you decide to do YC a second time? Yeah, good question. So for us, I think there were two big reasons. for us there were I think there were like two there are two big reasons one we we really were like very early stage with with triple bite in that we had the idea and sort of enthusiasm for the idea but we didn't have a process type or anything and this is this is like just over a month out before the batch was even gonna get right and so what YC really helped us do was it was like a forcing function and a deadline to just like get everything together and like be really focused and like make sure that we like just did the maximum amount we could to kind of get something out there and launched. And that kind of just continued throughout the batch. Another reason is we are, you know, our product, we're a marketplace, but like one side of that marketplace is technology companies. And so even though I kind of had a strong network from YC, both being a partner and having gone through it before, having like another like hundred or so companies that are in our batch and, you know, some of whom are going to go on and be like huge companies like that. Sure. That's like, that just helped a ton. of whom are going to go on and be like huge companies like that sure that's like like that just helped a ton like i think there's a really strong case where if you're like a b2b company um being part of a yc batch can just help a ton with getting your first set of customers and feedback in a sort of low risk way and did you have any thoughts on like how fundraising was different the second time around um there was just there was such a there was like a an eight year gap between me going through yc right and so the whole environment yeah so so 2007 yc really looked that that demo day was just a group of people who were friends with paul and jessica um and were mostly there to see if there might be some cool teams that they liked hanging out with and wanted to like write a small amount of money to and as a company going through yc you weren't expected to raise a big round it was kind of like oh well if someone might if you want to work on this as a company that was the decision after three months right it wasn't it wasn't like how much money do you want to raise it was like am i going to go back to grad school or do i continue working on this thing and like try and build a real company around it. And so it was like a very, very different environment. And in summer 15, that was completely rare. Like no one at this point, it's very legit. Yeah. Well, by summer 15, like at this point now, YC has like the huge successes, right? So it's like Airbnb and Dropbox and people are, people are there like with like, you know, some people have like moved away from their families for the three months. And so it's, like, it was a real way in this, like, everyone, like, is there to build a really big company as opposed to, like, figuring out if they want to start a company at all. What was it like doing office hours for the second time? It was, I think the biggest difference from the first time going through YC in the second like well one the first time going through yc 2007 there weren't actually four more structured office hours so it's just pg yeah just pg jessica so all that happened is that you might occasionally get an email from them saying kind of how's everything going and if you had something you pinged them and said like hey like can we meet up and talk and so we actually did that um uh when we went through ic in 2007 and so that actually that format that actually was pretty similar to like what one-on-one office hours look like today like there are they are mostly just a conversation where you bring the things you want to talk about and you get sort of high level advice about about them in like you know like 30 30 35 minutes um uh the big change was like the group office hours. We didn't have that during 2007. And that was actually where most of our interaction with YC came through in the batch was the group office hours where you have like 10 or 12 other companies and sort of two or three YC partners. And you kind of go around updating on what you got done over the last couple of weeks. Those were really useful for us actually because everyone was grouped. were grouped into um like the other let's say like enterprise startups and the good thing about that was all of us were going through kind of the same issues where enterprise startups tend to not have as easy to like it's not as easy as like 10 week on week user growth because you're typically trying to get just like your first deal and so the metrics that you have for like work are how many like companies have I spoken to how much outbound have I done and everyone's kind of in the same position doing the same thing so there was like really useful advice that came out of that like how do you best take advantage of your time like between meeting your batch mates and like setting up uh relationships whether it's a deal or otherwise um you i think during yc you skew heavily towards the latter like you skew heavily towards um just work obviously right like you spend you don't actually i don't think you and i don't even think this is honestly the case during 2007 when there are 11 companies in a batch the relationships i formed in 2007 um and some of those people are really close friends of mine even today, like Robbie Walker is a part-time partner at YC now. And we didn't really get to know each other that well during the batch because everyone was just working all the time. It's more like in the time afterwards as we got thrown out of our apartment and we didn't have a place to stay, so we ended up staying with Robbie in his apartment in like 2007. And like and that still happens today. Like during the batch, everyone is like heads down trying to build their thing. The relationships tend to come like post YC because then you're all going through the same sort of issues. Right. Like you're all trying to like hire your first person. You're all trying to like figure out how do you manage, like you're all trying to figure out how do you scale and grow a company together. Cool, and then what about the learnings you took from being a partner to then being in the batch again? Like that's a very unique experience. Yeah. Yeah, that was a unique experience. I think, to some, okay, so here's what I think. I think during a Yc batch is like a participant it's really really hard to not fight the temptation to feel competitive with everyone else in the batch and generally um there are always some percentage of people in the batch who are like talking very loudly about like how amazing like they're just like doing tons of revenue they're just like every investor is desperate to invest in them and um i just knew from being like a partner for like several years that that like those the companies that talk the loudest during the batch doesn't correlate with anything right like often like the really i don't know like you look at like an instacart or something like um like apuva the founder was just like really heads down building that company he wasn't really talking about like what he was doing during the batch. And so I kind of knew from like a logical and like high like overview perspective that that stuff really didn't matter. And like there weren't any, none of the signals about who was doing well during a batch meant anything. But, and I kind of like try to, I think like maybe help other batch mates like just kind of understand that. But yeah, it is actually just like emotionally, it's very hard because like, it's like, you know, doing a startup is a stressful thing. And most people who start a company have somewhat of a like competitive like streak or a desire to like push and like drive and be ambitious. And so you kind of can't, there's a really strong impulse to feel like you need to be competing with other companies in the batch which doesn't help you in any way well that's one of the criticisms that i've seen go around where it's like people are essentially saying that like yc focuses on growth growth growth during the summertime yeah um sometimes to the detriment of the product did you find that was the case at all with you um i have come across and actually like even some of my like friends who are YC alumni have made that like same argument for not doing YC again. And I've always just found it, I've always found it somewhat nebulous. Like I don't see, I don't think that early on there is anything to optimize other than like growth. Like I think you have to like pick the right metric. And so I agree that maybe early on, like the right metric for everyone is not necessarily like revenue, right? Like it may be that the right metric early on is just like, how many customers do you like? How many potential customers did you talk to this week? And like, you should be optimizing talking. Like if that's for you, if that's a stage you're at as a company where you need to like do discovery and figure out if anyone wants your product, then yeah, you should like be growing the number of people you're talking to every week right um because like that just means you're making progress quickly um and so um i think yc focuses on like action and focus and if you have action and focus the output of that should be a growth rate of something um and so i think i think for us for example we've done like triple y is a business that is enterprise in the sense of we generate revenue when we place an engineer. The average time for someone like entering our funnel to place and being revenue for us is more like sort of like on the six to eight weeks end of the spectrum because people take a while to interview and decide what they want to do. And so going through Yc for us i never felt pressurized in like the wrong direction like i felt pressurized to like why can't you speed this up like how many engineers are you screening per week that's ultimately like the metric that's going to drive this longer term and that should be going up but i didn't feel like it was like dumb advice in the sense of you should be growing your revenue even though it takes you like six to eight weeks to book revenue and yc is a 12 month program a 12-week program right so did you find yourself like trying to advise the startups in your group like no actually that was um uh actually it was something i generally try to avoid doing um uh i actually just didn't like again like yc creates like the upside of like having a slight competitive streak I think is it does just push you to do more and like be really focused and so um I I was like my head was like entirely consumed with just like how do we make sure white grow as much as possible in the next three months not like how do I help the other companies in my batch fair enough do you remember your stats at the at the the batch? I'm not sure. I think, I'm trying to remember. I think we were, I can't remember the exact numbers to be honest. I think we were like probably around, I think we'd done maybe like 100K or 150K in revenue by the end of YC. by the end of YC. So like the absolute revenue numbers look pretty good because again, we're like enterprise in the sense of a low volume number of deals, i.e. placements. But like each placement is quite valuable, which is like how enterprise deals tend to work. And so kind of coming out of YC, our revenue numbers look pretty good for an idea we'd been working on like full time for 12 weeks. And then what about just general advice for people in your space? Like if I'm looking to find engineers, what do you do? I mean, use triple glides and obvious. How do you guys find engineers? And then that's one of the questions. And then like, obviously use triple bite. Yeah. I mean, so, okay. So yeah, sourcing engineers, like And like obviously use Triplebyte if you're a company. I mean, okay, so yeah. Sourcing engineers like just getting is sort of like the first battle. We're unusual in the respect that what's worked really well for Triplebyte to source engineers has actually been a combination of just like writing sort of blog posts and content articles about like what we've learned from doing all these screens. And no one's really writing good quality content about how you run a technical interview like how you make your decisions what correlates with what companies are looking for um so that that's helped us a ton um i actually here's a kind of like one thing i'd say um one thing that's really helped us our core product is effectively a technical hiring process and we've paid a lot of attention to making that be a good experience for everyone that's coming through and that's generated a lot of word of mouth in terms of other people say oh like this was a really great interviewing experience you should try it out i think companies can totally do that where if you if you take the time to give your candidates personalized feedback on how they did and suggest how they might improve if you take the time to do that you can generate like word of mouth um in the sort of the engineering engineering community as a good place to go and interview. Other things, I think early stage companies should mostly focus on referrals and trying to find people that they've worked with in the past or they have some signal on what they'd be like to work with. So you would totally early on, you totally want to, if you're making a trade off between like aptitude and skills and ability to work well with someone early on, you want to like lean towards like the latter. Because, you know, if there's only a few people, it's okay. Like you'd rather take the person who might be slightly less skilled, but you know, you will work well together over like the person who's highly skilled, but like you would like not look forward to coming into the office with. Yeah. And then what about if um if you're vetting someone remotely do you have any particular tips and we actually vet all of our candidates um remotely through google hangout so we this actually works really well for us like you can google hangouts lets you like screen share you can let them use we let them use their own environment so they effectively what they do is they pick the language they pick their tools and we give them kind of the problems they need to work on and they just share their screen and so you can get like a real insight into not just how they solve problems but how familiar are they comfortable in their own environment and you see them at their best and i think that that's that actually that actually works really well and if anything it like helps remove the bias that you might have from meeting someone in person when you're trying to just figure out like their the skills okay um all right so we have a random list of like counterpoints against doing yc a second time uh i want to just hear your answers to some of these um okay so someone asked uh were you ever worried that doing yc a second time would be viewed as a sign of weakness to a bc um no not really like because i think i had seen i think really the only thing that matters in fundraising is having traction and i just like continually saw that like being a yc partner like the companies that raise on the best terms were not the companies that have like necessarily the strongest fundraisers as their founders or it was just like the companies that had like the product that was doing the best so i cared a lot more about what's gonna what's gonna give me the optimal chances of building something that has traction in the next six months more so than like what's a vc gonna think about my decisions on how i run the company um and so yeah i wasn't that wasn't something that concerned me because i didn Because if I have a product that's growing, VCs really don't care about all the other stuff. They just care about that. Yeah, so do you think that actually your background didn't matter all that much at all? It helps. The background, having previous successes, having a network, these things help get your foot in the door. But honestly, I think they can also like that can also like um put you in a bad position where when you have like access to capital and investors and um investors want to base what invest in you based on like your like you know what you've done in the past as opposed to like what signs are rather what you're working on now is great you can like easily and i've seen like there's like a bunch of examples of this like you can easily raise too much money early on off the bat and like that just like pushes you in weird directions right it's just like so easy it's so easy for you to feel like you have a real company because you raise like 10 million bucks and you have a vc on your board and you hire a bunch of people but like a startup is just like not really real until it has like real users and real traction and real growth. And so that's just like the only thing that I, that's the number one lesson I learned from being a YC partner, which is like everything else just is fake until you have like real traction. So do what gets you traction. I felt that YC was going to boost our chances of getting us traction. So it was like the right decision. That's a really good, but do you have any advice for someone who's like a founder who maybe has done something successful in the past to just kind of like check themselves and not go nuts? Yeah, try and, so I think so between, before, before starting Triple Byte, I took like quite a while to like figure out like what exactly was I wanted to do. And I had friends who had in similar positions where they sold a company before. They had a strong network amongst the investor community and the Silicon Valley tech community. And they get stuck for years, actually, sometimes trying to figure out what they want to do. And the problem is that, well, one, you have this network of really smart people. And smart people can find a hole in any idea, no matter how perfect it is. So you constantly seek feedback from really smart people and everyone pushes back on what you're working on. And so it's kind of hard to find something that someone doesn't have a negative view on. And then the other thing is you end up optimizing for things that sound really great at like dinner parties and social events. And so you end up on these like blue sky vanity projects, right? Like you end up like, oh, like I'm going to cure cancer, which is like a very great noble goal. But like, I have like no real idea of how I'm going to do that. And so I think ultimately, I think, again, what YC like helps with is because you have to focus on growth, the only way you get growth is by solving a real problem. And so it gives you an environment to make sure you're not working on something that's made up. And it's really easy to do that as a second time founder because investors really want to invest in your thing, especially early on. People want to work for you. You have a strong network. So you can just kid yourself into feeling that you have a company when you just don't and so stepping back from that like pre yc the second time how do you go about choosing something because i yeah i know tons of people like exactly like you're talking about who just like vaguely are around at this point there's so many different ways to come up with um like what you want to work on i i would like to answer this in somewhat of a meta way i actually think the best way now um the best way to start a company is really not to explicitly want to start a company um it's what we did and it's working out fine for us and i think it's a totally viable path to starting a company so like drew with dropbox for example he knew he wanted to start a company before he knew what the company was and so he like he was trying to like he'd set himself these like frameworks for like what are the things are important to me the idea that i work on and he set those up front he was like i want something that's got a clear business model i got i want something that you know is like a hard technical product because i like working on hard technical problems um and like out of that through those lenses he like assessed all the ideas he came up with and dropbox was the one that like met all the the requirements he's like okay i'm going to work on this and so that's kind of what we did with triple buy like we wanted something that we had personal experience with the problem had a clear business model and we felt that we had like a clear strategy on like what would be unique on the distribution side to get started so like that's how we went about it we're, what are the criteria that are important for us in the idea? Let's filter all of our ideas against those. And when we find one that's a match on everything, like we should just go ahead and do it. I think the better way, honestly, though, is to not be explicitly trying to start a company is to like, think about what are just like areas or problems in the world that I think are like interesting and build really deep domain expertise. So for interesting and build really deep domain expertise so for example let's just say you decide you do want to cure cancer which is like it would be a huge benefit to society um i don't think the way you go about that is like what startup could i start to cure cancer right i think it's like i think it's like okay well like do i understand biology well enough to make a first pass at this no okay well then should i go and invest a year or two in like going to grad school and studying biology or should i make friends with someone who's already got a phd in biology and learn as much as i can from them and maybe they will start a company with me like once i kind of understand the space well but um i think that like building deep domain expertise in an area and then going into like uh a startup is a is a better way to do it and so say you were to do that and like basically people around the valley at a certain point will know your name right so you have this interesting thing that happens like people just try and like jump on the party yeah bus or whatever um how do you go about like finding new co-founders building a new network at that point inventing people um you yeah it's there's like no right or wrong way to do this again but i think okay in terms of finding co-founders you you again want to lower the bar in the sense of you will just never find like i mean someone you know like just dating and marriage potentially like you're never going to find like the absolute perfect person across like every. So I don't think there's any secret to this. Again, ideally, the best way to find a co-founder is not to really be explicitly looking for a co-founder. It's just to have a group of friends that you would start a company with. Again, taking a step back, I remember at startup school a few years ago, Phil Libin, the Evernote founder, he sort of said this in a somewhat funny way, but I think it's practical advice, where he claimed he was strategic over the last decade about everyone he made friends with, he'd only make friends with someone that was a potential co-founder. I don't think he was like, I don't think that's actually like practically, I don't think either you should do that or that's probably what he did. But that is the best way to find co-founders is to be working at working on a problem somewhere that you'd have close contact to people who have skills that are complementary to yours and just being like building building friendships with them over a period of time as opposed to be trying to like explicitly find co-founders but if you are in that position then i think you honestly you run it as just like a a funnel like you like run and you like go out and meet as many people as you possibly can you like make a first you make your best guess like how many of these would i like to try working on a project with um and then of those how many would i like you know seriously consider trying to like focus on just like one single project like how do we go from like dating multiple people to like just being exclusive and then seeing like how it goes from there. Projects. Yeah. Basically, I just think you run it as a process. Oh, yeah. No, absolutely. I find that that's by far the easiest way. Just simple projects start from there. Okay. Kind of a random question then. You took a sort of sabbatical between being a partner at YC and doing Triple Byte. Yeah. How and doing triple bite yeah how was that experience and did you go into it thinking like you were going to come out with a revelation of sorts or or what why did you do it possibly somewhat i think um i had two big motivations for wanting to just like take i guess a sabbatical and do travel in particular one is i'd always wanted to take a year out between uh finishing high school and starting college to do a gap year which i don't know if that's the American term but in England it's I think people know what it is yeah and I actually like started planning where I would go and what I would do but like but I just knew my parents were going to be so like annoyed with me if I did it and so I like I actually yeah I didn't I went straight into college and so I kind of always had a bit of this regret of I never like did like the backpacking travel experience and i figured that like the older i got like the less likely that was to ever happen so i kind of always knew i wanted to do that at some point so leaving yc seemed like a that seemed like a good time to do it because doing a startup doesn't isn't like the best optimization for having long uninterrupted periods of time to travel um and so and then the other reason was yc was like a great vantage point into everything that's going on but in in terms of like finding something to focus and you to like work on can be a little bit of information overload so i kind of just like actually wanted to take a step back and get away from tech and startups and thinking about startup ideas and knowing what everyone else was working on because when you realize one one thing that like being an investor maybe and being a yc partner in particular gives you is a realization into just how many people there are in the world working on startups and how like no idea is unique right so i would find myself like i would find myself like this with like friends who were looking for startup ideas right they said oh i want to start like a digital loyalty card. And I'd be like, oh, well, that's a really interesting idea. But there's like 20 other companies. I just read 20 YC applications for this exact same idea. And so I think to some extent when trying to start a company, ignorance is bliss. And this is partly the reason why first-time founders often have so much success. They're just completely unaware of how difficult what they're doing is and how many other people that are working on the exact same problem. And they just don't care and go ahead and do it anyway. And so the experience of just being removed from tech and startups and just kind of doing something I'd always had as a life goal or dream was good for me like personally and did you come back with any particular revelation i know i think that was that was probably the disappointing i was the same way when i traveled i guess i'm back yeah there's definitely like that there's definitely that sort of like you know you read enough articles on the internet about like how traveling solo like change your life and like i'm glad i did it and it was a useful experience but it wasn't like i had like deep meaningful revelations about like who i am that i didn't realize before cool all right man this has been great thanks for coming in awesome you