 All right, Vivek, why don't we start with what you guys do, and then we'll rewind to before you even did YC. Yeah, sure. I'm Vivek, one of the founders and CEO of HackerRank. Our mission at HackerRank is to match every developer to the right job, with the underlying driver being skill. I mean, so resumes are just a very poor correlation to skill, so that's how we got started. I mean, so resumes are just a very poor correlation to skills. So that's how we got started. The way what we do as a product, as a developer, you could come on to HackerRank to practice and improve your skills across different dimensions, whether that's algorithms or artificial intelligence or database skills. And when you're applying to a company, instead of going through the traditional route of uploading a resume, and it's mostly going to be a black hole, you take a company's coding challenge. So if you want to apply to Airbnb, you take an Airbnb's coding challenge. If you want to apply to VMware, you take a VMware's coding challenge. And if you have the required skills, basically we automate the whole code and give you a report. Then you get called in for an interview. So it's great for developers because it's a merit-based process. So it's great for developers because it's a merit-based process. It's great for companies because now you're able to attract the right developers for their interview process. And what might one of those challenges look like? For instance, Airbnb, are we being put into the code base in any way? What would it look like? Yeah, I think that it varies. So we've built a platform where it's super custom for companies to go ahead and create. So you could have a simple problem-solving challenge to something close to a real world where you could give an access to our GitHub repo and people can go ahead and modify the code, fix a bug on your repo to go ahead and do it. So there's a wide range of problems that you could give on the platform. Okay, gotcha. So you guys haven't always been doing this, correct? In its exact instantiation. Yeah. So let's go backwards. Before YC, what were you working on? Yeah, sure. So Hari is my co-founder. We knew each other from college. We used to do a bunch of things together in college. And we started the company, technically. We quit our jobs. I used to work at Amazon as a developer before this, where I did a lot of technical interviews, which is kind of where I saw the problem. You know, the resumes were not a good correlation to skills. So we quit our job. The way we started to do the, we thought that the way to solve this problem of resumes not correlating skills was to help prepare students for their interviews. So we started Interview Street. That was our first version. And what it did was mock interviews. So let's say you had an interview call with Amazon or Google next week, you could come onto our site and attend a mock interview with either somebody from Amazon or somebody, an ex-Amazon person who can give you a walkthrough of here are the things. We'll do a mock interview and give you what are the areas that you need to improve, where do you stand on all of those things. And the students would be paying these people for their time? That's right. Okay. So it's going to be hard for people to comprehend the value here in the US because we were doing it in India. But we were charging 350 rupees, Indian currency, from the student. And we used to pay 250 rupees to the interviewer. So 100 rupees goes to our pocket. So you could almost imagine that to be something on the lines of um i mean technically it's six dollars and five dollars yeah um but but as you mean you earn different amounts yeah different amounts you could say a student would pay 200 something like that and an interviewer would get about 150 dollars okay so then if you if you then think about it in that way it, it was pretty expensive for students and we didn't have any good payment gateways or anything of that in India. So we used to set up campus ambassadors in different colleges. And Hari and I used to do a trip every month to visit all of these colleges to collect money from these campus ambassadors. Cash. Yeah, cash. Wow. So our accounting was all pretty funny. And from an interviewer perspective, 250 rupees or like $150 or something on those lines here is not very, is not enticing, right? If I have to spend an hour of my time doing a mock interview and giving you feedback, is it it um so we i still have the excel which projects us to make i think somewhere on the lines of 100 million dollars uh or 100 crores uh whatever it's like 50 million dollars something along those lines yeah given the trajectory in the beginning yeah i think we made about four thousand rupees or maybe about that's like equivalent of a hundred dollars here okay uh after a year or a year and a half uh so clearly you could just drag the cells in in the excel in whatever way you want and get the numbers but it's very hard to execute so that failed i mean we had a lot of lessons uh that we learned from that uh most importantly i mean the students didn't have cash we had a lot of lessons that we learned from that. Most importantly, I mean, the students didn't have cash. There was a lot of scheduling. And I think one of the things that YC stresses on the most, I wish we had actually done YC at that point. I think this was done by Paul Bouquet. Make something that 100 users really, really love versus making 1,000 people or 10,000 people sort of okay-like. I think we should have focused on, you know what? We're just going to focus on these two companies, mock interviews, right? Versus any tech company anywhere in the world, and we were scrambling for interviewers from Amazon, Google, Microsoft, all over. We should have just focused, you know what? These are the three companies that we're going to focus. If you want to get a job here, you can come and do and make it really happy and then figure out a way to scale, looking back. Yeah, of course. But did people like the product? Yeah, whenever people did the interviews, they really liked it. In fact, there were a lot of really interesting testimonials of people who actually attended the interviews, got their job, they knew what are some of the areas that they need to improve, they need to prepare and all of those things. Yeah, that's great. Yeah. I mean, I remember all the interviews I did during college. Like if I could have just gotten the email of someone at one of these companies, it would have been invaluable to me. We used to do that sort of informally in college, right? When we were in the final year of college, we used to train people for sort of mock interviews and others. So this was more like an extension. Why extension yeah why can't you do this on over the web across everyone interesting so you weren't necessarily off the mark around finding something that people really like but you found that you kind of hit a ceiling somewhere um and it was it wasn't very focused either so there were a lot of there were different cohorts of people some of them were students some of them were uh were a couple of years into their work expedience okay And some of them wanted to do technical interviews. Some of them wanted to do sort of a automobile interview. And then we had to go ahead and scramble and figure out, can we get somebody from the automobile division to come and take the interview? We had no contacts. So we had to figure out a way to scramble through LinkedIn and Facebook. I think it was sort of OK. But it really taught us to stay strong. Okay, and so at what point do you decide, you know what, we have to change this, this isn't working? Yeah, it's probably about 18 months. Well, we had applied to YC. We'd applied to Y Combinator with this idea. Of course, we got turned down. Then we, I think it was about 12 15 months something on those lines when i mean clearly this wasn't going anywhere uh the excel was completely off the trajectory of the excel graph and where we were um and then we switched our business model or idea to something different okay um so there is a big uh trend or trend that is still present in India, which is once you graduate you have to do your masters in a school here. It's huge. I mean pretty much, you know, I don't know 80-90% of people would attempt their GRE, which is your standard way of getting here, your TOEFL, they will prepare their statement of purpose, they will do all of those. And the application form is pretty expensive. And so you could only apply to maybe five or six universities because it was so expensive, and you couldn't just apply to all the schools in the US. So what we did was we connected people who were already studying in these schools who can review your statement of purpose your resume and tell you if you had a chance to come here to apply to the school okay so that was our pivot that actually took off a bit but then after three months or so the traffic was down to zero turns out you can only apply twice a year so so we didn't know what to do for the rest of the year we'd actually applied to YC even with this idea. There you go. We got turned down. So I think this whole thing about mock interviews, applying, helping people apply for their masters, prepare, maybe a year and a half to two, something on those lines that we worked on. Okay, and then what sparked you to start working on where you are now? Yeah, we were close to bankrupt. So there was a real need. And, you know, of course, we had really good jobs. And Amazon was a great company to work at. Were you in India working on Amazon? Yeah, all of this is in India. Okay. And so then we realized, okay. So just to pause you really quickly, how are you making the connections of people here if you were based in India? Sure. So what we did was we used to take the directory of people from our school who went ahead and did masters at all of these different universities and who are working in different companies. So we used to go through the directory, keep calling people, email them, hey, are you interested? We are from the same university we put that university touch in to get them on board so it was just friends network second degree and i used to i used to make i don't know 50 calls every day wow to get this going okay and just for context for me uh people from india want to do a master's here because it's a like a gateway to getting a job here or what um i don't know how it started maybe it was just i think i i think it is it's sort of a checkbox okay i'm not sure that this changed now but it was definitely i mean i graduated eight years back it was uh nine years back it was definitely, I mean, I graduated eight years back, or nine years back, it was definitely a pride. Okay, you know what, I'm going to do my master's here. And there's, of course, some glamour associated with the great American dream coming here and getting working in the Silicon Valley. Silicon Valley is sort of this mythical place for all technology developers to be here. So it was more like a checkbox. I still think it is the case that you would have to apply if you had good GPAs and if you had good grades. The question is, why aren't you applying for your master's? That's funny. Even among the very talented, smart kids going to great schools in India. Yeah, for sure. I think it's, why aren't you applying for your master's? Why aren't you doing your PhD here in Carnegie Mellon or Stanford or Purdue? And there are a lot of, actually, Hari and I might actually be the odd men out. Because you didn't do it. Yeah, we didn't do it. And I'm happy because I'd applied to six schools and all of them turned me down. I was so dejected when the last school turned me down. But in hindsight, it's great because I don't think we would have started the company if i'd come here no probably not it is the conservative move yes and uh you have to once you graduate you'd have to get a job because you have to pay back the loan which is pretty big so you you do two years of masters then you do two to three years of working in different companies to pay back the loan and there's all of these visa things and by the time you you want to start you're already i I don't know, close to five, six years invested in this. It's really common. And the friction to, or the inertia to go ahead and start another company when you're happy working at Amazon or Google is going to be hard. Yeah, definitely. And so, okay, so you're basically out of money. Yeah, we're close to bankrupt. Yeah, and yeah, so we had a clear choice, which is we could go back and get a job. I think we could have got that. But something, we just wanted to keep going. We just wanted to try this out once more. And I have no idea what kept us going at that point in time. And there was some conversation we were just walking around, which was, it sounds obvious. Hey, if you have to make money, you have to sell something to people who have money. Otherwise, there is no way that you're going to make any money. We were selling to students and others who were already in whatever they had called student debt and they had very little money. very little money. So that's when we said, hey, can we invert this, which is can we build a product for companies to help them identify the right developers based on our skills? Of course, we didn't have the mission written down, like match every developer to the right job. But looking back, I think that was the core of every decision that we made. And we felt we'll still stay true to our core, because it doesn't, mock interviews is one way of doing this. But if you actually give a platform that can enable developers from, it doesn't matter which school did you go to, which company you went, but you have a chance to showcase your skills and get the dream job that you want, then that's great. You know, we should build a build a platform for that you know that's how we got started and that got the early traction so that was the third time we applied to yc uh and yeah yc called us that time oh all right and was it because you were showing significant growth at the time or the idea was just working out i mean i don't know i i definitely didn't want to ask why why are you guys calling us now because i didn't want to spoil the chance. Is this a mistake? Are you sure? So that was our first trip to the US. Oh, man. Yeah. And we had some struggles there as well. Hari, my co-founder, couldn't get his visa to come here. And I still think it's the stance of YC, but YC cares about co-founders a lot. And so I got my visa how you couldn't get and so i flew in here just for the 10 minute interview um this was yeah six years back um and fortunately we got in and i remember you know i think i think there was a panel of interviews it was pg sam harge jessica and paul bouquet there were five people interviewing me okay um and you know that's the first i landed in the morning and the evening was the yc interview because i couldn't get my visa on time so you were the last day of interviews yeah last day of interviews probably the last one like yeah yeah could be could be the last one as well uh could have been uh and then you you see all these five people is a creator of gmail you're obviously a little stressed and then you don't have a co-founder and pg asked where is your co-founder because you're gonna get his visa um but it was a it was a good intense 10 minute uh and frankly i didn't think we'd get into ic uh so it was and and maybe it worked to our advantage because it was just completely open and honest about everything because i i didn't i didn't fake any of my answers or try to impress them look this is the problem i really want to come here and go ahead and do this. And it probably worked out to our advantage. Interesting. Yeah, I mean, so what you were working on before has this separate difficulty in the application because you have to educate someone about what it's like in India versus here where we have the exact same problem of like, oh, we're this company. We have all these jobs. We don same problem of like oh we're this company we have all these jobs yeah we don't have enough engineers like yeah let's sort this out yeah yeah i think there is a there is an there is a different um uh way things i mean yeah you're right the environment is different i mean i remember um uh i used uh pgs so i didn't have uh so i used to sit in the pioneer way office one combinator office for for most but actually our first office was right opposite to the YC Pioneer office. Yeah, yeah. It was the RethinkDB's old office, which we actually took. So it was right opposite. So I used to be in Y Combinator for the most part. I remember I took PG's charger, Mac charger, by mistake, home. And this was the second day or the third day and i was i was i was so kind of i didn't know what to do because oh my god what is pg going to think and then i started emailing i'm really really sorry i took your charger he said no problem just keep it just keep it there tomorrow and i said okay are you going to come in tomorrow and he said he's not going to come in tomorrow um i because the the way at least i was brought up and for most part in india is if you keep a charger or if you keep the amazon box right outside the door somebody's going to take it away right um and even the even the tiny things and then i had to you have to learn about how the environment is different uh how people talk how people react to it. And the dinner time here is 6.30. So I remember sending a calendar invite for dinner to a person that I want to recruit for 9 p.m. And he said, that's kind of my bedtime. So I can't meet you at 9 p.m. So there are all of these things that you have to learn. And it's not just the macro part of the developer, how it works, but even the tiny things about how you interact how you work with people and all those things you have to learn yeah yeah has that been incorporated into your product because you know i imagine you have all these international people applying to u.s companies yeah how do you help educate them on the cultural norms yeah no it is it is a really good question because right from um how you um sort of how the the types of sentences or words that you use varies quite a bit between what you would say to somebody in Asia, what you would say somebody in UK and what you would say somebody here. So all of those nuances we need to take care of because there is a different cultural aspect on how you sell how you talk um how you get people going here it's really difficult um how long did it take you in particular i think it's a forever learning i don't think i've perfected it um i've gotten my dinner time now at 7 p.m i've shifted a little uh but uh but i think it's a constant learning i don't think i don't think it's ever going to stop yeah my, my friend moved to India for a couple years and he explained the exact thing opposite. It was tough for him. Yeah, I mean, it's just the way you grow up is different. I mean, there's nothing that's right or wrong. It's just different and you have to get used to it. And I remember PG and Sam correcting me from everything to even the tiny nuances. So in India, you would probably say programmer. You would add the A at the end, but here people will not be able to follow. It's programmer, right? So if you have to say, and when I was doing my demo day pitches, all of these little things mattered because it was just a five-minute pitch or, no, I think it was a two minute or a five minute pitch for the, in the demo day. And every little thing matters a lot because when, when you're talking to investors, so it's not just the accent, but how you talk, how you schedule meetings, how you follow up and everything is different. Yeah. Demo day is tough universally because I mean, you're pitching amidst a group. I think you're pitching amidst a group I think you said your batch was like 60 or 70 yeah I think our batch was 63 or 65 yeah and so that's enough companies for one to just fall into like monotony no one pays attention but interestingly I really enjoyed it because I've never been exposed to such a large group of investors and I was I couldn't even sleep the previous day I was looking forward to it look I wanted to pitch and get a series A going. So I frankly enjoyed it. I was looking forward to it. That's very cool. So you raise money after YC and you're committed. You're like, okay, we're going to stay in California at this point? Yeah, I mean, after I came here to Mountain View, and I don't know, maybe that's, that's, that's partially the reason, uh, the first city, well, I technically landed in San Francisco, but immediately took a cab and came to Mountain View. It was, um, I, I just, I think everything, everything looked great for, for most part. I mean, the, right from the, uh, kind of the people that you interact with, the advice that you get, the weather, the food, sort of the perfect mix for me coming from India. You had the weather similar to Bangalore and the food similar to Bangalore and Chennai. And then you had all the people that I really wanted to talk and get advice from in terms of building a company. So it was a perfect mix, at least for me. So I was very much determined to stay here and build a company. Man, what was that like, you know, flying here and then seeing all the people who you read their blog posts? PG is an easy example. Yeah, yeah. What was that experience like? Yeah, it was kind of surreal. I didn't know it was, as I said, I thought I was going to just stammer and flunk the interview. But like I mentioned, I didn't think we'd get in. Actually, we were the first Indian-based company to get into Y Combinator. Really? Yeah. And so that was another, quote unquote, I don't know if it helped or didn't help because we thought, okay, they've never chosen a complete Indian-based company. So our odds are low. That really helped because I was just completely free and open. But it was great it was great to meet all of the uh all of the people that you admire far off from reading their blog posts or twitter or watching their videos yeah and what were your what were your greatest learnings from the experience from YC yeah um I think the the intensity was very very high high because there was a dinner every week. And I noticed that each founder had their own set of people that they interacted with. Of course, I interacted with a lot of them. But you talk to a few people and then you hear their updates every week. And you want to push harder. And you have a fixed deadline, three months down. Three months, you have a demo day, which you have to go and present to investors so you have a fixed demo fixed timeline to to make sure that you have a good prototype you have good possibly paying customers to go ahead and do it and i think the bar is continuing to increase right at every demo day um so i think the intensity uh i think the learning is i still still think Hari and I have that intensity for most part, which is good. Wow. How do you keep it up? Because people talk about this all the time. They're like, it's so cool having a cohort that you can kind of benchmark yourself against. Yeah. But once you're out, you're kind of out. Yeah. I don't know. Maybe we're just, it's DNA or we're just consistently hungry to win. But I think the challenge is, can you extend that across the entire company? I don't think we've done an okay job at that. So I think that's something that we still need to get better at. That's a challenge. So to fast forward massively to now, the reason we started talking about doing the podcast in general was that you guys released this developer skills report. So just for folks who haven't seen it, can you explain it? Yeah, sure. So we have a developer community that's over, I think it's 3.4 million as of last week. That's slightly over 10% of the world's developer population who come to HackerRank to solve challenges, to practice their skills and get better. And one of the things that we wanted to do was to learn more about our developers. So we sent a survey. Actually, it had 40 questions. There was a lot of debate. Firstly, will developers attempt the survey? And then you're sending a survey to developers with 40 questions uh something on the on the slides what are the odds that somebody is actually going to fill this so we sent this to a million of our active developers whoa um and it was amazing we got close to 40 000 people complete the survey that was huge yeah i think stackflow had 60,000 and they have 20 million developers or so. So if you compare the ratio, the engagement and how many people completed the survey was giant. And hopefully we can beat Stack Overflow's number next year. Yeah. What was your email subject line? How'd you get so many people to convert? That's a good question. And we did A-B test, but maybe Nicola or our marketing team, Ritika, they might have a better idea on what was the subject line. But we did A-B tests, a few things, and we also tested on the timing, you know, when to send to which cohort, depending on the country, depending on the geography and all of the others. Because you're fairly distributed, right, in terms of your user base? Yeah, so maybe it's about 26 to 28% in Automatica, about 40-ish percent plus in Asia, Asia Pacific. And then you're talking about 15 to 20% in the UK and the remaining is the rest of the world. Just wherever, okay. So for each of the geos, we also optimize the subject line, when to send them, and how do we actually position this. So we did a bunch of things on those lines. Was it dialed in for language or all in English? I know it was all in English. I don't think we changed any language. So the questions were waiting from when did you learn to code to what do you look for when you're switching for a job? Or if you're a hiring manager, what do you look for in a candidate? So we had a wide variety of questions and some really, really interesting insights. So we engaged a firm who could parse the data, who could do real analysis on this. And we're also likely going to put this up on our website for all of our developers to go ahead and do the analysis with our raw data. So something might happen maybe in the next couple of quarters. Yeah, it was really interesting insights. And we published this earlier this year. And we got over half a million developers to read the survey. I think this was a huge milestone and exceeded kind of at least my expectations in both the quality of the content, the design, the reception that we got. And of course, this podcast wouldn't have happened if it wasn't for that. So it exceeded my expectations in all dimensions. So, all right, I guess the most important question is, what programming language is the most popular? I think it varies across different industries. And, you know, for, I think the one that people want to learn a lot is Python, and the one that's starting to get a lot more popular is Go. But it varies across different industries from what financial services want versus the fast-growing internet companies want versus retail. All of these companies are transforming into software companies so each of them have a different variation of it okay and so for a developer who's curious and sees this survey yeah do you kind of funnel them through a flow on your site like if you're interested in getting into banking you ought to be learning x yeah it's a good question so we are trying to do the reverse which is what what do you want to learn? What language and skills do you want to learn? And then we'll help you recommend, you know what, where can you most fit? Where do you see, where does HackerRank see you the best fit or the best job for you based on all the data that we've collected? Okay, gotcha. So let's go through some of the facts, some of the fun facts. So I saw in the beginning of the report, it's a lot of stuff about age. So when do people start learning how to program? When does it all begin? Yeah, I mean, I think the most fun insight was one in every four developers learn to code before they learn to drive. That was a really interesting insight that we were able to get. And it's not super surprising for me as a developer, but when we announced this, it was just, I think it was the most popular insight. We even started printing t-shirts in our company. That was an interesting one. And it just shows the fact that self-learning is starting to become big. People are learning on their own. You don't necessarily need to go to a particular school to do your four-year degree and then understand how to code or how to build applications. And it's just going to, I think, over, if you just extrapolate the trend line, I think this will be two and four or three and four developers will learn to code before they drive in the next decade or so. Yeah. And did you collect any data around bootcamps, coding bootcamps? Yeah, we did collect. I think we collected data on how much the hiring managers or others valued the bootcamps and kind of learning. It was mixed, to be frank. I think there were certain hiring managers who valued it a lot and certain hiring managers who didn't. And my guess is it probably depends on the quality of the bootcamp. lot and certain hiring managers who didn't. And my guess is it probably depends on the quality of the bootcamp, right? I mean, there are a lot of them who, there are a set of bootcamps who say, you know what, come here, doesn't matter whether you know how to code or not, I'll help you become a great React developer in 90 days. I mean, that's not how it works, right? And it almost seems like a negative signal for sometimes, which is, oh, you didn't know how to code 90 days before, and now you're claiming that you're a React expert. You know, that puts me off. So I think it depends upon the quality of bootcamps. And then on the other extreme, you have the school, which I was personally really impressed by. It's called 42. It's a school, actually, PG tweeted about it. It is in France. That's right they just opened they just opened um just opened another one in fremont where i uh had a chance to visit where it's you you of course had to take a minimum level of coding proficiency challenge or a test yeah and then you are allowed to explore whatever types of um computer science topics that you really like and then figure out which one you have a natural attraction or a passion for, whether it's security or machine learning or a front-end developer, and then continue to get better at that, and then we'll help you connect to the right job. So that seemed to be a different approach than a lot of other things. But it's massively different, right? Because if I understand it correctly, they're giving people room and board. That's correct. And it's free and it's over the course of years that's right right that's right yeah so yeah it is it is it is very different it'll be interesting to see how that experiment works because uh i think it was started by a really a big billionaire in in france or something who just wants to help the world uh so i'm not sure how how it might work from a business value proposition, but at least in terms of a net improvement to the world to create more developers and to help improve technology, I think that's a great start. So I think that's why the boot camps are a mixed one from the hiring managers at least. Okay, and then what are the differences between startups hiring and big Amazon-type companies? What are the differences between startups hiring and big Amazon-type companies? Yeah, I think the one common thing was everybody stressed on the importance of problem-solving skills, irrespective of whether you were a smaller company or a bigger company than others. And the one thing that the startups or the execs cared about the most, because at least in a startup, you might have a recruiter or not, but most likely you're doing the recruiting on your own. They cared more about your contributions or your open source contributions or your profiles or portfolio much more than what a large company cared about. But at the heart of it, people wanted strong problem solvers. And also, one of the things that was present in the survey was how you wanted to dive in deeper on the knowledge of that particular stack, at least for a startup. Because of course, you have very low or pretty much no bandwidth to train somebody on the new stack that you're working on, versus a large company where you have a little more bandwidth to go ahead and train. So you're okay with a generalist who can come and learn a new language versus in a startup, I'd like you to know the particular language or the stack before you come in. So those were some of the nuances or the differences that you can see between a startup and a large company. So in terms of structuring a job offering to someone, or rather just a job posting, what are the things that end up appealing to developers? Yeah, I mean, this was very interesting because I assumed differently, and of course, always data over opinion. And one of the things that we learned was how work-life balance beats all of the different perks that people offer, whether that's free food or we have a ping pong tournament every week or things along those lines. And then we, I actually didn't believe this data firstly. So I wanted to do another survey for people who did the work-life balance, who actually opted in. What do you really mean by work-life balance? And what we learned was a lot of developers have their own projects that they want to learn, that they want to build on the side. And the environment that you're working should give a good amount of balance and probably even support, if you can do, on the things that you're learning on the side or they're building on the side versus what you're doing for the company. So that was kind of an interesting insight about work-life balance. And one of the things that I like to do at Hacker Anchor, and we're still discussing on how do you position this in the right ways, if you have any of the side projects that you're working on, we'll fund the infrastructure cost for that. So we're still figuring out how do you position this, how do you give this away. And I'm pretty sure after people hear this podcast they're going to email the developers at least. But that's one way of helping or encouraging people to do that as well. Oh, interesting. And so what are the other ways that companies signal that they have that work-life balance figured out? Or is it just like, folks come in for the interview, they get a sense for it, and then they say yes or no? Yeah, that is one. But I also think if you're actively contributing to open source, whether that's, I mean, for example, we are improving a lot of the open source code editors that are there right now. We've not done a great job in letting the world know about all the improvements that we've been doing, but that's one way. And of course interviews help a lot in understanding more about the developer culture. Okay. And do you guys have any rules around working on side projects? Because I know that at larger tech companies there are totally issues. And I don't think they really flex that muscle very often, if ever. But yeah, companies like Apple are infamous for not letting people do side projects. Yeah, I mean, that's probably one of the advantages when you're small. I don't think we have any rules. I don't think we should put any rules because it's just freedom or creativity to go ahead and do it. And frankly, if it's going to be conflicting with your core idea and you're scared about it, maybe you should take the developer's idea and implement it. Maybe it's better. Or otherwise, you don't need to be scared and you can just have the developer work on the projects that they want. So I don't think we should put any rules, but I agree. I mean, a large company like Apple or Amazon or google will uh will need to put in constraints yeah yeah although google hacked this by putting a 20 percent um uh rule where you could 20 of the time you can work on your projects i think that's how gmail was born uh where i think paul bouquet worked on his 20 free time uh to build Gmail. So that's how they hack it. It's not really technically a side project that you do outside. You use all the Google infrastructure and libraries and eventually contribute to Google. So that's one way you could try and do. Interesting. What else is attractive to a developer? Yeah, and the other thing that we had on the survey was really on continuous learning. I think there are just so many new things that come up, new layers of abstraction, which is obviously very enticing for a developer, new frameworks. I mean, there's a framework for JavaScript that's getting launched every month or every two months, which is kind of driving crazy because you just have to keep migrating from one hour to the other. And the other thing was continuous learning. Can I learn new things? Can I learn how to get better? So that is a forever learning attitude or culture. What else did you learn about how developers are actually educating themselves? So obviously some percentage are going to boot camps, some are doing CS, what is everyone else doing? Yeah, it was really interesting. even though you had a CS degree, a lot of developers said they actually learned a lot from YouTube over books or sites like HackerRank. It's not a plug for HackerRank, even though I think the title might say this or whatever. But that was really interesting because that's a new, that's going to change, that's a paradigm shift, right? Because if you look 10 years back, and paradigm shift in recruiting, because if you look 10 years back, you're going to use GPAs and universities and the companies that you worked at as proxies. But now the proxies are changing, right? It doesn't matter if you went to a great school and had a great GPA. If you learned on your own and built a lot of things on your own, that is what is needed. That's all is enough. So the way that you look for in a candidate, who do you look for? How to assess? How do you get people in the door? And how do you remove biases that's been there for not 10 years that's been there for 100 years so do you go to this school or do you work in this great company how do you remove this those bias and truly focus on the skill i mean it's a lot of work it's going to uh but that's a big paradigm shift and it's a very good and healthy trend if more developers can learn on their own for free you don't have to pay a hundred thousand dollars for tuition uh it. It's just good overall for the world to do that. Interesting. And so how would someone stand out? Like, what are the kinds of projects that end up appealing to a company? Because I know if you do a lot of these, like, boot camps, like, great, you made your own CMS. Like, so did 10,000 other people. Yeah. Did you get any insight as to, you know, when someone does care about these projects, what are the kinds of projects that appeal to companies? Yeah, I think it's hard to... I think there's one part of it, which is your motivation or your drive, which can really come through. I mean, if you look at... You're right, if you just forked a repo and made a couple of edits in one file, it really doesn't, you can't claim that you actually contributed to open source or anything. But I think one definitely indicates a drive. The second is also, and which is probably hard to just look at a hackadang profile or a GitHub or any of the profiles. You can't just look and figure it out is the depth of thinking and what are all the things that this developer wants to do more. And that's something probably you can get from the interview. But the bigger question really is, would you be willing to bring this person on site and go through the interview process based on their skills and not on their pedigree? And it sounds obvious, but we're trying to educate our customers and everybody who are hiring developers that this is the right way to go. And we're sort of leading and pushing the movement for this. And hopefully we can be successful at that. Cool. And how does this affect a situation where you're hiring remote developers? Are there any other particular cues that you pay attention to? I think the communication aspect is always a big deal. How do you get everybody in sync? I think some of the companies have done an amazing job. GitLab is a YC company. I talked to their CEO and it's fully remote. It's crazy. It just shows how much effort that you need to put in to make sure that people are in sync with each other. I do think, and you're seeing this happen a lot. GitLab is just an example, but I know a lot of others, a lot of other companies are starting to do this. I think the future would be an ability for you to build out engineering teams wherever you want, not just restrict yourself to the Bay Area, and a good common connective tissue that makes sure that things don't break because of bad communication or because of time zone differences and others. I think that's where the world is going to move, which means ability to know their skills and how they can contribute when you're not in the office and all of the others is going to play a very, very important part. Ability to understand both of this at a deeper level is going to play an important role. Yeah, and have you guys conjectured or started working on anything that might be able to test someone's efficacy as a remote developer because it's one thing to have the technical chops yeah it's another thing to be able to work in like a co-working space or in your bedroom or whatever yeah uh when you're in a different time zone and like get shit done yeah yeah i mean i think i think there are uh there's one part which is the iq which is how how good are you in all of these different skills where do you need to improve and the other part is eq which is how good are you in all of these different skills? Where do you need to improve? And the other part is EQ, which is what your personality is. We've been doing some experiments or partnerships with a couple of them, but we've not had a real breakthrough on that yet. But I do think that's going to be helpful. I mean, the reason I'm saying that is there are a lot of companies who use HackerRank to build out remote teams in India and other parts of the globe. There is a company, which you're probably familiar with, Booking.com, one of the most popular travel companies in Amsterdam. They are able to hire developers all over the globe using HackerRank, right? And they're doing it in a very efficient way because they understand the skills, strengths, and weaknesses before you come on site and before you fly to Amsterdam. So I think we're starting to see this movement at least happening in a lot of companies on the IQ part of it. And now if you can do a better job or if you can work with a partner or if you can do something even internally at HackerRank to do the EQ, it can be a very strong solution. And so this is all done through programmatic exams? There aren't any in-person interviews to assess EQ? aren't any in-person interviews to assess EQ? There are some companies who are working on this programmatic way. It sounds very interesting. We've not partnered with them deeply to really understand how well it'll fit in, but it's certainly a very, very interesting opportunity. Okay, so in addition to maybe figuring that out in the future, how else do you see paradigm shifts happening for developers in the future? Obviously they'll be all over the world. What else is going to be happening in five years? I mean, there are a couple of things. One is, I think it was there on Hacker News, as much as there are APIs and different levels of abstraction that have made it easier to get things started, to set up your environment is, and this is for somebody who's a newbie, who's just learning to code, it's very intimidating to set up something and get it running and compile. I think that's one part where things need to get better. to set up something and get it running and compile. I mean, you could have, I think that's one part where things needs to get better. You know, here's an environment, here's where you can go ahead and start to code because a lot of them give up. Oh, yeah. Oh, I did this thing online and then I tried it out on my local. It didn't work because I don't know if you did, did you have this library and there was a dependency failure and you have to go and figure it out and just becomes a big mess and you give up for the most part. So I think, I think that, that is still, you know, we still have to do a better job if we have to increase the number of developers in the world, right? You can't have people giving up after their third lesson or the fifth lesson and saying, you know, it's not taking me anywhere. And also there needs to be a purpose. I mean, the purpose can't be, you're going to get a $100,000 job, right? The purpose has to be much more, whatever is in your mind, you can go ahead and build it on your own, right? I mean, you have to encourage the fact that you can build versus I'm going to get better if we really have to create more developers in the world. Why does that have to get better? Because $100,000 salary, I mean, I agree with you, but to be devil's advocate on this, that's a lot of money to a lot of people. Why does that not work? I think it will work for a subset of people, obviously. But I think in a very longer term, the really great developers are people who did it not because they'll get a job, but because they really wanted to build something. They really wanted to get this, whatever the idea that they had in mind out. and this is just my hypothesis, if you had a monetary value associated with it, you might just focus a lot on that and you will reach a ceiling pretty soon. This is just my hypothesis. So versus if you really fall in love with the idea of building or creating new things, the ceiling is sort of infinite because there's always new technologies, there are always new things that you can go and build. So it's more about what is the type of behavior that you're trying to create. It's like a kid, you're trying to get into the developer world trying to do it. What is the type of behavior that you're trying to create and why you're doing what you're doing? That should be taken care of. The second big bucket is really the paradigm shift that i was talking about which is more companies should come forward and encourage and say you know what we're about skills we don't care about resumes we don't care about what school did he go to as long as he of the skills will be willing to do i still think the proxy of your gpas and companies exist exist at a lot of companies. Yeah, absolutely. I mean, I think that like people constantly disqualify themselves before they even enter a race. And we see it with YC all the time. Like, you know, people are constantly asking questions like, you know, I raise money. Can I do YC? Yes. Like I haven't raised money. Can I do YC? Yes. Like I don't have a co-founder. Can I do IC? Yes. I don't have a co-founder. Can I do IC? Yes. You often encounter this thing where it's like, you can just apply. You can just go for it. And moving things toward a more meritocratic system, that makes a huge difference. What else does a developer value in the hiring process? Not just about a company. What do they want out of that? I think the counterintuitive thing, at least whenever I've talked to a lot of companies, is you should also understand that developers are interviewing you. It's not just a one-way thing. And developers are interviewing you in a bunch of different things, right from the process, how tight and efficient are you actually doing, their peers, and also the challenges or the questions that you're asking and how deep. Sometimes I've seen this at a lot of companies, people are scared to ask hard questions because it might turn off. It might work the other way, which is, I'm wondering, is this the level? I mean, if you just ask the easy question, are these the kind of peers or developers that I'll be working on? And of course, there's a different nuance to the hard question, right? You don't want to ask a complex math problem which has a trick answer. If you didn't know this particular formula, you can't get it. The hard in the sense of relevant to the business, relevant to the job, and how do you go about doing it? The other thing that I'm starting to see happen across a lot of different companies, and even HackerRank has incorporated this, is the level of business acumen that you have as a developer. Usually it's always developers or builders. You have this, whatever requirements or spec, you can go ahead and do it. But if you look at a lot of the great companies, like Google or Facebook or others, they're all developers at the heart of it. And the reason, of course, they had great products, but they also had really strong business acumen. And really great developers have that. Or what I think Steve Jobs incorporated as a 10x developer have that level of very strong business acumen. So that's something that people want to know what your strategy is. People want to know how they can contribute, how what they're building helps in the business strategy. Oftentimes we think it's just about users who are using and MEUs and others. But no, I like to know how we're building the company. And that's something that we're trying to do a lot. It's something that you should do in the interview process as well as my recommendation. Interesting. So in other words, like ask questions about product not just technical stuff yeah and about the business strategy and you should you should be able to uh challenge uh hacker rank or challenge the company on you know why are you doing this and uh here is a different idea here is here's another thing that you can do better oh man now you're just stressing people out like more stuff stuff to prep for. Yeah, but I think it's fun. I like it, but yeah. Because you can just sit in a, whatever, like the Amcha critic, you can say, oh, why did you enter this geography? I think that's a bad move. Or your business plan edition is not, is conflicting with your free user edition. I mean, you can have a good conversation. And frankly, and here is, I mean, all of these things are, the nuances are super important, which is it doesn't matter the questions that the candidate asks, whether that's the right or the wrong thing for the business. You have to judge the quality of thinking. It could be completely off from your business strategy that you would actually implement because you have way more data and you've been in this doing this for six years or something on those lines but it's the quality of thinking and how do you what's the framework of asking questions that you should be judging people on yeah and i found those questions and developers really be at a much higher productivity uh at company. What about the brain teasers? Are they still in fashion? Do developers like them at all? No, I think we shouldn't be using that. I don't know who created that. Some company created that, clearly. I have to go back and look at the history. It's probably like McKinsey or something. Yeah, could be, right? be right uh it is um i think um i think the underlying uh underlying goal is the right one which is basically they're trying to think about the computational thinking which is i don't know how many tennis balls will fit in a boeing right yeah for seven i think they're trying to again this is a question they're trying to figure out the quality of your thinking how do you think about it how do you what kind of uh What kind of data that you will analyze? Or how do you structure the problem? How do you break it down into sub-problems and go ahead and do it? But I think there are better ways that you can assess the computational thinking or the problem-solving skills, which is interesting because that's what the hiring managers care about the most in a much more developer-friendly, coding-friendly way of helping people do that yeah cool okay so in closing um i'm curious about your experience as a founder hiring developers like we've handled we've covered a bunch of stuff for like if you're a company this is how you hire your like 1001st developer yeah but if it's just you and your co-founder and you raise a little bit of money or you're making enough money that you can finally hire someone what are the things you're thinking about what are the things you're testing for early on I think Peter Thiel talked about this I think maybe in one of the podcasts or one of the interviews which is the way PayPal got built was they went and hired people who the others thought weren't qualified, but actually they were really, really good because they didn't have the traditional degree or the traditional background in doing it. I think the first 20 people or so at PayPal were very much on those lines. That's kind of how we at least built the first five to 10 hires of developers. And it's really helped us a lot. If you look at it, I mean, Hari and I didn't go to the IITs, which is the equivalent of Stanford. And, you know, the first five to 10 developers that we hired were people who are very smart, who are very skilled. And it's almost this, quote unquote, untapped pool. And it's the secret source that they have and and then that really set everything right from their motivation and drive to do great things i mean the first engineers are still with our company doing amazing things akshay and shiv and they are they're doing some great things right now they're leading a team they're managing a team and the motivation and the drive to do uh really great things the ability to learn, the ability to assess, making sure that the peer or whoever is going to join the company is as good or better than them. All of that has helped a lot. And I feel that's an important thing. I come back to this whole proxy thing. The current ways of doing proxy on GPAs and degrees is bad. And you have to figure out your first 10 people almost from that untapped pool. I think it helps a lot in your drive and motivation for the long-term. That's just my hypothesis, but I just have one data point from HackerRise. No, I mean, I agree with you, but like the short answer is that you have to do the work to find the great people. And it's like in that arbitrage of of you don't have the right credentials, but you have all the skills, so you're worth working on. Yeah, also I think at some level, people should be really passionate about the mission. And again, the nuance comes here, right? Which is you can't expect somebody to be more passionate than you. That's never gonna happen. But as long as they have a real feel or connect, you know what, we need to solve this problem and here are some of the ways that you can actually do it. That's another thing that you need to test in the first 10 developers. Awesome. All right, man. Well, thanks for coming in. Yeah, thank you for having me. you